<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Development Environment on Clint Berry</title>
    <link>http://clintberry.com/categories/development-environment/</link>
    <description>Recent content in Development Environment on Clint Berry</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 02 Feb 2012 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://clintberry.com/categories/development-environment/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Sublime Text 2 for PHP &amp; WordPress Development</title>
      <link>http://clintberry.com/2012/sublime-text-2-php-symfony-development/</link>
      <pubDate>Thu, 02 Feb 2012 00:00:00 +0000</pubDate>
      
      <guid>http://clintberry.com/2012/sublime-text-2-php-symfony-development/</guid>
      <description>

&lt;p&gt;Sublime Text 2 is an amazing code editor that I started using on the recommendation of a friend. I fell in love and haven&amp;#8217;t looked back. Here are some recomendations for setting up Sublime Text 2 for PHP and WordPress development.&lt;/p&gt;

&lt;h3 id=&#34;why-is-sublime-text-2-awesome&#34;&gt;Why is Sublime Text 2 Awesome?&lt;/h3&gt;

&lt;p&gt;Where do I start&amp;#8230; Here are some of my favorite features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It is light weight. The download size is under 10 megs and it runs fast&lt;/li&gt;
&lt;li&gt;It is VERY customizable. Every key binding and setting imaginable is available to customize&lt;/li&gt;
&lt;li&gt;Plugins, plugins, plugins. ST2 has a built in python interpreter which allows web developers to create custom plugins. (The only thing that would make it better is if it had node.js bundled in for plugins, but I&amp;#8217;ll take Python)&lt;/li&gt;

&lt;li&gt;&lt;p&gt;vim key bindings. Yes, if you love vim, or want to love vim, then you will love sublime text 2, which comes bundled with &amp;#8220;vintage mode&amp;#8221;, which allows you to use vim keybindings.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;It runs on Windows, OSX, and Linux, so I can use ST2 on almost any computer. &lt;/ul&gt;
There are &lt;strong&gt;MANY&lt;/strong&gt; more reasons. Check out this link for some good ones: &lt;a href=&#34;http://net.tutsplus.com/tutorials/tools-and-tips/sublime-text-2-tips-and-tricks/&#34; title=&#34;Sublime Text Tips and Tricks&#34; target=&#34;_blank&#34;&gt;Sublime Text Tips and Tricks&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now you should be fully convinced that Sublime Text is the greatest thing since sliced bread  &lt;img src=&#34;http://clintberry.com/wp-includes/images/smilies/simple-smile.png&#34; alt=&#34;:-)&#34; class=&#34;wp-smiley&#34; style=&#34;height: 1em; max-height: 1em;&#34; /&gt;Let&amp;#8217;s get it setup for developing PHP applications.&lt;/p&gt;

&lt;h3 id=&#34;setting-up-package-management&#34;&gt;Setting Up Package Management&lt;/h3&gt;

&lt;p&gt;One of the coolest plugins for ST2 is the package manager. This should be the first plugin you install because it is the gateway to a big list of other great plugins for you. Installation is easy, simply open ST2 and press command+` (on windows ctrl+`) and it will open up the ST2 console. Copy and paste this code into the terminal:&lt;/p&gt;

&lt;pre class=&#34;wp-code-highlight prettyprint&#34;&gt;import urllib2,os; pf=&amp;#039;Package Control.sublime-package&amp;#039;; ipp=sublime.installed_packages_path(); os.makedirs(ipp) if not os.path.exists(ipp) else None; urllib2.install_opener(urllib2.build_opener(urllib2.ProxyHandler())); open(os.path.join(ipp,pf),&amp;#039;wb&amp;#039;).write(urllib2.urlopen(&amp;#039;http://sublime.wbond.net/&amp;#039;+pf.replace(&amp;#039; &amp;#039;,&amp;#039;%20&amp;#039;)).read()); print &amp;#039;Please restart Sublime Text to finish installation&amp;#039;
&lt;/pre&gt;
        

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;That&amp;#8217;s it, you now have package control built into your editor. To access package control, press shift+command+p and start typing &amp;#8220;package&amp;#8221;. (shift+command+p opens the window of all commands in sublime text 2). You will see a list of commands related to package control. Sweet.&lt;/p&gt;

&lt;h3 id=&#34;packages-you-need&#34;&gt;Packages you need&lt;/h3&gt;

&lt;p&gt;Let&amp;#8217;s get this puppy setup for some PHP development!&lt;/p&gt;

&lt;p&gt;To install a package, type shift+command+p and start typing &amp;#8220;package install&amp;#8221; and hit enter when it is highlighted. Wait a few seconds and it will bring up a list of available packages. Select the package you want to install and then hit enter. That&amp;#8217;s it! Now follow those steps for the following packages:&lt;/p&gt;

&lt;h5 id=&#34;sublime-code-intel-1&#34;&gt;&lt;a href=&#34;https://github.com/Kronuz/SublimeCodeIntel&#34; title=&#34;Sublime Code Intel&#34;&gt;Sublime Code Intel&lt;/a&gt;&lt;/h5&gt;

&lt;p&gt;What use would editing code be without some good autocompletion? CodeIntel provides a better code completion by parsing all the files in your project and creating a nice index of autocomplete options. It also provides click-to-definition functionality by clicking alt-click on a function or variable name. I have found that this plugin isn&amp;#8217;t as consistent or as fast as full IDEs such as Eclipse, but in general is pretty good.&lt;/p&gt;

&lt;h5 id=&#34;sublime-linter-2&#34;&gt;[Sublime Linter][2]&lt;/h5&gt;

&lt;p&gt;This plugin gives you real-time error checking in your php code which is standard in most IDEs. Now it is standard in Sublime Text &lt;img src=&#34;http://clintberry.com/wp-includes/images/smilies/simple-smile.png&#34; alt=&#34;:-)&#34; class=&#34;wp-smiley&#34; style=&#34;height: 1em; max-height: 1em;&#34; /&gt;&lt;/p&gt;

&lt;h5 id=&#34;zen-coding-3&#34;&gt;&lt;a href=&#34;https://bitbucket.org/sublimator/sublime-2-zencoding&#34; title=&#34;Zen Coding&#34;&gt;Zen Coding&lt;/a&gt;&lt;/h5&gt;

&lt;p&gt;If you aren&amp;#8217;t using Zen Coding to create your HTML, then you are missing out. This adds zen coding features into sublime text 2.&lt;/p&gt;

&lt;h5 id=&#34;sublime-jsdocs-4&#34;&gt;&lt;a href=&#34;https://github.com/spadgos/sublime-jsdocs&#34; title=&#34;PHP Doc Blocks&#34;&gt;Sublime JsDocs&lt;/a&gt;&lt;/h5&gt;

&lt;p&gt;Don&amp;#8217;t let the name fool you, this plugin is a smart Doc Block generator for PHP as well as JavaScript. It is the best one of any I have tried. To use it, simply type /** in front of the function/variable you want to generate the docs for and hit tab. You will get a nice block generated for you.&lt;/p&gt;

&lt;h5 id=&#34;wordpress-plugin-5&#34;&gt;[WordPress Plugin][5]&lt;/h5&gt;

&lt;p&gt;This plugin adds a bunch of good snippets to have in your snippet/auto-complete library for WordPress. This helps speed up development significantly if you do a lot of wordpress sites.&lt;/p&gt;

&lt;h5 id=&#34;git-6-038-also-git-sidebar-7&#34;&gt;[Git][6] &amp;#038; also [Git Sidebar][7]&lt;/h5&gt;

&lt;p&gt;Git commands integrated into git hub for your favorite version control. As an added bonus, add git functionality to the sidebar context menu as well.&lt;/p&gt;

&lt;h3 id=&#34;syntax-specific-settings&#34;&gt;Syntax Specific Settings&lt;/h3&gt;

&lt;p&gt;One of the greatest things about ST2 is how easy it is to customize. All the settings are simply JSON documents that you can change to meet your needs. Go ahead and open up Preferences-&amp;gt;Global Preferences and you will see all settings that are available. But don&amp;#8217;t change this file, since it gets overwritten during upgrades. Open up the User preferences file and put in any changes that you need.&lt;/p&gt;

&lt;p&gt;But if you want to customize setting for only certain syntaxes (like PHP) you can do so by opening a PHP file in the editor and then going to Preferences-&amp;gt;Syntax Specific and you will be able to change settings for only the PHP syntax. For instance I like it when I double click a variable in php for it to select the $ symbol as well, but by default ST2 doesn&amp;#8217;t do this, so I change the PHP settings to not include $ in word separators.&lt;/p&gt;

&lt;pre class=&#34;wp-code-highlight prettyprint&#34;&gt;{
&#34;extensions&#34;:
[
&#34;php&#34;
],
&#34;word_separators&#34;: &#34;./\\()\&#34;&amp;#039;-:,.;&amp;lt;&amp;gt;~!@#%^&amp;*|+=[]{}`~?&#34;
}&lt;/pre&gt;
        

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;h3 id=&#34;important-shortcut-keys&#34;&gt;Important Shortcut Keys&lt;/h3&gt;

&lt;p&gt;Lastly, I want to include a short list of some short cut keys you will likely enjoy:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Alt+[1-9]&lt;/strong&gt; &amp;#8211; Switch to a certain tab&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Command+P&lt;/strong&gt; &amp;#8211; Fast file switching, Line Number, Jump to definition (within file)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Alt+.&lt;/strong&gt; &amp;#8211; Close a started HTML tag (although I suggest Zen Coding Plugin)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Esc&lt;/strong&gt; &amp;#8211; Enter Vintage Mode (if enabled)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Command+D&lt;/strong&gt; &amp;#8211; Multi-select same word. This is VERY COOL.&lt;/p&gt;

&lt;p&gt;Here are some other good &lt;a href=&#34;http://www.sublimetext.com/forum/viewtopic.php?f=2&amp;#038;t=4198&#34; title=&#34;Sublime Text 2 Shortcut Keys&#34; target=&#34;_blank&#34;&gt;shortcut&lt;/a&gt; &lt;a href=&#34;http://www.sublimetext.com/docs/selection&#34; title=&#34;Sublime Text 2 Shortcut Keys&#34; target=&#34;_blank&#34;&gt;keys&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hope you enjoy Sublime Text as much as I have!&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[2]: &lt;a href=&#34;https://github.com/Kronuz/SublimeLinter&#34;&gt;https://github.com/Kronuz/SublimeLinter&lt;/a&gt; &amp;ldquo;&amp;rdquo;&lt;/p&gt;

&lt;p&gt;[5]: &lt;a href=&#34;https://github.com/purplefish32/sublime-text-2-wordpress&#34;&gt;https://github.com/purplefish32/sublime-text-2-wordpress&lt;/a&gt; &amp;ldquo;&amp;rdquo;
 [6]: &lt;a href=&#34;https://github.com/kemayo/sublime-text-2-git&#34;&gt;https://github.com/kemayo/sublime-text-2-git&lt;/a&gt; &amp;ldquo;&amp;rdquo;
 [7]: &lt;a href=&#34;https://github.com/SublimeText/SideBarGit&#34;&gt;https://github.com/SublimeText/SideBarGit&lt;/a&gt; &amp;ldquo;&amp;rdquo;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Wildcard Sub-Domains on OSX, Web Development on Localhost</title>
      <link>http://clintberry.com/2011/wildcard-sub-domains-on-osx-web-development-on-localhost/</link>
      <pubDate>Mon, 30 May 2011 00:00:00 +0000</pubDate>
      
      <guid>http://clintberry.com/2011/wildcard-sub-domains-on-osx-web-development-on-localhost/</guid>
      <description>

&lt;p&gt;Today&amp;#8217;s post will be on setting up wildcard subdomains in OSX. This allows you to map folders in your web root to sub-domains on your local box. Why would you want to do this? It is nice to be able to type use &lt;em&gt;&lt;a href=&#34;http://myproject.clint.dev&#34;&gt;http://myproject.clint.dev&lt;/a&gt;&lt;/em&gt; for the URL and have it map to the &amp;#8216;myproject&amp;#8217; folder on your local box. No need to add a line to the etc/hosts file, and no need to add a virtual host in apache for each sub-domain. The method I will be outlining here will allow you to map x.yourdevdomain.dev to any folder &amp;#8216;x&amp;#8217; using Bind and a wildcard virtual host in apache. This tutorial assumes you already have Apache setup on your local box.&lt;/p&gt;

&lt;h3 id=&#34;bind-dns-setup-osx-10-6&#34;&gt;&lt;strong&gt;Bind DNS Setup (OSX 10.6+)&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Bind comes pre-installed on OSx 10.6. All we have to do is configure it and run it. I took these Bind setup instructions from &lt;a href=&#34;http://jessedearing.com/nodes/9-setting-up-wildcard-subdomains-on-os-x-10-6&#34; target=&#34;_blank&#34;&gt;Jesse Dearing&amp;#8217;s blog&lt;/a&gt;. I hope he doesn&amp;#8217;t mind.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.isc.org/software/bind&#34; target=&#34;_blank&#34;&gt;BIND&lt;/a&gt; is the little piece of software the runs the internet. BIND is a DNS server and it works in a distributed fashion. It’s really fascinating &lt;a href=&#34;http://www.howstuffworks.com/dns1.htm&#34; target=&#34;_blank&#34;&gt;how DNS works&lt;/a&gt; but that’s outside the scope of this post. There are a few steps to get BIND set up to serve domains and they are crucial.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;sudo -s&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This will let you run a shell as root. I suggest doing this because most of the next commands you will execute need to be on privileged files and directories.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Create the &lt;code&gt;rndc.conf&lt;/code&gt; and &lt;code&gt;rndc.key&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You can easily do this by running the following commands:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;rndc-confgen &amp;gt; /etc/rndc.conf&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;head -n5 /etc/rndc.conf |tail -n4 &amp;gt; /etc/rndc.key&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Add the zone to &lt;code&gt;/etc/named.conf&lt;/code&gt; I am going to use .dev for all my examples. I have used .local on my machine but I have found that this can be troublesome with the OS X default Multicast being .local. You can make this whatever top level domain you would like (.dev, .rails, .php, etc.) In &lt;code&gt;/etc/named.conf &lt;/code&gt;add: &lt;pre class=&#34;wp-code-highlight prettyprint&#34;&gt;&amp;lt;code&amp;gt; zone &amp;ldquo;dev&amp;rdquo; IN { type master; file &amp;ldquo;dev.zone&amp;rdquo;; allow-update { none; }; }; &amp;lt;/code&amp;gt;&lt;/pre&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Create &lt;code&gt;/var/named/dev.zone&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Use this template for your zone file:&lt;/p&gt; &lt;pre class=&#34;wp-code-highlight prettyprint&#34;&gt;$TTL 60 $ORIGIN dev. @ 1D IN SOA localhost. root.localhost. ( 
42 ; 
serial (d. adams) 3H ;
refresh 15M ;
retry 1W ;
expiry 1D ) ;
minimum 1D IN NS localhost 1D IN A 127.0.0.1 localhost.dev. 60 IN A 127.0.0.1 *.dev. 60 IN A 127.0.0.1&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;The only thing you should have to change is the serial (42) to any random number and if you decided to go with something else other than .dev: everthing that has .dev in it. Note that the dots (.) after the dev entries are intentional and required.&lt;/li&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;launchctl load -w /System/Library/LaunchDaemons/org.isc.named.plist&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This will cause named to load everytime the system restarts.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;named&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This loads named now. It doesn’t give you any input if it fails to load so I recommend running &lt;code&gt;named -g&lt;/code&gt; first to make sure it parses you zones and configs. &lt;code&gt;-g&lt;/code&gt; will tell named to run in the forground and write all logging to STDOUT. Once you’ve verified that it starts then Ctrl-c and run &lt;code&gt;named&lt;/code&gt; as normal.&lt;/ol&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;create-the-resolver&#34;&gt;Create the resolver&lt;/h4&gt;

&lt;p&gt;Next we have to create an entry in the /etc/resolver folder. This folder is checked every time a DNS entry is looked up. If a file exists here then it will use the special resolv configuration to look up DNS names. Here you can specify custom domains, search orders, and in this case nameservers. The resolver folder may not exist in the /etc directory. If it doesn&amp;#8217;t, create it.&lt;/p&gt;

&lt;p&gt;Create a file with the root domain you want to use for your projects.. I.e. if your root domain is &lt;code&gt;clint.dev&lt;/code&gt; then create the file &lt;code&gt;clint.dev&lt;/code&gt; and inside it put:&lt;/p&gt;

&lt;pre class=&#34;wp-code-highlight prettyprint&#34;&gt;&amp;lt;code&amp;gt;nameserver 127.0.0.1 &amp;lt;/code&amp;gt;&lt;/pre&gt;
    

&lt;p&gt;Now when you go to &lt;a href=&#34;http://clint.dev&#34;&gt;http://clint.dev&lt;/a&gt; your root web directory should load, but you can also go to &lt;a href=&#34;http://www.clint.dev&#34;&gt;http://www.clint.dev&lt;/a&gt; or &lt;a href=&#34;http://theskyisblue.clint.dev&#34;&gt;http://theskyisblue.clint.dev&lt;/a&gt; and it should still go to your root web directory.&lt;/p&gt;

&lt;p&gt;Log out of the root shell by typing exit.&lt;/p&gt;

&lt;p&gt;Your wildcard DNS settings are now ready to go.&lt;/p&gt;

&lt;h2 id=&#34;apache-setup&#34;&gt;Apache Setup&lt;/h2&gt;

&lt;p&gt;Now we need to get apache to route to the correct folder based on the sub-domain used. Using the example from before, we want &lt;a href=&#34;http://myproject.clint.dev&#34;&gt;http://myproject.clint.dev&lt;/a&gt; to go to the folder &amp;#8216;myproject&amp;#8217; in my web root. To accomblish this we setup a vhost in the apache configuration file (httpd.conf). Depending on your Apache setup, the file can be in different locations. Because I use ZendServer community edition, I add a separate file in the &lt;code&gt;/usr/local/zend/apache2/conf.d&lt;/code&gt; directory. I call my file dev.conf and add the following lines:&lt;/p&gt;

&lt;pre class=&#34;wp-code-highlight prettyprint&#34;&gt;NameVirtualHost *:80 
ServerAdmin webmaster@local.web 
DocumentRoot &#34;/Users/clint/Sites&#34; 
ServerName clint.dev ServerAlias *.clint.dev 
RewriteEngine on 
RewriteCond %{HTTP_HOST} !^www.* [NC] 
RewriteCond %{HTTP_HOST} ^([^\.]+)\.clint\.dev 
RewriteCond /Users/clint/Sites/%1/public -d 
RewriteRule ^(.*) /%1/public/$1 [L] 
RewriteCond %{HTTP_HOST} !^www.* [NC] 
RewriteCond %{HTTP_HOST} ^([^\.]+)\.clint\.dev 
RewriteCond /Users/clint/Sites/%1 -d 
RewriteRule ^(.*) /%1/$1 [L]&lt;/pre&gt;
    

&lt;p&gt;This virtual host checks to make sure the folder exists for that project, and checks to see if a public directory exists (Zend Framework apps). If the public directory exists, it uses that directory as the document root for that subdomain. If public doesn&amp;#8217;t exist, it just uses the project folder as the document root. If niether exists, then it will just use the Sites directory as the document root (the default document root).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note: Make sure to change any &amp;#8216;/Users/clint/Sites&amp;#8217; to whatever directory your document root is to be. Also change the .clint.dev to your custom development domain.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;After that, all your subdomains will map to project folders in your document root. Let me know if you have any questions.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
  </channel>
</rss>