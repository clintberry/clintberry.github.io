<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Php on Clint Berry</title>
    <link>http://clintberry.github.io/categories/php/</link>
    <description>Recent content in Php on Clint Berry</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 01 Sep 2012 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://clintberry.github.io/categories/php/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Backbone.js apps with Authentication Tutorial</title>
      <link>http://clintberry.github.io/2012/backbone-js-apps-authentication-tutorial/</link>
      <pubDate>Sat, 01 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>http://clintberry.github.io/2012/backbone-js-apps-authentication-tutorial/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;http://clintberry.github.io/images/backbonelocked.png&#34; alt=&#34;backbonelocked&#34; title=&#34;backbonelocked&#34; width=&#34;568&#34; height=&#34;111&#34; class=&#34;alignnone size-full wp-image-670&#34; /&gt;&lt;/p&gt;

&lt;p&gt;At my current company I am working on my first large-scale production backbone.js app and I couldn&amp;#8217;t be happier. After using backbone.js for a few months I have caught the vision and I am becoming more and more proficient. But every once and a while I still run into problems I would consider basic, but I can&amp;#8217;t seem to find much help on the interwebs. Authentication with backbone.js apps was one of those problems. So I am posting the solution I came up with in hopes it will benefit someone else, and hopefully will garner some feedback or potentially better ways to solve authentication with Backbone.js.&lt;/p&gt;

&lt;h4 id=&#34;starting-code-base:73b85921beb05e353da557a09d786139&#34;&gt;Starting Code Base&lt;/h4&gt;

&lt;p&gt;To start this tutorial, I will be using an already created backbone.js application called &lt;a href=&#34;https://github.com/ccoenraets/backbone-directory&#34; title=&#34;Backbone Directory&#34; target=&#34;_blank&#34;&gt;Backbone Directory&lt;/a&gt;, created by &lt;a href=&#34;http://coenraets.org/blog/2012/02/sample-app-with-backbone-js-and-twitter-bootstrap/&#34; title=&#34;Sample Backbone Bootstrap app&#34; target=&#34;_blank&#34;&gt;Christophe Coenraets&lt;/a&gt; who has some great tutorials and information about backbone on his blog. He has some mobile versions of the app in the code base as well, but we will be working in the &amp;#8220;web&amp;#8221; directory.&lt;/p&gt;

&lt;h4 id=&#34;project-overview:73b85921beb05e353da557a09d786139&#34;&gt;Project Overview&lt;/h4&gt;

&lt;p&gt;Backbone Directory uses the Slim PHP framework on the server to communicate with backbone, but the principles we will be going over are language agnostic. In addition, Slim is based on the Sinatra (Ruby) methodology which in turn translates to Express.js framework for Node.js (JavaScript), and Tornado (Python).&lt;/p&gt;

&lt;h4 id=&#34;setting-up-very-basic-server-side-authentication:73b85921beb05e353da557a09d786139&#34;&gt;Setting Up (Very) Basic Server Side Authentication&lt;/h4&gt;

&lt;p&gt;To get this started, we need to setup the server side login functions, and also a way to protect API requests so no data goes to anyone that isn&amp;#8217;t authenticated. First, let&amp;#8217;s add a login function to the api/index.php in the web directory:&lt;/p&gt;

&lt;pre class=&#34;wp-code-highlight prettyprint&#34;&gt;// file: api/index.php
session_start(); // Add this to the top of the file

/**
 * Quick and dirty login function with hard coded credentials (admin/admin)
 * This is just an example. Do not use this in a production environment
 */
function login() {
    if(!empty($_POST[&amp;#039;email&amp;#039;]) &amp;&amp; !empty($_POST[&amp;#039;password&amp;#039;])) {
        // normally you would load credentials from a database. 
        // This is just an example and is certainly not secure
        if($_POST[&amp;#039;email&amp;#039;] == &amp;#039;admin&amp;#039; &amp;&amp; $_POST[&amp;#039;password&amp;#039;] == &amp;#039;admin&amp;#039;) {
            $user = array(&#34;email&#34;=&amp;gt;&#34;admin&#34;, &#34;firstName&#34;=&amp;gt;&#34;Clint&#34;, &#34;lastName&#34;=&amp;gt;&#34;Berry&#34;, &#34;role&#34;=&amp;gt;&#34;user&#34;);
            $_SESSION[&amp;#039;user&amp;#039;] = $user;
            echo json_encode($user);
        }
        else {
            echo &amp;#039;{&#34;error&#34;:{&#34;text&#34;:&#34;You shall not pass...&#34;}}&amp;#039;;
        }
    }
    else {
        echo &amp;#039;{&#34;error&#34;:{&#34;text&#34;:&#34;Username and Password are required.&#34;}}&amp;#039;;
    }
}
&lt;/pre&gt;

&lt;p&gt;This is a very basic login function that is obviously not secure, but will do the job for us, since our focus is really on the backbone side of things. The key thing to note here, is that since we are using backbone, even the login function works as a JSON api request. We don&amp;#8217;t generate any HTML, we simply send back JSON data with a user identity, or an error if something went wrong. Now we need to associate this function with a route in Slim, so add the following code under the other defined routes in index.php:&lt;/p&gt;

&lt;pre class=&#34;wp-code-highlight prettyprint&#34;&gt;// file: api/index.php
// I add the login route as a post, since we will be posting the login form info
$app-&amp;gt;post(&amp;#039;/login&amp;#039;, &amp;#039;login&amp;#039;);

&lt;/pre&gt;

&lt;p&gt;Now we also need to make sure no data gets sent to anyone that isn&amp;#8217;t authorized. So now we define an authorize function to check that a user has the right permissions to get the data:&lt;/p&gt;

&lt;pre class=&#34;wp-code-highlight prettyprint&#34;&gt;// File: api/index.php
/**
 * Authorise function, used as Slim Route Middlewear
 */
function authorize($role = &#34;user&#34;) {
    return function () use ( $role ) {
        // Get the Slim framework object
        $app = Slim::getInstance();
        // First, check to see if the user is logged in at all
        if(!empty($_SESSION[&amp;#039;user&amp;#039;])) {
            // Next, validate the role to make sure they can access the route
            // We will assume admin role can access everything
            if($_SESSION[&amp;#039;user&amp;#039;][&amp;#039;role&amp;#039;] == $role || 
                $_SESSION[&amp;#039;user&amp;#039;][&amp;#039;role&amp;#039;] == &amp;#039;admin&amp;#039;) {
                //User is logged in and has the correct permissions... Nice!
                return true;
            }
            else {
                // If a user is logged in, but doesn&amp;#039;t have permissions, return 403
                $app-&amp;gt;halt(403, &amp;#039;You shall not pass!&amp;#039;);
            }
        }
        else {
            // If a user is not logged in at all, return a 401
            $app-&amp;gt;halt(401, &amp;#039;You shall not pass!&amp;#039;);
        }
    };
}
&lt;/pre&gt;

&lt;p&gt;The authorize function uses some PHP closure Kung Fu, but the key is to return HTTP error codes to backbone. In our case we are going to return a 401 error (unauthorized) if a user is trying to access something they need to be logged in for, and a 403 (forbidden) if the user is logged in but doesn&amp;#8217;t have enough privs to get the data he wants.&lt;/p&gt;

&lt;div class=&#34;alert alert-info&#34;&gt;
  &lt;strong&gt;More Info:&lt;/strong&gt; Check out &lt;a href=&#34;http://www.slimframework.com/documentation/stable#routing-middleware&#34; title=&#34;Slim Route Middlewear&#34; target=&#34;_blank&#34;&gt;Slim Route Middleware&lt;/a&gt; and &lt;a href=&#34;http://php.net/manual/en/functions.anonymous.php&#34; title=&#34;PHP Closures&#34; target=&#34;_blank&#34;&gt;PHP Closures&lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;The last thing we need to do in our server-side code is add the middleware to the routes we want to protect:&lt;/p&gt;

&lt;pre class=&#34;wp-code-highlight prettyprint&#34;&gt;// File: api/index.php
$app-&amp;gt;get(&amp;#039;/employees&amp;#039;, authorize(&amp;#039;user&amp;#039;), &amp;#039;getEmployees&amp;#039;);
$app-&amp;gt;get(&amp;#039;/employees/:id&amp;#039;,    authorize(&amp;#039;user&amp;#039;),&amp;#039;getEmployee&amp;#039;);
$app-&amp;gt;get(&amp;#039;/employees/:id/reports&amp;#039;,    authorize(&amp;#039;admin&amp;#039;),&amp;#039;getReports&amp;#039;);
$app-&amp;gt;get(&amp;#039;/employees/search/:query&amp;#039;, authorize(&amp;#039;user&amp;#039;),&amp;#039;getEmployeesByName&amp;#039;);
$app-&amp;gt;get(&amp;#039;/employees/modifiedsince/:timestamp&amp;#039;, authorize(&amp;#039;user&amp;#039;), &amp;#039;findByModifiedDate&amp;#039;);
&lt;/pre&gt;

&lt;h4 id=&#34;setting-up-backbone-views:73b85921beb05e353da557a09d786139&#34;&gt;Setting Up Backbone Views&lt;/h4&gt;

&lt;p&gt;Now let&amp;#8217;s get to the good stuff: Setting up our backbone views. For authentication we will of course need a login view:&lt;/p&gt;

&lt;pre class=&#34;wp-code-highlight prettyprint&#34;&gt;// File: web/js/views/login.js
window.LoginView = Backbone.View.extend({

    initialize:function () {
        console.log(&amp;#039;Initializing Login View&amp;#039;);
    },

    events: {
        &#34;click #loginButton&#34;: &#34;login&#34;
    },

    render:function () {
        $(this.el).html(this.template());
        return this;
    },

    login:function (event) {
        event.preventDefault(); // Don&amp;#039;t let this button submit the form
        $(&amp;#039;.alert-error&amp;#039;).hide(); // Hide any errors on a new submit
        var url = &amp;#039;../api/login&amp;#039;;
        console.log(&amp;#039;Loggin in... &amp;#039;);
        var formValues = {
            email: $(&amp;#039;#inputEmail&amp;#039;).val(),
            password: $(&amp;#039;#inputPassword&amp;#039;).val()
        };

        $.ajax({
            url:url,
            type:&amp;#039;POST&amp;#039;,
            dataType:&#34;json&#34;,
            data: formValues,
            success:function (data) {
                console.log([&#34;Login request details: &#34;, data]);
               
                if(data.error) {  // If there is an error, show the error messages
                    $(&amp;#039;.alert-error&amp;#039;).text(data.error.text).show();
                }
                else { // If not, send them back to the home page
                    window.location.replace(&amp;#039;#&amp;#039;);
                }
            }
        });
    }
});

&lt;/pre&gt;

&lt;p&gt;This view is pretty straight forward. It renders the login template, and put a click event handler on the login button. The event handler fires the login function when the button is clicked and sends an ajax request to our php login function. If an error comes back, we put it in the error div and show that div.&lt;/p&gt;

&lt;p&gt;Here is the login template code:&lt;/p&gt;

&lt;pre class=&#34;wp-code-highlight prettyprint&#34;&gt;&amp;lt;!-- File: web/tpl/Login.html --&amp;gt;
&amp;lt;h1&amp;gt;Login&amp;lt;/h1&amp;gt;
&amp;lt;div class=&#34;alert alert-error&#34; style=&#34;display:none;&#34;&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;form class=&#34;form-horizontal&#34;&amp;gt;
  &amp;lt;div class=&#34;control-group&#34;&amp;gt;
    &amp;lt;label class=&#34;control-label&#34; for=&#34;inputEmail&#34;&amp;gt;Email&amp;lt;/label&amp;gt;
    &amp;lt;div class=&#34;controls&#34;&amp;gt;
      &amp;lt;input type=&#34;text&#34; id=&#34;inputEmail&#34; placeholder=&#34;Email&#34;&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div class=&#34;control-group&#34;&amp;gt;
    &amp;lt;label class=&#34;control-label&#34; for=&#34;inputPassword&#34;&amp;gt;Password&amp;lt;/label&amp;gt;
    &amp;lt;div class=&#34;controls&#34;&amp;gt;
      &amp;lt;input type=&#34;password&#34; id=&#34;inputPassword&#34; placeholder=&#34;Password&#34;&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div class=&#34;control-group&#34;&amp;gt;
    &amp;lt;div class=&#34;controls&#34;&amp;gt;
      &amp;lt;button type=&#34;submit&#34; class=&#34;btn&#34; id=&#34;loginButton&#34;&amp;gt;Sign in&amp;lt;/button&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/pre&gt;

&lt;h4 id=&#34;telling-backbone-how-to-handle-401-038-403-errors-ajaxsetup:73b85921beb05e353da557a09d786139&#34;&gt;Telling Backbone How to Handle 401 &amp;#038; 403 Errors (ajaxSetup)&lt;/h4&gt;

&lt;p&gt;Now here comes the kicker. We need backbone/jquery to catch any requests that return a 401 or 403 error and handle those requests appropriately. The method I have used to do this is to call the jquery function ajaxSetup which allows us to watch for certain status codes and to handle them appropriately.&lt;/p&gt;

&lt;pre class=&#34;wp-code-highlight prettyprint&#34;&gt;// File: web/js/main.js
// Tell jQuery to watch for any 401 or 403 errors and handle them appropriately
$.ajaxSetup({
    statusCode: {
        401: function(){
            // Redirec the to the login page.
            window.location.replace(&amp;#039;/#login&amp;#039;);
         
        },
        403: function() {
            // 403 -- Access denied
            window.location.replace(&amp;#039;/#denied&amp;#039;);
        }
    }
});
&lt;/pre&gt;

&lt;p&gt;Now all 401s and 403s will be redirected to appropriate place. (I haven&amp;#8217;t implemented the &amp;#8220;denied&amp;#8221; view yet, but you get the idea)&lt;/p&gt;

&lt;p&gt;Lastly we update the backbone routing to include the login url and login view:&lt;/p&gt;

&lt;pre class=&#34;wp-code-highlight prettyprint&#34;&gt;// File: web/js/main.js
window.Router = Backbone.Router.extend({

    routes: {
        &#34;&#34;: &#34;home&#34;,
        &#34;contact&#34;: &#34;contact&#34;,
        &#34;employees/:id&#34;: &#34;employeeDetails&#34;,
        &#34;login&#34; : &#34;login&#34;
    },

// ...

    login: function() {
        $(&amp;#039;#content&amp;#039;).html(new LoginView().render().el);
    }
}
&lt;/pre&gt;

&lt;h4 id=&#34;the-final-word-and-source-code:73b85921beb05e353da557a09d786139&#34;&gt;The Final Word (and source code)&lt;/h4&gt;

&lt;p&gt;That is it! You should now have a password protected REST API for BackboneJS. I have posted the &lt;a href=&#34;https://github.com/clintberry/backbone-directory-auth&#34; title=&#34;Backbone Authentication&#34; target=&#34;_blank&#34;&gt;project to github (here)&lt;/a&gt;, so feel free to check out the code and see it in action. Currently, you will need PHP/Apache with MySQL setup and the database imported. I am working on a Vagrant file for the project so you will be able to see it in action without setting up your own server.&lt;/p&gt;

&lt;p&gt;As always, let me know if you have any questions or suggestions.&lt;/p&gt;

&lt;p&gt;Source Code: &lt;a href=&#34;https://github.com/clintberry/backbone-directory-auth&#34; title=&#34;Backbone Authentication&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://github.com/clintberry/backbone-directory-auth&#34;&gt;https://github.com/clintberry/backbone-directory-auth&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Phing For PHP Deployment</title>
      <link>http://clintberry.github.io/2012/phing-php-deployment/</link>
      <pubDate>Tue, 10 Apr 2012 00:00:00 +0000</pubDate>
      
      <guid>http://clintberry.github.io/2012/phing-php-deployment/</guid>
      <description>&lt;p&gt;I recently did a presentation at the Utah PHP Users group on Phing for deploying PHP applications. Here are the slides:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://clintberry.com/slides/phing&#34; title=&#34;Phing Slides&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://clintberry.com/slides/phing&#34;&gt;http://clintberry.com/slides/phing&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sublime Text 2 for PHP &amp; WordPress Development</title>
      <link>http://clintberry.github.io/2012/sublime-text-2-php-symfony-development/</link>
      <pubDate>Thu, 02 Feb 2012 00:00:00 +0000</pubDate>
      
      <guid>http://clintberry.github.io/2012/sublime-text-2-php-symfony-development/</guid>
      <description>

&lt;p&gt;Sublime Text 2 is an amazing code editor that I started using on the recommendation of a friend. I fell in love and haven&amp;#8217;t looked back. Here are some recomendations for setting up Sublime Text 2 for PHP and WordPress development.&lt;/p&gt;

&lt;h3 id=&#34;why-is-sublime-text-2-awesome:aa1d181a86cd4b3bc45fc04c4629024d&#34;&gt;Why is Sublime Text 2 Awesome?&lt;/h3&gt;

&lt;p&gt;Where do I start&amp;#8230; Here are some of my favorite features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It is light weight. The download size is under 10 megs and it runs fast&lt;/li&gt;
&lt;li&gt;It is VERY customizable. Every key binding and setting imaginable is available to customize&lt;/li&gt;
&lt;li&gt;Plugins, plugins, plugins. ST2 has a built in python interpreter which allows web developers to create custom plugins. (The only thing that would make it better is if it had node.js bundled in for plugins, but I&amp;#8217;ll take Python)&lt;/li&gt;

&lt;li&gt;&lt;p&gt;vim key bindings. Yes, if you love vim, or want to love vim, then you will love sublime text 2, which comes bundled with &amp;#8220;vintage mode&amp;#8221;, which allows you to use vim keybindings.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;It runs on Windows, OSX, and Linux, so I can use ST2 on almost any computer. &lt;/ul&gt;
There are &lt;strong&gt;MANY&lt;/strong&gt; more reasons. Check out this link for some good ones: &lt;a href=&#34;http://net.tutsplus.com/tutorials/tools-and-tips/sublime-text-2-tips-and-tricks/&#34; title=&#34;Sublime Text Tips and Tricks&#34; target=&#34;_blank&#34;&gt;Sublime Text Tips and Tricks&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now you should be fully convinced that Sublime Text is the greatest thing since sliced bread  &lt;img src=&#34;http://clintberry.com/wp-includes/images/smilies/simple-smile.png&#34; alt=&#34;:-)&#34; class=&#34;wp-smiley&#34; style=&#34;height: 1em; max-height: 1em;&#34; /&gt;Let&amp;#8217;s get it setup for developing PHP applications.&lt;/p&gt;

&lt;h3 id=&#34;setting-up-package-management:aa1d181a86cd4b3bc45fc04c4629024d&#34;&gt;Setting Up Package Management&lt;/h3&gt;

&lt;p&gt;One of the coolest plugins for ST2 is the package manager. This should be the first plugin you install because it is the gateway to a big list of other great plugins for you. Installation is easy, simply open ST2 and press command+` (on windows ctrl+`) and it will open up the ST2 console. Copy and paste this code into the terminal:&lt;/p&gt;

&lt;pre class=&#34;wp-code-highlight prettyprint&#34;&gt;import urllib2,os; pf=&amp;#039;Package Control.sublime-package&amp;#039;; ipp=sublime.installed_packages_path(); os.makedirs(ipp) if not os.path.exists(ipp) else None; urllib2.install_opener(urllib2.build_opener(urllib2.ProxyHandler())); open(os.path.join(ipp,pf),&amp;#039;wb&amp;#039;).write(urllib2.urlopen(&amp;#039;http://sublime.wbond.net/&amp;#039;+pf.replace(&amp;#039; &amp;#039;,&amp;#039;%20&amp;#039;)).read()); print &amp;#039;Please restart Sublime Text to finish installation&amp;#039;
&lt;/pre&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;That&amp;#8217;s it, you now have package control built into your editor. To access package control, press shift+command+p and start typing &amp;#8220;package&amp;#8221;. (shift+command+p opens the window of all commands in sublime text 2). You will see a list of commands related to package control. Sweet.&lt;/p&gt;

&lt;h3 id=&#34;packages-you-need:aa1d181a86cd4b3bc45fc04c4629024d&#34;&gt;Packages you need&lt;/h3&gt;

&lt;p&gt;Let&amp;#8217;s get this puppy setup for some PHP development!&lt;/p&gt;

&lt;p&gt;To install a package, type shift+command+p and start typing &amp;#8220;package install&amp;#8221; and hit enter when it is highlighted. Wait a few seconds and it will bring up a list of available packages. Select the package you want to install and then hit enter. That&amp;#8217;s it! Now follow those steps for the following packages:&lt;/p&gt;

&lt;h5 id=&#34;sublime-code-intel-1:aa1d181a86cd4b3bc45fc04c4629024d&#34;&gt;&lt;a href=&#34;https://github.com/Kronuz/SublimeCodeIntel&#34; title=&#34;Sublime Code Intel&#34;&gt;Sublime Code Intel&lt;/a&gt;&lt;/h5&gt;

&lt;p&gt;What use would editing code be without some good autocompletion? CodeIntel provides a better code completion by parsing all the files in your project and creating a nice index of autocomplete options. It also provides click-to-definition functionality by clicking alt-click on a function or variable name. I have found that this plugin isn&amp;#8217;t as consistent or as fast as full IDEs such as Eclipse, but in general is pretty good.&lt;/p&gt;

&lt;h5 id=&#34;sublime-linter-2:aa1d181a86cd4b3bc45fc04c4629024d&#34;&gt;[Sublime Linter][2]&lt;/h5&gt;

&lt;p&gt;This plugin gives you real-time error checking in your php code which is standard in most IDEs. Now it is standard in Sublime Text &lt;img src=&#34;http://clintberry.com/wp-includes/images/smilies/simple-smile.png&#34; alt=&#34;:-)&#34; class=&#34;wp-smiley&#34; style=&#34;height: 1em; max-height: 1em;&#34; /&gt;&lt;/p&gt;

&lt;h5 id=&#34;zen-coding-3:aa1d181a86cd4b3bc45fc04c4629024d&#34;&gt;&lt;a href=&#34;https://bitbucket.org/sublimator/sublime-2-zencoding&#34; title=&#34;Zen Coding&#34;&gt;Zen Coding&lt;/a&gt;&lt;/h5&gt;

&lt;p&gt;If you aren&amp;#8217;t using Zen Coding to create your HTML, then you are missing out. This adds zen coding features into sublime text 2.&lt;/p&gt;

&lt;h5 id=&#34;sublime-jsdocs-4:aa1d181a86cd4b3bc45fc04c4629024d&#34;&gt;&lt;a href=&#34;https://github.com/spadgos/sublime-jsdocs&#34; title=&#34;PHP Doc Blocks&#34;&gt;Sublime JsDocs&lt;/a&gt;&lt;/h5&gt;

&lt;p&gt;Don&amp;#8217;t let the name fool you, this plugin is a smart Doc Block generator for PHP as well as JavaScript. It is the best one of any I have tried. To use it, simply type /** in front of the function/variable you want to generate the docs for and hit tab. You will get a nice block generated for you.&lt;/p&gt;

&lt;h5 id=&#34;wordpress-plugin-5:aa1d181a86cd4b3bc45fc04c4629024d&#34;&gt;[WordPress Plugin][5]&lt;/h5&gt;

&lt;p&gt;This plugin adds a bunch of good snippets to have in your snippet/auto-complete library for WordPress. This helps speed up development significantly if you do a lot of wordpress sites.&lt;/p&gt;

&lt;h5 id=&#34;git-6-038-also-git-sidebar-7:aa1d181a86cd4b3bc45fc04c4629024d&#34;&gt;[Git][6] &amp;#038; also [Git Sidebar][7]&lt;/h5&gt;

&lt;p&gt;Git commands integrated into git hub for your favorite version control. As an added bonus, add git functionality to the sidebar context menu as well.&lt;/p&gt;

&lt;h3 id=&#34;syntax-specific-settings:aa1d181a86cd4b3bc45fc04c4629024d&#34;&gt;Syntax Specific Settings&lt;/h3&gt;

&lt;p&gt;One of the greatest things about ST2 is how easy it is to customize. All the settings are simply JSON documents that you can change to meet your needs. Go ahead and open up Preferences-&amp;gt;Global Preferences and you will see all settings that are available. But don&amp;#8217;t change this file, since it gets overwritten during upgrades. Open up the User preferences file and put in any changes that you need.&lt;/p&gt;

&lt;p&gt;But if you want to customize setting for only certain syntaxes (like PHP) you can do so by opening a PHP file in the editor and then going to Preferences-&amp;gt;Syntax Specific and you will be able to change settings for only the PHP syntax. For instance I like it when I double click a variable in php for it to select the $ symbol as well, but by default ST2 doesn&amp;#8217;t do this, so I change the PHP settings to not include $ in word separators.&lt;/p&gt;

&lt;pre class=&#34;wp-code-highlight prettyprint&#34;&gt;{
&#34;extensions&#34;:
[
&#34;php&#34;
],
&#34;word_separators&#34;: &#34;./\\()\&#34;&amp;#039;-:,.;&amp;lt;&amp;gt;~!@#%^&amp;*|+=[]{}`~?&#34;
}&lt;/pre&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;h3 id=&#34;important-shortcut-keys:aa1d181a86cd4b3bc45fc04c4629024d&#34;&gt;Important Shortcut Keys&lt;/h3&gt;

&lt;p&gt;Lastly, I want to include a short list of some short cut keys you will likely enjoy:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Alt+[1-9]&lt;/strong&gt; &amp;#8211; Switch to a certain tab&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Command+P&lt;/strong&gt; &amp;#8211; Fast file switching, Line Number, Jump to definition (within file)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Alt+.&lt;/strong&gt; &amp;#8211; Close a started HTML tag (although I suggest Zen Coding Plugin)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Esc&lt;/strong&gt; &amp;#8211; Enter Vintage Mode (if enabled)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Command+D&lt;/strong&gt; &amp;#8211; Multi-select same word. This is VERY COOL.&lt;/p&gt;

&lt;p&gt;Here are some other good &lt;a href=&#34;http://www.sublimetext.com/forum/viewtopic.php?f=2&amp;#038;t=4198&#34; title=&#34;Sublime Text 2 Shortcut Keys&#34; target=&#34;_blank&#34;&gt;shortcut&lt;/a&gt; &lt;a href=&#34;http://www.sublimetext.com/docs/selection&#34; title=&#34;Sublime Text 2 Shortcut Keys&#34; target=&#34;_blank&#34;&gt;keys&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hope you enjoy Sublime Text as much as I have!&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[2]: &lt;a href=&#34;https://github.com/Kronuz/SublimeLinter&#34;&gt;https://github.com/Kronuz/SublimeLinter&lt;/a&gt; &amp;ldquo;&amp;rdquo;&lt;/p&gt;

&lt;p&gt;[5]: &lt;a href=&#34;https://github.com/purplefish32/sublime-text-2-wordpress&#34;&gt;https://github.com/purplefish32/sublime-text-2-wordpress&lt;/a&gt; &amp;ldquo;&amp;rdquo;
 [6]: &lt;a href=&#34;https://github.com/kemayo/sublime-text-2-git&#34;&gt;https://github.com/kemayo/sublime-text-2-git&lt;/a&gt; &amp;ldquo;&amp;rdquo;
 [7]: &lt;a href=&#34;https://github.com/SublimeText/SideBarGit&#34;&gt;https://github.com/SublimeText/SideBarGit&lt;/a&gt; &amp;ldquo;&amp;rdquo;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Custom User Providers in Symfony2</title>
      <link>http://clintberry.github.io/2011/custom-user-providers-symfony2/</link>
      <pubDate>Wed, 21 Dec 2011 00:00:00 +0000</pubDate>
      
      <guid>http://clintberry.github.io/2011/custom-user-providers-symfony2/</guid>
      <description>

&lt;h4 id=&#34;why-custom-user-providers:0062a4ae26007760914834b2b096356a&#34;&gt;Why Custom User Providers?&lt;/h4&gt;

&lt;p&gt;At my current job all the database systems are managed by DB admins and the developers have to connect to the database via web services. We do not connect to the databases directly. This allows for better &lt;a title=&#34;Separation of Concerns&#34; href=&#34;http://en.wikipedia.org/wiki/Separation_of_concerns&#34; target=&#34;_blank&#34;&gt;separation of concerns&lt;/a&gt; and allows experts to focus on their respective specialties. But if you are programming a Symfony2 app, that means you don&amp;#8217;t get to use Doctrine or any other ORM, which in turn means you create your own models/entities.&lt;/p&gt;

&lt;p&gt;When you want to develop the authentication parts of your new app you will quickly find that there is plenty of documentation for Doctrine/ORM based apps, but if you are using your own custom models then you run into pages &lt;del datetime=&#34;2012-01-20T21:30:13+00:00&#34;&gt;&lt;a href=&#34;http://symfony.com/doc/current/cookbook/security/custom_provider.html&#34; target=&#34;_blank&#34;&gt;like this one&lt;/a&gt;&lt;/del&gt;.  &lt;del datetime=&#34;2012-01-20T21:30:13+00:00&#34;&gt;(when I finish this post I will submit an article to the docs and see if they approve it)&lt;/del&gt; &lt;strong&gt;UPDATE: Someone beat me to it, there is now a good tutorial in the Symfony docs for custom user providers.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So, after a few hours of googling-reading-tinkering I figured out how to use the Symfony authentication system  with my own custom models. Keep in mind I am still new to Symfony2, so many of these concepts will be beginner level.&lt;/p&gt;

&lt;h4 id=&#34;your-user-entity:0062a4ae26007760914834b2b096356a&#34;&gt;Your User Entity&lt;/h4&gt;

&lt;p&gt;For this example, I am assuming you are using custom entities for your project. I have created a custom User entity to manage users in my application. It extends a base class that handles most of the getting, setting and the calls to my database REST service, but that is optional depending on how you setup your own entities.&lt;/p&gt;

&lt;pre class=&#34;wp-code-highlight prettyprint&#34;&gt;namespace CB\WebsiteBundle\Entity;

use Clint\Model\Base;
use Symfony\Component\Security\Core\User\UserInterface;

class User extends Base
implements UserInterface
{

    public static $modelName = &amp;#039;User&amp;#039;;
    public static $modelUrl = &amp;#039;/user&amp;#039;;

    /**
     * Returns the roles granted to the user.
     *
     * @return Role[] The user roles
     */
    public function getRoles(){
        return array(&amp;#039;ROLE_USER&amp;#039;);
    }

    /**
     * Returns the password used to authenticate the user.
     *
     * @return string The password
     */
    public function getPassword(){
        return $this-&amp;gt;password;
    }

    /**
     * Returns the salt.
     *
     * @return string The salt
     */
    public function getSalt(){
        return null;
    }

    /**
     * Returns the username used to authenticate the user.
     *
     * @return string The username
     */
    public function getUsername(){
        return $this-&amp;gt;username;
    }

    /**
     * Removes sensitive data from the user.
     *
     * @return void
     */
    public function eraseCredentials(){
        $this-&amp;gt;password = null;
    }

    /**
     * The equality comparison should neither be done by referential equality
     * nor by comparing identities (i.e. getId() === getId()).
     *
     * However, you do not need to compare every attribute, but only those that
     * are relevant for assessing whether re-authentication is required.
     *
     * @param UserInterface $user
     * @return Boolean
     */
    public function equals(UserInterface $user){
        return ($this-&amp;gt;getUsername() === $user-&amp;gt;getUsername());
    }
}&lt;/pre&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;The key to making your User entity compatible with Symfony2 authentication, is to implement the User Interface as you can see in above class. These are the functions required by that interface:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;getRoles() &amp;#8211; for now I am simply returning a hard-coded role, but you could implement to get from the user object&lt;/li&gt;
&lt;li&gt;getPassword() &amp;#8211; Retrieve the password from the user object&lt;/li&gt;
&lt;li&gt;getSalt() returns the &lt;a title=&#34;Salt&#34; href=&#34;http://en.wikipedia.org/wiki/Salt_(cryptography)&#34; target=&#34;_blank&#34;&gt;salt for your password encryption&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;getUsername()&lt;/li&gt;
&lt;li&gt;eraseCredentials() which is used to erase sensitive data from the session object&lt;/li&gt;
&lt;li&gt;equals(UserInterface $user) which is used to make sure the right user is authenticated&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You will need to define all of these functions to correctly load your users from your web-service (or however you are doing it). Once you have all the required function defined, you are ready to move on to the User Provider Service.&lt;/p&gt;

&lt;h4 id=&#34;the-user-provider:0062a4ae26007760914834b2b096356a&#34;&gt;The User Provider&lt;/h4&gt;

&lt;p&gt;To use your own custom entities in Symfony2 authentication, you will need to have a basic understanding of &lt;a href=&#34;http://symfony.com/doc/current/book/service_container.html&#34; title=&#34;Symfony Services&#34; target=&#34;_blank&#34;&gt;Symfony services&lt;/a&gt; and the &lt;a href=&#34;http://symfony.com/doc/current/book/security.html&#34; title=&#34;Symfony Authentication&#34; target=&#34;_blank&#34;&gt;Symfony authentication&lt;/a&gt; system. Read those links if you haven&amp;#8217;t yet. To reiterate what the user provider is, from the docs:&lt;/p&gt;

&lt;blockquote cite=&#34;http://symfony.com/doc/current/book/security.html#where-do-users-come-from-user-providers&#34;&gt;
  &lt;p&gt;
    In Symfony2, users can come from anywhere &amp;#8211; a configuration file, a database table, a web service, or anything else you can dream up. Anything that provides one or more users to the authentication system is known as a &amp;#8220;user provider&amp;#8221;. Symfony2 comes standard with the two most common user providers: one that loads users from a configuration file and one that loads users from a database table.
  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Again, since we are NOT using doctrine, we will create our own User Provider as a service in Symfony. Based on the documentation, it seems that the best place to put this is in YourBundle/Security folder.&lt;/p&gt;

&lt;pre class=&#34;wp-code-highlight prettyprint&#34;&gt;namespace CB\WebsiteBundle\Security;

use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Component\Security\Core\User\UserProviderInterface;
use Symfony\Component\Security\Core\Exception\UsernameNotFoundException;

use CB\WebsiteBundle\Entity\User;

class Provider implements UserProviderInterface {

    protected $user;
    public function __contsruct (UserInterface $user) {
        $this-&amp;gt;user = $user;
    }

    /**
     * Loads the user for the given username.
     *
     * This method must throw UsernameNotFoundException if the user is not
     * found.
     *
     * @throws UsernameNotFoundException if the user is not found
     * @param string $username The username
     *
     * @return UserInterface
     */
    function loadUserByUsername($username) {
        $user = User::find(array(&amp;#039;username&amp;#039;=&amp;gt;$username));
        if(empty($user)){
            throw new UsernameNotFoundException(&amp;#039;Could not find user. Sorry!&amp;#039;);
        }
        $this-&amp;gt;user = $user;
        return $user;
    }

    /**
     * Refreshes the user for the account interface.
     *
     * It is up to the implementation if it decides to reload the user data
     * from the database, or if it simply merges the passed User into the
     * identity map of an entity manager.
     *
     * @throws UnsupportedUserException if the account is not supported
     * @param UserInterface $user
     *
     * @return UserInterface
     */
    function refreshUser(UserInterface $user) {
        return $user;
    }

    /**
     * Whether this provider supports the given user class
     *
     * @param string $class
     *
     * @return Boolean
     */
    function supportsClass($class) {
        return $class === &amp;#039;CB\WebsiteBundle\Entity\User&amp;#039;;
    }
}&lt;/pre&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;The important thing to note about this class is that it implements the Symfony User Provider Interface. Note the three functions I implemented from the interface definition:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;loadUserByUsername() &amp;#8211; Make sure to implement this with however your custom user entity loads users by username&lt;/li&gt;
&lt;li&gt;refreshUser() &amp;#8211; I don&amp;#8217;t completely understand the purpose of this function yet. I will update when I do.&lt;/li&gt;
&lt;li&gt;supportsClass() &amp;#8211; A check to see if a certain type of user class is supported, in our case we use our custom user class definition&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I also added a constructor that takes a UserInterface object and stores it in a property when initialized. This will be done as a symfony service.&lt;/p&gt;

&lt;h4 id=&#34;configuration:0062a4ae26007760914834b2b096356a&#34;&gt;Configuration&lt;/h4&gt;

&lt;p&gt;The final step is to create the configuration for your newly build User Provider and User Entity. First, we must add our new entity and provider as a symfony service in our bundle&amp;#8217;s service configuration in YourBundle/Resources/config/services.xml :&lt;/p&gt;

&lt;pre class=&#34;wp-code-highlight prettyprint&#34;&gt;&amp;lt;container xmlns=&#34;http://symfony.com/schema/dic/services&#34;
    xmlns:xsi=&#34;http://www.w3.org/2001/XMLSchema-instance&#34;
    xsi:schemaLocation=&#34;http://symfony.com/schema/dic/services http://symfony.com/schema/dic/services/services-1.0.xsd&#34;&amp;gt;

    
    &amp;lt;parameters&amp;gt;
        &amp;lt;parameter key=&#34;cb_security_user.class&#34;&amp;gt;CB\WebsiteBundle\Entity\User&amp;lt;/parameter&amp;gt;
        &amp;lt;parameter key=&#34;cb_security_provider.class&#34;&amp;gt;CB\WebsiteBundle\Security\Provider&amp;lt;/parameter&amp;gt;
    &amp;lt;/parameters&amp;gt;

    &amp;lt;services&amp;gt;
        &amp;lt;service id=&#34;cb_security_user&#34; class=&#34;%cb_security_user.class%&#34; /&amp;gt;
        &amp;lt;service id=&#34;cb_security_provider&#34; class=&#34;%cb_security_provider.class%&#34;&amp;gt;
            &amp;lt;argument type=&#34;service&#34; id=&#34;cb_security_user&#34; /&amp;gt;
        &amp;lt;/service&amp;gt;
    &amp;lt;/services&amp;gt;
    
&amp;lt;/container&amp;gt;

&lt;/pre&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;I define two parameters with the name of my custom user class and my custom provider class. I then add two services, one for the user entity, and the other for the user provider class. One thing to note is that I actually pass the user entity service as an argument to the provider service when initialized.&lt;/p&gt;

&lt;p&gt;And lastly, you need to update your security configuration for your application. Here is my configuration with form-based validation:&lt;/p&gt;

&lt;pre class=&#34;wp-code-highlight prettyprint&#34;&gt;security:
    encoders:
        CB\WebsiteBundle\Entity\User:
            algorithm: sha1
            iterations: 1
            encode_as_base64: false

    role_hierarchy:
        ROLE_ADMIN:       ROLE_USER
        ROLE_SUPER_ADMIN: [ROLE_USER, ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH]

    providers:
        main:
            id: cb_security_provider

    firewalls:
        dev:
            pattern:  ^/(_(profiler|wdt)|css|images|js)/
            security: false

        login:
            pattern:  ^/login$
            security: false

        secured_area:
            pattern:    ^/secure/
            form_login: ~
            logout: ~
            #anonymous: ~
            #http_basic:
            #    realm: &#34;Secured Demo Area&#34;

    access_control:
        - { path: ^/secure, roles: ROLE_USER }
        #- { path: ^/secure, roles: IS_AUTHENTICATED_ANONYMOUSLY, requires_channel: https }
        - { path: ^/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        #- { path: ^/login, roles: IS_AUTHENTICATED_ANONYMOUSLY, requires_channel: https }
        #- { path: ^/_internal, roles: IS_AUTHENTICATED_ANONYMOUSLY, ip: 127.0.0.1 }&lt;/pre&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;Key things to note are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The encoders section is configured to use your custom user entity&lt;/li&gt;
&lt;li&gt;The providers section is configured to use your user provider service (we used the ID from the services xml)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now you just need to make sure your login routes and forms are all setup and you have a newly created User Provider using custom entities!&lt;/p&gt;

&lt;p&gt;Let me know if you have any questions.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Why I Switched to Symfony 2 Framework</title>
      <link>http://clintberry.github.io/2011/switched-symfony-2-framework/</link>
      <pubDate>Thu, 10 Nov 2011 00:00:00 +0000</pubDate>
      
      <guid>http://clintberry.github.io/2011/switched-symfony-2-framework/</guid>
      <description>

&lt;p&gt;I have been working with the Zend Framework for the last 3 years. I like it. It is flexible, heavily object oriented, and organized. However, one thing that has always bothered me is that modules in ZF have been &lt;a title=&#34;Zend Framework Modules&#34; href=&#34;http://weierophinney.net/matthew/archives/234-Module-Bootstraps-in-Zend-Framework-Dos-and-Donts.html&#34; target=&#34;_blank&#34;&gt;second-class citizens&lt;/a&gt;. Granted, in Zend Framework 2 this is not the case, but I needed to start a project right away, and since ZF2 is still in beta, I decided to go checkout some other frameworks again.&lt;/p&gt;

&lt;p&gt;It has been a while since I looked at different PHP frameworks and I was plesently surprised by the maturity of many of them. Ultimately, though, I was most impressed with &lt;a href=&#34;http://symfony.com/&#34; target=&#34;_blank&#34;&gt;Symfony 2&lt;/a&gt; (SF2). Here are some reasons why:&lt;/p&gt;

&lt;h2 id=&#34;1-modules-bundles:8734792f84911970211704f8ad232296&#34;&gt;1. Modules (Bundles)&lt;/h2&gt;

&lt;p&gt;I am a sucker for modules. For some reason I like the idea of being able to create a small library of code, with all the corresponding models/views/controllers, and then being able to drop it any application and have it work (some say I should switch to Python, which inherently works this way). It would mean all sorts of portability for my code. Symfony2 has this ability in the form of &lt;a href=&#34;http://symfony.com/doc/current/book/page_creation.html#the-bundle-system&#34; target=&#34;_blank&#34;&gt;Bundles&lt;/a&gt;. I started using them this week, and I fell in love. Did I mention there is already a &lt;a href=&#34;http://symfony2bundles.org/&#34; target=&#34;_blank&#34;&gt;big library of bundles&lt;/a&gt; that you can drop in your application? This is the future of PHP development.&lt;/p&gt;

&lt;h2 id=&#34;2-defining-routing-using-annotations:8734792f84911970211704f8ad232296&#34;&gt;2. Defining Routing Using Annotations&lt;/h2&gt;

&lt;p&gt;Symfony2 allows you to add &lt;a href=&#34;http://symfony.com/doc/2.0/bundles/SensioFrameworkExtraBundle/annotations/routing.html&#34; target=&#34;_blank&#34;&gt;Annotations&lt;/a&gt; (doc blocks) to controller actions that tell the application when to route to this action. You can put any regular expression pattern to match the URL. For some reason this seems so much more elegant than creating a separate routing file.&lt;/p&gt;

&lt;h2 id=&#34;3-community:8734792f84911970211704f8ad232296&#34;&gt;3. Community&lt;/h2&gt;

&lt;p&gt;Some of my &lt;a title=&#34;SPF13&#34; href=&#34;http://spf13.com/post/symfony2&#34; target=&#34;_blank&#34;&gt;favorite developers&lt;/a&gt; are big contributors to the symfony project. Also, it is the number 1 watched PHP project on &lt;a href=&#34;http://github.com/languages/PHP/most_watched&#34; target=&#34;_blank&#34;&gt;GitHub&lt;/a&gt;. That is saying something.&lt;/p&gt;

&lt;h2 id=&#34;4-documentation-038-learning-curve:8734792f84911970211704f8ad232296&#34;&gt;4. Documentation &amp;#038; Learning Curve&lt;/h2&gt;

&lt;p&gt;Zend Framework has a pretty steep learning curve and the documentation does not support beginners very well (although I know they want to &lt;a href=&#34;http://framework.zend.com/wiki/display/ZFDEV2/Zend+Framework+2.0+Requirements#ZendFramework2.0Requirements-Easethelearningcurve&#34;&gt;remedy this&lt;/a&gt; for ZF2).Symfony, however, has a great getting started guide and a great online book to help you get going. It has been so easy to get started that it was hard not to smile.&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;It has only been a week, but I am loving Symfony2. I keep running into new things that make me love SF2 more and more. I&amp;#8217;m sure the honeymoon won&amp;#8217;t last forever, though, so I&amp;#8217;ll of course be posting more on this as I run into issues, find out the negatives, and have more comments in general. Let me know if you like Symfony or prefer something else.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update: I found another great link that is helpful if you are looking to use Symfony2 for your next project&lt;/strong&gt; &amp;#8211; **&lt;a href=&#34;http://engineering.opensky.com/post/how-opensky-chose-symfony2-as-our-web-framework&#34; title=&#34;Sensio chooses symfony2&#34;&gt;How OpenSky chose Symfony as their framework&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;**&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Speed Up Your WordPress Development Cycle With Git</title>
      <link>http://clintberry.github.io/2011/speed-up-your-wordpress-development-cycle-with-git/</link>
      <pubDate>Sat, 30 Jul 2011 00:00:00 +0000</pubDate>
      
      <guid>http://clintberry.github.io/2011/speed-up-your-wordpress-development-cycle-with-git/</guid>
      <description>

&lt;p&gt;If you have developed WordPress sites for clients this process might sound familiar to you:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Get a new client that wants a wordpress site&lt;/li&gt;
&lt;li&gt;Download the most recent wordpress&lt;/li&gt;
&lt;li&gt;Find a good current blank wordpress theme to start implementing the design&lt;/li&gt;
&lt;li&gt;Upload to a staging server to for client to see&lt;/li&gt;
&lt;li&gt;Client requests changes&lt;/li&gt;
&lt;li&gt;You make changes on local server, then upload to staging server&lt;/li&gt;
&lt;li&gt;Repeat last three steps until finished and then you deploy the site to live&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After lots of trial and error, I have come up with a process that is more efficient, and allows rapid development of wordpress sites. I use Git, Git Submodules, and WordPress child themes to get going quicker and keep code up to date with minimal effort. (If your not using a &lt;a href=&#34;http://en.wikipedia.org/wiki/Revision_control&#34; target=&#34;_blank&#34;&gt;revision control &lt;/a&gt;system like &lt;a href=&#34;http://git-scm.com/&#34; target=&#34;_blank&#34;&gt;Git&lt;/a&gt; or &lt;a href=&#34;http://subversion.tigris.org/&#34; target=&#34;_blank&#34;&gt;SVN&lt;/a&gt; for development, then check out &lt;del datetime=&#34;2012-04-22T20:33:39+00:00&#34;&gt;&lt;a href=&#34;http://stackoverflow.com/questions/132520/good-excuses-not-to-use-version-control&#34; target=&#34;_blank&#34;&gt;this funny question and answer session on Stack Overflow&lt;/a&gt;&lt;/del&gt; &lt;strong&gt;Update:&lt;/strong&gt; Stack Overflow moderators removed the question&amp;#8230; bummer. Check out the funny-ness in the &lt;a href=&#34;http://web.archive.org/web/20100722082534/http://stackoverflow.com/questions/132520/good-excuses-not-to-use-version-control&#34; title=&#34;Why to use version control&#34; target=&#34;_blank&#34;&gt;wayback machine internet archiver&lt;/a&gt; instead)&lt;/p&gt;

&lt;p&gt;For this rapid WordPress development cycle, you will need to have Git installed.&lt;/p&gt;

&lt;h2 id=&#34;1-get-the-most-current-wordpress:ec46d592ccce457d292aec0b82cf84d7&#34;&gt;1. Get the Most Current WordPress&lt;/h2&gt;

&lt;p&gt;The wordpress core dev team uses SVN to manage wordpress development. But I want to use Git for speed and easy branching. Fortunately there is a &lt;a href=&#34;https://github.com/WordPress/WordPress&#34; target=&#34;_blank&#34;&gt;great WordPress git clone&lt;/a&gt; that is updated every fifteen minutes. To get the most recent version of WordPress, simply clone that repo to your project directory.&lt;/p&gt;

&lt;pre class=&#34;wp-code-highlight prettyprint&#34;&gt;mkdir projectA
git clone https://github.com/markjaquith/WordPress.git ./projectA
cd projectA
git checkout origin/3.2-branch&lt;/pre&gt;

&lt;p&gt;Now you have the most recent version of wordpress, and it will be easier than ever to upgrade wordpress and revert if something goes wrong. But we will get into the upgrade process later.&lt;/p&gt;

&lt;h2 id=&#34;2-starting-with-a-quality-blank-theme:ec46d592ccce457d292aec0b82cf84d7&#34;&gt;2. Starting with a Quality Blank Theme&lt;/h2&gt;

&lt;p&gt;To help get your new WordPress project off the ground, let&amp;#8217;s get a quality blank theme that updates regularly. I usually use the &lt;a title=&#34;Roots WordPress Theme&#34; href=&#34;http://www.rootstheme.com/&#34; target=&#34;_blank&#34;&gt;Roots theme&lt;/a&gt;, which is a quality HTML5 wordpress theme that updates regularly. To make sure our theme stays up to date with the latest wordpress updates, we will add the Roots theme as a Git Submodule. This allows us to essentially add a git repository inside of another repository. Why do this? Because we can update our theme code to the latest release with a simple Git command, instead of downloading and merging on our own. To add the sub-module, change to your project directory and add the sub-module to the themes folder then initialize it:&lt;/p&gt;

&lt;pre class=&#34;wp-code-highlight prettyprint&#34;&gt;cd projectA
git submodule add https://github.com/retlehs/roots.git ./wp-content/themes/roots
git submodule init
git submodule update&lt;/pre&gt;

&lt;p&gt;&lt;i class=&#34;icon-warning-sign&#34;&gt;&lt;/i&gt;&lt;strong&gt;Update:&lt;/strong&gt; I have now forked mark&amp;#8217;s wordpress git and added roots as a submodule. You can simply clone or fork my repo to save a step. Get it here: &lt;a title=&#34;Clint Berry&#39;s Github Account&#34; href=&#34;https://github.com/clintberry/WordPress&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://github.com/clintberry/WordPress&#34;&gt;https://github.com/clintberry/WordPress&lt;/a&gt;&lt;/a&gt; Make sure to clone recursive to get the roots theme. This repo updates nightly to the latest wordpress and roots release.&lt;/p&gt;

&lt;p&gt;Now you have a quality blank theme installed into your git repo as a sub-module.&lt;/p&gt;

&lt;h2 id=&#34;3-adding-your-custom-design-wordpress-child-theme:ec46d592ccce457d292aec0b82cf84d7&#34;&gt;3. Adding Your Custom Design (WordPress Child Theme)&lt;/h2&gt;

&lt;p&gt;Since we have added the new blank theme as a git submodule, we don&amp;#8217;t want to edit that theme directly. This could cause problems when/if we want to update our code base for the theme. To better avoid update problems, we can use the often-under-utilized-wordpress feature called child themes. Child themes allow you essentially &amp;#8220;inherit&amp;#8221; all the functionality of a &amp;#8220;base&amp;#8221; theme. In this case, we will create a child theme &amp;#8220;MyTheme&amp;#8221; that will have access to all the functionality of our base theme &amp;#8220;Roots&amp;#8221;.&lt;/p&gt;

&lt;p&gt;Creating child themes in wordpress is simple:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Add a new folder to your wordpress themes directory called &amp;#8220;MyTheme&amp;#8221;&lt;/li&gt;
&lt;li&gt;Create a file called &amp;#8220;style.css&amp;#8221; with the following text: &lt;pre class=&#34;wp-code-highlight prettyprint&#34;&gt;/*
Theme Name:     MyProject
Theme URI:      &lt;a href=&#34;http://clintberry.com/&#34;&gt;http://clintberry.com/&lt;/a&gt;
Description:    Roots Child Theme
Author:         Clint Berry
Author URI:     &lt;a href=&#34;http://clintberry.com&#34;&gt;http://clintberry.com&lt;/a&gt;
Template:       roots
Version:        0.1.0
*/&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;@import url(&amp;ldquo;../twentyten/style.css&amp;rdquo;);
&lt;/pre&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Take notice of the &amp;amp;#8220;Template: roots&amp;amp;#8221; field. That is what lets WordPress know that this is a child theme and to inherit all of the roots functionality. Also since this style.css file overwrites the roots css file, we import the css file from roots. &amp;lt;/li&amp;gt; 

  * Create a functions.php file to add any custom WordPress functions. WordPress will load your new functions.php file along with the Roots functions.php file, so all is well.
  * Copy any template file you want to change from the Roots theme to your new child theme directory. Any template file found in your new directory will overwrite the template in Roots.&amp;lt;/ol&amp;gt; 

Now you can start your theme development with an HTML5 bang! Child themes make it much easier to get started and even keep your file structure a big cleaner. 

## Update WordPress Like A Pro

Yes, you could update WordPress in the admin panel, but you want to do it in a much cooler, easier-to-revert way. With Git, now you can. First, backup your database. Then in the root wordpress directory, update your Git repo by using git fetch:

`If you have developed WordPress sites for clients this process might sound familiar to you:
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Get a new client that wants a wordpress site&lt;/li&gt;
&lt;li&gt;Download the most recent wordpress&lt;/li&gt;
&lt;li&gt;Find a good current blank wordpress theme to start implementing the design&lt;/li&gt;
&lt;li&gt;Upload to a staging server to for client to see&lt;/li&gt;
&lt;li&gt;Client requests changes&lt;/li&gt;
&lt;li&gt;You make changes on local server, then upload to staging server&lt;/li&gt;
&lt;li&gt;Repeat last three steps until finished and then you deploy the site to live&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After lots of trial and error, I have come up with a process that is more efficient, and allows rapid development of wordpress sites. I use Git, Git Submodules, and WordPress child themes to get going quicker and keep code up to date with minimal effort. (If your not using a &lt;a href=&#34;http://en.wikipedia.org/wiki/Revision_control&#34; target=&#34;_blank&#34;&gt;revision control &lt;/a&gt;system like &lt;a href=&#34;http://git-scm.com/&#34; target=&#34;_blank&#34;&gt;Git&lt;/a&gt; or &lt;a href=&#34;http://subversion.tigris.org/&#34; target=&#34;_blank&#34;&gt;SVN&lt;/a&gt; for development, then check out &lt;del datetime=&#34;2012-04-22T20:33:39+00:00&#34;&gt;&lt;a href=&#34;http://stackoverflow.com/questions/132520/good-excuses-not-to-use-version-control&#34; target=&#34;_blank&#34;&gt;this funny question and answer session on Stack Overflow&lt;/a&gt;&lt;/del&gt; &lt;strong&gt;Update:&lt;/strong&gt; Stack Overflow moderators removed the question&amp;#8230; bummer. Check out the funny-ness in the &lt;a href=&#34;http://web.archive.org/web/20100722082534/http://stackoverflow.com/questions/132520/good-excuses-not-to-use-version-control&#34; title=&#34;Why to use version control&#34; target=&#34;_blank&#34;&gt;wayback machine internet archiver&lt;/a&gt; instead)&lt;/p&gt;

&lt;p&gt;For this rapid WordPress development cycle, you will need to have Git installed.&lt;/p&gt;

&lt;h2 id=&#34;1-get-the-most-current-wordpress-1:ec46d592ccce457d292aec0b82cf84d7&#34;&gt;1. Get the Most Current WordPress&lt;/h2&gt;

&lt;p&gt;The wordpress core dev team uses SVN to manage wordpress development. But I want to use Git for speed and easy branching. Fortunately there is a &lt;a href=&#34;https://github.com/WordPress/WordPress&#34; target=&#34;_blank&#34;&gt;great WordPress git clone&lt;/a&gt; that is updated every fifteen minutes. To get the most recent version of WordPress, simply clone that repo to your project directory.&lt;/p&gt;

&lt;pre class=&#34;wp-code-highlight prettyprint&#34;&gt;mkdir projectA
git clone https://github.com/markjaquith/WordPress.git ./projectA
cd projectA
git checkout origin/3.2-branch&lt;/pre&gt;

&lt;p&gt;Now you have the most recent version of wordpress, and it will be easier than ever to upgrade wordpress and revert if something goes wrong. But we will get into the upgrade process later.&lt;/p&gt;

&lt;h2 id=&#34;2-starting-with-a-quality-blank-theme-1:ec46d592ccce457d292aec0b82cf84d7&#34;&gt;2. Starting with a Quality Blank Theme&lt;/h2&gt;

&lt;p&gt;To help get your new WordPress project off the ground, let&amp;#8217;s get a quality blank theme that updates regularly. I usually use the &lt;a title=&#34;Roots WordPress Theme&#34; href=&#34;http://www.rootstheme.com/&#34; target=&#34;_blank&#34;&gt;Roots theme&lt;/a&gt;, which is a quality HTML5 wordpress theme that updates regularly. To make sure our theme stays up to date with the latest wordpress updates, we will add the Roots theme as a Git Submodule. This allows us to essentially add a git repository inside of another repository. Why do this? Because we can update our theme code to the latest release with a simple Git command, instead of downloading and merging on our own. To add the sub-module, change to your project directory and add the sub-module to the themes folder then initialize it:&lt;/p&gt;

&lt;pre class=&#34;wp-code-highlight prettyprint&#34;&gt;cd projectA
git submodule add https://github.com/retlehs/roots.git ./wp-content/themes/roots
git submodule init
git submodule update&lt;/pre&gt;

&lt;p&gt;&lt;i class=&#34;icon-warning-sign&#34;&gt;&lt;/i&gt;&lt;strong&gt;Update:&lt;/strong&gt; I have now forked mark&amp;#8217;s wordpress git and added roots as a submodule. You can simply clone or fork my repo to save a step. Get it here: &lt;a title=&#34;Clint Berry&#39;s Github Account&#34; href=&#34;https://github.com/clintberry/WordPress&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://github.com/clintberry/WordPress&#34;&gt;https://github.com/clintberry/WordPress&lt;/a&gt;&lt;/a&gt; Make sure to clone recursive to get the roots theme. This repo updates nightly to the latest wordpress and roots release.&lt;/p&gt;

&lt;p&gt;Now you have a quality blank theme installed into your git repo as a sub-module.&lt;/p&gt;

&lt;h2 id=&#34;3-adding-your-custom-design-wordpress-child-theme-1:ec46d592ccce457d292aec0b82cf84d7&#34;&gt;3. Adding Your Custom Design (WordPress Child Theme)&lt;/h2&gt;

&lt;p&gt;Since we have added the new blank theme as a git submodule, we don&amp;#8217;t want to edit that theme directly. This could cause problems when/if we want to update our code base for the theme. To better avoid update problems, we can use the often-under-utilized-wordpress feature called child themes. Child themes allow you essentially &amp;#8220;inherit&amp;#8221; all the functionality of a &amp;#8220;base&amp;#8221; theme. In this case, we will create a child theme &amp;#8220;MyTheme&amp;#8221; that will have access to all the functionality of our base theme &amp;#8220;Roots&amp;#8221;.&lt;/p&gt;

&lt;p&gt;Creating child themes in wordpress is simple:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Add a new folder to your wordpress themes directory called &amp;#8220;MyTheme&amp;#8221;&lt;/li&gt;
&lt;li&gt;Create a file called &amp;#8220;style.css&amp;#8221; with the following text: &lt;pre class=&#34;wp-code-highlight prettyprint&#34;&gt;/*
Theme Name:     MyProject
Theme URI:      &lt;a href=&#34;http://clintberry.com/&#34;&gt;http://clintberry.com/&lt;/a&gt;
Description:    Roots Child Theme
Author:         Clint Berry
Author URI:     &lt;a href=&#34;http://clintberry.com&#34;&gt;http://clintberry.com&lt;/a&gt;
Template:       roots
Version:        0.1.0
*/&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;@import url(&amp;ldquo;../twentyten/style.css&amp;rdquo;);
&lt;/pre&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Take notice of the &amp;amp;#8220;Template: roots&amp;amp;#8221; field. That is what lets WordPress know that this is a child theme and to inherit all of the roots functionality. Also since this style.css file overwrites the roots css file, we import the css file from roots. &amp;lt;/li&amp;gt; 

  * Create a functions.php file to add any custom WordPress functions. WordPress will load your new functions.php file along with the Roots functions.php file, so all is well.
  * Copy any template file you want to change from the Roots theme to your new child theme directory. Any template file found in your new directory will overwrite the template in Roots.&amp;lt;/ol&amp;gt; 

Now you can start your theme development with an HTML5 bang! Child themes make it much easier to get started and even keep your file structure a big cleaner. 

## Update WordPress Like A Pro

Yes, you could update WordPress in the admin panel, but you want to do it in a much cooler, easier-to-revert way. With Git, now you can. First, backup your database. Then in the root wordpress directory, update your Git repo by using git fetch:
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;`&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Now merge in any updates from your current branch, or merge in a new branch altogether. This command merges the latest update from the 3.2 branch into your WordPress install:

``If you have developed WordPress sites for clients this process might sound familiar to you:
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Get a new client that wants a wordpress site&lt;/li&gt;
&lt;li&gt;Download the most recent wordpress&lt;/li&gt;
&lt;li&gt;Find a good current blank wordpress theme to start implementing the design&lt;/li&gt;
&lt;li&gt;Upload to a staging server to for client to see&lt;/li&gt;
&lt;li&gt;Client requests changes&lt;/li&gt;
&lt;li&gt;You make changes on local server, then upload to staging server&lt;/li&gt;
&lt;li&gt;Repeat last three steps until finished and then you deploy the site to live&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After lots of trial and error, I have come up with a process that is more efficient, and allows rapid development of wordpress sites. I use Git, Git Submodules, and WordPress child themes to get going quicker and keep code up to date with minimal effort. (If your not using a &lt;a href=&#34;http://en.wikipedia.org/wiki/Revision_control&#34; target=&#34;_blank&#34;&gt;revision control &lt;/a&gt;system like &lt;a href=&#34;http://git-scm.com/&#34; target=&#34;_blank&#34;&gt;Git&lt;/a&gt; or &lt;a href=&#34;http://subversion.tigris.org/&#34; target=&#34;_blank&#34;&gt;SVN&lt;/a&gt; for development, then check out &lt;del datetime=&#34;2012-04-22T20:33:39+00:00&#34;&gt;&lt;a href=&#34;http://stackoverflow.com/questions/132520/good-excuses-not-to-use-version-control&#34; target=&#34;_blank&#34;&gt;this funny question and answer session on Stack Overflow&lt;/a&gt;&lt;/del&gt; &lt;strong&gt;Update:&lt;/strong&gt; Stack Overflow moderators removed the question&amp;#8230; bummer. Check out the funny-ness in the &lt;a href=&#34;http://web.archive.org/web/20100722082534/http://stackoverflow.com/questions/132520/good-excuses-not-to-use-version-control&#34; title=&#34;Why to use version control&#34; target=&#34;_blank&#34;&gt;wayback machine internet archiver&lt;/a&gt; instead)&lt;/p&gt;

&lt;p&gt;For this rapid WordPress development cycle, you will need to have Git installed.&lt;/p&gt;

&lt;h2 id=&#34;1-get-the-most-current-wordpress-2:ec46d592ccce457d292aec0b82cf84d7&#34;&gt;1. Get the Most Current WordPress&lt;/h2&gt;

&lt;p&gt;The wordpress core dev team uses SVN to manage wordpress development. But I want to use Git for speed and easy branching. Fortunately there is a &lt;a href=&#34;https://github.com/WordPress/WordPress&#34; target=&#34;_blank&#34;&gt;great WordPress git clone&lt;/a&gt; that is updated every fifteen minutes. To get the most recent version of WordPress, simply clone that repo to your project directory.&lt;/p&gt;

&lt;pre class=&#34;wp-code-highlight prettyprint&#34;&gt;mkdir projectA
git clone https://github.com/markjaquith/WordPress.git ./projectA
cd projectA
git checkout origin/3.2-branch&lt;/pre&gt;

&lt;p&gt;Now you have the most recent version of wordpress, and it will be easier than ever to upgrade wordpress and revert if something goes wrong. But we will get into the upgrade process later.&lt;/p&gt;

&lt;h2 id=&#34;2-starting-with-a-quality-blank-theme-2:ec46d592ccce457d292aec0b82cf84d7&#34;&gt;2. Starting with a Quality Blank Theme&lt;/h2&gt;

&lt;p&gt;To help get your new WordPress project off the ground, let&amp;#8217;s get a quality blank theme that updates regularly. I usually use the &lt;a title=&#34;Roots WordPress Theme&#34; href=&#34;http://www.rootstheme.com/&#34; target=&#34;_blank&#34;&gt;Roots theme&lt;/a&gt;, which is a quality HTML5 wordpress theme that updates regularly. To make sure our theme stays up to date with the latest wordpress updates, we will add the Roots theme as a Git Submodule. This allows us to essentially add a git repository inside of another repository. Why do this? Because we can update our theme code to the latest release with a simple Git command, instead of downloading and merging on our own. To add the sub-module, change to your project directory and add the sub-module to the themes folder then initialize it:&lt;/p&gt;

&lt;pre class=&#34;wp-code-highlight prettyprint&#34;&gt;cd projectA
git submodule add https://github.com/retlehs/roots.git ./wp-content/themes/roots
git submodule init
git submodule update&lt;/pre&gt;

&lt;p&gt;&lt;i class=&#34;icon-warning-sign&#34;&gt;&lt;/i&gt;&lt;strong&gt;Update:&lt;/strong&gt; I have now forked mark&amp;#8217;s wordpress git and added roots as a submodule. You can simply clone or fork my repo to save a step. Get it here: &lt;a title=&#34;Clint Berry&#39;s Github Account&#34; href=&#34;https://github.com/clintberry/WordPress&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://github.com/clintberry/WordPress&#34;&gt;https://github.com/clintberry/WordPress&lt;/a&gt;&lt;/a&gt; Make sure to clone recursive to get the roots theme. This repo updates nightly to the latest wordpress and roots release.&lt;/p&gt;

&lt;p&gt;Now you have a quality blank theme installed into your git repo as a sub-module.&lt;/p&gt;

&lt;h2 id=&#34;3-adding-your-custom-design-wordpress-child-theme-2:ec46d592ccce457d292aec0b82cf84d7&#34;&gt;3. Adding Your Custom Design (WordPress Child Theme)&lt;/h2&gt;

&lt;p&gt;Since we have added the new blank theme as a git submodule, we don&amp;#8217;t want to edit that theme directly. This could cause problems when/if we want to update our code base for the theme. To better avoid update problems, we can use the often-under-utilized-wordpress feature called child themes. Child themes allow you essentially &amp;#8220;inherit&amp;#8221; all the functionality of a &amp;#8220;base&amp;#8221; theme. In this case, we will create a child theme &amp;#8220;MyTheme&amp;#8221; that will have access to all the functionality of our base theme &amp;#8220;Roots&amp;#8221;.&lt;/p&gt;

&lt;p&gt;Creating child themes in wordpress is simple:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Add a new folder to your wordpress themes directory called &amp;#8220;MyTheme&amp;#8221;&lt;/li&gt;
&lt;li&gt;Create a file called &amp;#8220;style.css&amp;#8221; with the following text: &lt;pre class=&#34;wp-code-highlight prettyprint&#34;&gt;/*
Theme Name:     MyProject
Theme URI:      &lt;a href=&#34;http://clintberry.com/&#34;&gt;http://clintberry.com/&lt;/a&gt;
Description:    Roots Child Theme
Author:         Clint Berry
Author URI:     &lt;a href=&#34;http://clintberry.com&#34;&gt;http://clintberry.com&lt;/a&gt;
Template:       roots
Version:        0.1.0
*/&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;@import url(&amp;ldquo;../twentyten/style.css&amp;rdquo;);
&lt;/pre&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Take notice of the &amp;amp;#8220;Template: roots&amp;amp;#8221; field. That is what lets WordPress know that this is a child theme and to inherit all of the roots functionality. Also since this style.css file overwrites the roots css file, we import the css file from roots. &amp;lt;/li&amp;gt; 

  * Create a functions.php file to add any custom WordPress functions. WordPress will load your new functions.php file along with the Roots functions.php file, so all is well.
  * Copy any template file you want to change from the Roots theme to your new child theme directory. Any template file found in your new directory will overwrite the template in Roots.&amp;lt;/ol&amp;gt; 

Now you can start your theme development with an HTML5 bang! Child themes make it much easier to get started and even keep your file structure a big cleaner. 

## Update WordPress Like A Pro

Yes, you could update WordPress in the admin panel, but you want to do it in a much cooler, easier-to-revert way. With Git, now you can. First, backup your database. Then in the root wordpress directory, update your Git repo by using git fetch:

`If you have developed WordPress sites for clients this process might sound familiar to you:
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Get a new client that wants a wordpress site&lt;/li&gt;
&lt;li&gt;Download the most recent wordpress&lt;/li&gt;
&lt;li&gt;Find a good current blank wordpress theme to start implementing the design&lt;/li&gt;
&lt;li&gt;Upload to a staging server to for client to see&lt;/li&gt;
&lt;li&gt;Client requests changes&lt;/li&gt;
&lt;li&gt;You make changes on local server, then upload to staging server&lt;/li&gt;
&lt;li&gt;Repeat last three steps until finished and then you deploy the site to live&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After lots of trial and error, I have come up with a process that is more efficient, and allows rapid development of wordpress sites. I use Git, Git Submodules, and WordPress child themes to get going quicker and keep code up to date with minimal effort. (If your not using a &lt;a href=&#34;http://en.wikipedia.org/wiki/Revision_control&#34; target=&#34;_blank&#34;&gt;revision control &lt;/a&gt;system like &lt;a href=&#34;http://git-scm.com/&#34; target=&#34;_blank&#34;&gt;Git&lt;/a&gt; or &lt;a href=&#34;http://subversion.tigris.org/&#34; target=&#34;_blank&#34;&gt;SVN&lt;/a&gt; for development, then check out &lt;del datetime=&#34;2012-04-22T20:33:39+00:00&#34;&gt;&lt;a href=&#34;http://stackoverflow.com/questions/132520/good-excuses-not-to-use-version-control&#34; target=&#34;_blank&#34;&gt;this funny question and answer session on Stack Overflow&lt;/a&gt;&lt;/del&gt; &lt;strong&gt;Update:&lt;/strong&gt; Stack Overflow moderators removed the question&amp;#8230; bummer. Check out the funny-ness in the &lt;a href=&#34;http://web.archive.org/web/20100722082534/http://stackoverflow.com/questions/132520/good-excuses-not-to-use-version-control&#34; title=&#34;Why to use version control&#34; target=&#34;_blank&#34;&gt;wayback machine internet archiver&lt;/a&gt; instead)&lt;/p&gt;

&lt;p&gt;For this rapid WordPress development cycle, you will need to have Git installed.&lt;/p&gt;

&lt;h2 id=&#34;1-get-the-most-current-wordpress-3:ec46d592ccce457d292aec0b82cf84d7&#34;&gt;1. Get the Most Current WordPress&lt;/h2&gt;

&lt;p&gt;The wordpress core dev team uses SVN to manage wordpress development. But I want to use Git for speed and easy branching. Fortunately there is a &lt;a href=&#34;https://github.com/WordPress/WordPress&#34; target=&#34;_blank&#34;&gt;great WordPress git clone&lt;/a&gt; that is updated every fifteen minutes. To get the most recent version of WordPress, simply clone that repo to your project directory.&lt;/p&gt;

&lt;pre class=&#34;wp-code-highlight prettyprint&#34;&gt;mkdir projectA
git clone https://github.com/markjaquith/WordPress.git ./projectA
cd projectA
git checkout origin/3.2-branch&lt;/pre&gt;

&lt;p&gt;Now you have the most recent version of wordpress, and it will be easier than ever to upgrade wordpress and revert if something goes wrong. But we will get into the upgrade process later.&lt;/p&gt;

&lt;h2 id=&#34;2-starting-with-a-quality-blank-theme-3:ec46d592ccce457d292aec0b82cf84d7&#34;&gt;2. Starting with a Quality Blank Theme&lt;/h2&gt;

&lt;p&gt;To help get your new WordPress project off the ground, let&amp;#8217;s get a quality blank theme that updates regularly. I usually use the &lt;a title=&#34;Roots WordPress Theme&#34; href=&#34;http://www.rootstheme.com/&#34; target=&#34;_blank&#34;&gt;Roots theme&lt;/a&gt;, which is a quality HTML5 wordpress theme that updates regularly. To make sure our theme stays up to date with the latest wordpress updates, we will add the Roots theme as a Git Submodule. This allows us to essentially add a git repository inside of another repository. Why do this? Because we can update our theme code to the latest release with a simple Git command, instead of downloading and merging on our own. To add the sub-module, change to your project directory and add the sub-module to the themes folder then initialize it:&lt;/p&gt;

&lt;pre class=&#34;wp-code-highlight prettyprint&#34;&gt;cd projectA
git submodule add https://github.com/retlehs/roots.git ./wp-content/themes/roots
git submodule init
git submodule update&lt;/pre&gt;

&lt;p&gt;&lt;i class=&#34;icon-warning-sign&#34;&gt;&lt;/i&gt;&lt;strong&gt;Update:&lt;/strong&gt; I have now forked mark&amp;#8217;s wordpress git and added roots as a submodule. You can simply clone or fork my repo to save a step. Get it here: &lt;a title=&#34;Clint Berry&#39;s Github Account&#34; href=&#34;https://github.com/clintberry/WordPress&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://github.com/clintberry/WordPress&#34;&gt;https://github.com/clintberry/WordPress&lt;/a&gt;&lt;/a&gt; Make sure to clone recursive to get the roots theme. This repo updates nightly to the latest wordpress and roots release.&lt;/p&gt;

&lt;p&gt;Now you have a quality blank theme installed into your git repo as a sub-module.&lt;/p&gt;

&lt;h2 id=&#34;3-adding-your-custom-design-wordpress-child-theme-3:ec46d592ccce457d292aec0b82cf84d7&#34;&gt;3. Adding Your Custom Design (WordPress Child Theme)&lt;/h2&gt;

&lt;p&gt;Since we have added the new blank theme as a git submodule, we don&amp;#8217;t want to edit that theme directly. This could cause problems when/if we want to update our code base for the theme. To better avoid update problems, we can use the often-under-utilized-wordpress feature called child themes. Child themes allow you essentially &amp;#8220;inherit&amp;#8221; all the functionality of a &amp;#8220;base&amp;#8221; theme. In this case, we will create a child theme &amp;#8220;MyTheme&amp;#8221; that will have access to all the functionality of our base theme &amp;#8220;Roots&amp;#8221;.&lt;/p&gt;

&lt;p&gt;Creating child themes in wordpress is simple:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Add a new folder to your wordpress themes directory called &amp;#8220;MyTheme&amp;#8221;&lt;/li&gt;
&lt;li&gt;Create a file called &amp;#8220;style.css&amp;#8221; with the following text: &lt;pre class=&#34;wp-code-highlight prettyprint&#34;&gt;/*
Theme Name:     MyProject
Theme URI:      &lt;a href=&#34;http://clintberry.com/&#34;&gt;http://clintberry.com/&lt;/a&gt;
Description:    Roots Child Theme
Author:         Clint Berry
Author URI:     &lt;a href=&#34;http://clintberry.com&#34;&gt;http://clintberry.com&lt;/a&gt;
Template:       roots
Version:        0.1.0
*/&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;@import url(&amp;ldquo;../twentyten/style.css&amp;rdquo;);
&lt;/pre&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Take notice of the &amp;amp;#8220;Template: roots&amp;amp;#8221; field. That is what lets WordPress know that this is a child theme and to inherit all of the roots functionality. Also since this style.css file overwrites the roots css file, we import the css file from roots. &amp;lt;/li&amp;gt; 

  * Create a functions.php file to add any custom WordPress functions. WordPress will load your new functions.php file along with the Roots functions.php file, so all is well.
  * Copy any template file you want to change from the Roots theme to your new child theme directory. Any template file found in your new directory will overwrite the template in Roots.&amp;lt;/ol&amp;gt; 

Now you can start your theme development with an HTML5 bang! Child themes make it much easier to get started and even keep your file structure a big cleaner. 

## Update WordPress Like A Pro

Yes, you could update WordPress in the admin panel, but you want to do it in a much cooler, easier-to-revert way. With Git, now you can. First, backup your database. Then in the root wordpress directory, update your Git repo by using git fetch:
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;`&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Now merge in any updates from your current branch, or merge in a new branch altogether. This command merges the latest update from the 3.2 branch into your WordPress install:
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;``&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Now you have the most recent version of WordPress. It is a beautiful thing.

Don&amp;amp;#8217;t worry! If it breaks something, it is easy to go back. First enter:

```If you have developed WordPress sites for clients this process might sound familiar to you:
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Get a new client that wants a wordpress site&lt;/li&gt;
&lt;li&gt;Download the most recent wordpress&lt;/li&gt;
&lt;li&gt;Find a good current blank wordpress theme to start implementing the design&lt;/li&gt;
&lt;li&gt;Upload to a staging server to for client to see&lt;/li&gt;
&lt;li&gt;Client requests changes&lt;/li&gt;
&lt;li&gt;You make changes on local server, then upload to staging server&lt;/li&gt;
&lt;li&gt;Repeat last three steps until finished and then you deploy the site to live&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After lots of trial and error, I have come up with a process that is more efficient, and allows rapid development of wordpress sites. I use Git, Git Submodules, and WordPress child themes to get going quicker and keep code up to date with minimal effort. (If your not using a &lt;a href=&#34;http://en.wikipedia.org/wiki/Revision_control&#34; target=&#34;_blank&#34;&gt;revision control &lt;/a&gt;system like &lt;a href=&#34;http://git-scm.com/&#34; target=&#34;_blank&#34;&gt;Git&lt;/a&gt; or &lt;a href=&#34;http://subversion.tigris.org/&#34; target=&#34;_blank&#34;&gt;SVN&lt;/a&gt; for development, then check out &lt;del datetime=&#34;2012-04-22T20:33:39+00:00&#34;&gt;&lt;a href=&#34;http://stackoverflow.com/questions/132520/good-excuses-not-to-use-version-control&#34; target=&#34;_blank&#34;&gt;this funny question and answer session on Stack Overflow&lt;/a&gt;&lt;/del&gt; &lt;strong&gt;Update:&lt;/strong&gt; Stack Overflow moderators removed the question&amp;#8230; bummer. Check out the funny-ness in the &lt;a href=&#34;http://web.archive.org/web/20100722082534/http://stackoverflow.com/questions/132520/good-excuses-not-to-use-version-control&#34; title=&#34;Why to use version control&#34; target=&#34;_blank&#34;&gt;wayback machine internet archiver&lt;/a&gt; instead)&lt;/p&gt;

&lt;p&gt;For this rapid WordPress development cycle, you will need to have Git installed.&lt;/p&gt;

&lt;h2 id=&#34;1-get-the-most-current-wordpress-4:ec46d592ccce457d292aec0b82cf84d7&#34;&gt;1. Get the Most Current WordPress&lt;/h2&gt;

&lt;p&gt;The wordpress core dev team uses SVN to manage wordpress development. But I want to use Git for speed and easy branching. Fortunately there is a &lt;a href=&#34;https://github.com/WordPress/WordPress&#34; target=&#34;_blank&#34;&gt;great WordPress git clone&lt;/a&gt; that is updated every fifteen minutes. To get the most recent version of WordPress, simply clone that repo to your project directory.&lt;/p&gt;

&lt;pre class=&#34;wp-code-highlight prettyprint&#34;&gt;mkdir projectA
git clone https://github.com/markjaquith/WordPress.git ./projectA
cd projectA
git checkout origin/3.2-branch&lt;/pre&gt;

&lt;p&gt;Now you have the most recent version of wordpress, and it will be easier than ever to upgrade wordpress and revert if something goes wrong. But we will get into the upgrade process later.&lt;/p&gt;

&lt;h2 id=&#34;2-starting-with-a-quality-blank-theme-4:ec46d592ccce457d292aec0b82cf84d7&#34;&gt;2. Starting with a Quality Blank Theme&lt;/h2&gt;

&lt;p&gt;To help get your new WordPress project off the ground, let&amp;#8217;s get a quality blank theme that updates regularly. I usually use the &lt;a title=&#34;Roots WordPress Theme&#34; href=&#34;http://www.rootstheme.com/&#34; target=&#34;_blank&#34;&gt;Roots theme&lt;/a&gt;, which is a quality HTML5 wordpress theme that updates regularly. To make sure our theme stays up to date with the latest wordpress updates, we will add the Roots theme as a Git Submodule. This allows us to essentially add a git repository inside of another repository. Why do this? Because we can update our theme code to the latest release with a simple Git command, instead of downloading and merging on our own. To add the sub-module, change to your project directory and add the sub-module to the themes folder then initialize it:&lt;/p&gt;

&lt;pre class=&#34;wp-code-highlight prettyprint&#34;&gt;cd projectA
git submodule add https://github.com/retlehs/roots.git ./wp-content/themes/roots
git submodule init
git submodule update&lt;/pre&gt;

&lt;p&gt;&lt;i class=&#34;icon-warning-sign&#34;&gt;&lt;/i&gt;&lt;strong&gt;Update:&lt;/strong&gt; I have now forked mark&amp;#8217;s wordpress git and added roots as a submodule. You can simply clone or fork my repo to save a step. Get it here: &lt;a title=&#34;Clint Berry&#39;s Github Account&#34; href=&#34;https://github.com/clintberry/WordPress&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://github.com/clintberry/WordPress&#34;&gt;https://github.com/clintberry/WordPress&lt;/a&gt;&lt;/a&gt; Make sure to clone recursive to get the roots theme. This repo updates nightly to the latest wordpress and roots release.&lt;/p&gt;

&lt;p&gt;Now you have a quality blank theme installed into your git repo as a sub-module.&lt;/p&gt;

&lt;h2 id=&#34;3-adding-your-custom-design-wordpress-child-theme-4:ec46d592ccce457d292aec0b82cf84d7&#34;&gt;3. Adding Your Custom Design (WordPress Child Theme)&lt;/h2&gt;

&lt;p&gt;Since we have added the new blank theme as a git submodule, we don&amp;#8217;t want to edit that theme directly. This could cause problems when/if we want to update our code base for the theme. To better avoid update problems, we can use the often-under-utilized-wordpress feature called child themes. Child themes allow you essentially &amp;#8220;inherit&amp;#8221; all the functionality of a &amp;#8220;base&amp;#8221; theme. In this case, we will create a child theme &amp;#8220;MyTheme&amp;#8221; that will have access to all the functionality of our base theme &amp;#8220;Roots&amp;#8221;.&lt;/p&gt;

&lt;p&gt;Creating child themes in wordpress is simple:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Add a new folder to your wordpress themes directory called &amp;#8220;MyTheme&amp;#8221;&lt;/li&gt;
&lt;li&gt;Create a file called &amp;#8220;style.css&amp;#8221; with the following text: &lt;pre class=&#34;wp-code-highlight prettyprint&#34;&gt;/*
Theme Name:     MyProject
Theme URI:      &lt;a href=&#34;http://clintberry.com/&#34;&gt;http://clintberry.com/&lt;/a&gt;
Description:    Roots Child Theme
Author:         Clint Berry
Author URI:     &lt;a href=&#34;http://clintberry.com&#34;&gt;http://clintberry.com&lt;/a&gt;
Template:       roots
Version:        0.1.0
*/&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;@import url(&amp;ldquo;../twentyten/style.css&amp;rdquo;);
&lt;/pre&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Take notice of the &amp;amp;#8220;Template: roots&amp;amp;#8221; field. That is what lets WordPress know that this is a child theme and to inherit all of the roots functionality. Also since this style.css file overwrites the roots css file, we import the css file from roots. &amp;lt;/li&amp;gt; 

  * Create a functions.php file to add any custom WordPress functions. WordPress will load your new functions.php file along with the Roots functions.php file, so all is well.
  * Copy any template file you want to change from the Roots theme to your new child theme directory. Any template file found in your new directory will overwrite the template in Roots.&amp;lt;/ol&amp;gt; 

Now you can start your theme development with an HTML5 bang! Child themes make it much easier to get started and even keep your file structure a big cleaner. 

## Update WordPress Like A Pro

Yes, you could update WordPress in the admin panel, but you want to do it in a much cooler, easier-to-revert way. With Git, now you can. First, backup your database. Then in the root wordpress directory, update your Git repo by using git fetch:

`If you have developed WordPress sites for clients this process might sound familiar to you:
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Get a new client that wants a wordpress site&lt;/li&gt;
&lt;li&gt;Download the most recent wordpress&lt;/li&gt;
&lt;li&gt;Find a good current blank wordpress theme to start implementing the design&lt;/li&gt;
&lt;li&gt;Upload to a staging server to for client to see&lt;/li&gt;
&lt;li&gt;Client requests changes&lt;/li&gt;
&lt;li&gt;You make changes on local server, then upload to staging server&lt;/li&gt;
&lt;li&gt;Repeat last three steps until finished and then you deploy the site to live&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After lots of trial and error, I have come up with a process that is more efficient, and allows rapid development of wordpress sites. I use Git, Git Submodules, and WordPress child themes to get going quicker and keep code up to date with minimal effort. (If your not using a &lt;a href=&#34;http://en.wikipedia.org/wiki/Revision_control&#34; target=&#34;_blank&#34;&gt;revision control &lt;/a&gt;system like &lt;a href=&#34;http://git-scm.com/&#34; target=&#34;_blank&#34;&gt;Git&lt;/a&gt; or &lt;a href=&#34;http://subversion.tigris.org/&#34; target=&#34;_blank&#34;&gt;SVN&lt;/a&gt; for development, then check out &lt;del datetime=&#34;2012-04-22T20:33:39+00:00&#34;&gt;&lt;a href=&#34;http://stackoverflow.com/questions/132520/good-excuses-not-to-use-version-control&#34; target=&#34;_blank&#34;&gt;this funny question and answer session on Stack Overflow&lt;/a&gt;&lt;/del&gt; &lt;strong&gt;Update:&lt;/strong&gt; Stack Overflow moderators removed the question&amp;#8230; bummer. Check out the funny-ness in the &lt;a href=&#34;http://web.archive.org/web/20100722082534/http://stackoverflow.com/questions/132520/good-excuses-not-to-use-version-control&#34; title=&#34;Why to use version control&#34; target=&#34;_blank&#34;&gt;wayback machine internet archiver&lt;/a&gt; instead)&lt;/p&gt;

&lt;p&gt;For this rapid WordPress development cycle, you will need to have Git installed.&lt;/p&gt;

&lt;h2 id=&#34;1-get-the-most-current-wordpress-5:ec46d592ccce457d292aec0b82cf84d7&#34;&gt;1. Get the Most Current WordPress&lt;/h2&gt;

&lt;p&gt;The wordpress core dev team uses SVN to manage wordpress development. But I want to use Git for speed and easy branching. Fortunately there is a &lt;a href=&#34;https://github.com/WordPress/WordPress&#34; target=&#34;_blank&#34;&gt;great WordPress git clone&lt;/a&gt; that is updated every fifteen minutes. To get the most recent version of WordPress, simply clone that repo to your project directory.&lt;/p&gt;

&lt;pre class=&#34;wp-code-highlight prettyprint&#34;&gt;mkdir projectA
git clone https://github.com/markjaquith/WordPress.git ./projectA
cd projectA
git checkout origin/3.2-branch&lt;/pre&gt;

&lt;p&gt;Now you have the most recent version of wordpress, and it will be easier than ever to upgrade wordpress and revert if something goes wrong. But we will get into the upgrade process later.&lt;/p&gt;

&lt;h2 id=&#34;2-starting-with-a-quality-blank-theme-5:ec46d592ccce457d292aec0b82cf84d7&#34;&gt;2. Starting with a Quality Blank Theme&lt;/h2&gt;

&lt;p&gt;To help get your new WordPress project off the ground, let&amp;#8217;s get a quality blank theme that updates regularly. I usually use the &lt;a title=&#34;Roots WordPress Theme&#34; href=&#34;http://www.rootstheme.com/&#34; target=&#34;_blank&#34;&gt;Roots theme&lt;/a&gt;, which is a quality HTML5 wordpress theme that updates regularly. To make sure our theme stays up to date with the latest wordpress updates, we will add the Roots theme as a Git Submodule. This allows us to essentially add a git repository inside of another repository. Why do this? Because we can update our theme code to the latest release with a simple Git command, instead of downloading and merging on our own. To add the sub-module, change to your project directory and add the sub-module to the themes folder then initialize it:&lt;/p&gt;

&lt;pre class=&#34;wp-code-highlight prettyprint&#34;&gt;cd projectA
git submodule add https://github.com/retlehs/roots.git ./wp-content/themes/roots
git submodule init
git submodule update&lt;/pre&gt;

&lt;p&gt;&lt;i class=&#34;icon-warning-sign&#34;&gt;&lt;/i&gt;&lt;strong&gt;Update:&lt;/strong&gt; I have now forked mark&amp;#8217;s wordpress git and added roots as a submodule. You can simply clone or fork my repo to save a step. Get it here: &lt;a title=&#34;Clint Berry&#39;s Github Account&#34; href=&#34;https://github.com/clintberry/WordPress&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://github.com/clintberry/WordPress&#34;&gt;https://github.com/clintberry/WordPress&lt;/a&gt;&lt;/a&gt; Make sure to clone recursive to get the roots theme. This repo updates nightly to the latest wordpress and roots release.&lt;/p&gt;

&lt;p&gt;Now you have a quality blank theme installed into your git repo as a sub-module.&lt;/p&gt;

&lt;h2 id=&#34;3-adding-your-custom-design-wordpress-child-theme-5:ec46d592ccce457d292aec0b82cf84d7&#34;&gt;3. Adding Your Custom Design (WordPress Child Theme)&lt;/h2&gt;

&lt;p&gt;Since we have added the new blank theme as a git submodule, we don&amp;#8217;t want to edit that theme directly. This could cause problems when/if we want to update our code base for the theme. To better avoid update problems, we can use the often-under-utilized-wordpress feature called child themes. Child themes allow you essentially &amp;#8220;inherit&amp;#8221; all the functionality of a &amp;#8220;base&amp;#8221; theme. In this case, we will create a child theme &amp;#8220;MyTheme&amp;#8221; that will have access to all the functionality of our base theme &amp;#8220;Roots&amp;#8221;.&lt;/p&gt;

&lt;p&gt;Creating child themes in wordpress is simple:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Add a new folder to your wordpress themes directory called &amp;#8220;MyTheme&amp;#8221;&lt;/li&gt;
&lt;li&gt;Create a file called &amp;#8220;style.css&amp;#8221; with the following text: &lt;pre class=&#34;wp-code-highlight prettyprint&#34;&gt;/*
Theme Name:     MyProject
Theme URI:      &lt;a href=&#34;http://clintberry.com/&#34;&gt;http://clintberry.com/&lt;/a&gt;
Description:    Roots Child Theme
Author:         Clint Berry
Author URI:     &lt;a href=&#34;http://clintberry.com&#34;&gt;http://clintberry.com&lt;/a&gt;
Template:       roots
Version:        0.1.0
*/&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;@import url(&amp;ldquo;../twentyten/style.css&amp;rdquo;);
&lt;/pre&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Take notice of the &amp;amp;#8220;Template: roots&amp;amp;#8221; field. That is what lets WordPress know that this is a child theme and to inherit all of the roots functionality. Also since this style.css file overwrites the roots css file, we import the css file from roots. &amp;lt;/li&amp;gt; 

  * Create a functions.php file to add any custom WordPress functions. WordPress will load your new functions.php file along with the Roots functions.php file, so all is well.
  * Copy any template file you want to change from the Roots theme to your new child theme directory. Any template file found in your new directory will overwrite the template in Roots.&amp;lt;/ol&amp;gt; 

Now you can start your theme development with an HTML5 bang! Child themes make it much easier to get started and even keep your file structure a big cleaner. 

## Update WordPress Like A Pro

Yes, you could update WordPress in the admin panel, but you want to do it in a much cooler, easier-to-revert way. With Git, now you can. First, backup your database. Then in the root wordpress directory, update your Git repo by using git fetch:
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;`&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Now merge in any updates from your current branch, or merge in a new branch altogether. This command merges the latest update from the 3.2 branch into your WordPress install:

``If you have developed WordPress sites for clients this process might sound familiar to you:
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Get a new client that wants a wordpress site&lt;/li&gt;
&lt;li&gt;Download the most recent wordpress&lt;/li&gt;
&lt;li&gt;Find a good current blank wordpress theme to start implementing the design&lt;/li&gt;
&lt;li&gt;Upload to a staging server to for client to see&lt;/li&gt;
&lt;li&gt;Client requests changes&lt;/li&gt;
&lt;li&gt;You make changes on local server, then upload to staging server&lt;/li&gt;
&lt;li&gt;Repeat last three steps until finished and then you deploy the site to live&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After lots of trial and error, I have come up with a process that is more efficient, and allows rapid development of wordpress sites. I use Git, Git Submodules, and WordPress child themes to get going quicker and keep code up to date with minimal effort. (If your not using a &lt;a href=&#34;http://en.wikipedia.org/wiki/Revision_control&#34; target=&#34;_blank&#34;&gt;revision control &lt;/a&gt;system like &lt;a href=&#34;http://git-scm.com/&#34; target=&#34;_blank&#34;&gt;Git&lt;/a&gt; or &lt;a href=&#34;http://subversion.tigris.org/&#34; target=&#34;_blank&#34;&gt;SVN&lt;/a&gt; for development, then check out &lt;del datetime=&#34;2012-04-22T20:33:39+00:00&#34;&gt;&lt;a href=&#34;http://stackoverflow.com/questions/132520/good-excuses-not-to-use-version-control&#34; target=&#34;_blank&#34;&gt;this funny question and answer session on Stack Overflow&lt;/a&gt;&lt;/del&gt; &lt;strong&gt;Update:&lt;/strong&gt; Stack Overflow moderators removed the question&amp;#8230; bummer. Check out the funny-ness in the &lt;a href=&#34;http://web.archive.org/web/20100722082534/http://stackoverflow.com/questions/132520/good-excuses-not-to-use-version-control&#34; title=&#34;Why to use version control&#34; target=&#34;_blank&#34;&gt;wayback machine internet archiver&lt;/a&gt; instead)&lt;/p&gt;

&lt;p&gt;For this rapid WordPress development cycle, you will need to have Git installed.&lt;/p&gt;

&lt;h2 id=&#34;1-get-the-most-current-wordpress-6:ec46d592ccce457d292aec0b82cf84d7&#34;&gt;1. Get the Most Current WordPress&lt;/h2&gt;

&lt;p&gt;The wordpress core dev team uses SVN to manage wordpress development. But I want to use Git for speed and easy branching. Fortunately there is a &lt;a href=&#34;https://github.com/WordPress/WordPress&#34; target=&#34;_blank&#34;&gt;great WordPress git clone&lt;/a&gt; that is updated every fifteen minutes. To get the most recent version of WordPress, simply clone that repo to your project directory.&lt;/p&gt;

&lt;pre class=&#34;wp-code-highlight prettyprint&#34;&gt;mkdir projectA
git clone https://github.com/markjaquith/WordPress.git ./projectA
cd projectA
git checkout origin/3.2-branch&lt;/pre&gt;

&lt;p&gt;Now you have the most recent version of wordpress, and it will be easier than ever to upgrade wordpress and revert if something goes wrong. But we will get into the upgrade process later.&lt;/p&gt;

&lt;h2 id=&#34;2-starting-with-a-quality-blank-theme-6:ec46d592ccce457d292aec0b82cf84d7&#34;&gt;2. Starting with a Quality Blank Theme&lt;/h2&gt;

&lt;p&gt;To help get your new WordPress project off the ground, let&amp;#8217;s get a quality blank theme that updates regularly. I usually use the &lt;a title=&#34;Roots WordPress Theme&#34; href=&#34;http://www.rootstheme.com/&#34; target=&#34;_blank&#34;&gt;Roots theme&lt;/a&gt;, which is a quality HTML5 wordpress theme that updates regularly. To make sure our theme stays up to date with the latest wordpress updates, we will add the Roots theme as a Git Submodule. This allows us to essentially add a git repository inside of another repository. Why do this? Because we can update our theme code to the latest release with a simple Git command, instead of downloading and merging on our own. To add the sub-module, change to your project directory and add the sub-module to the themes folder then initialize it:&lt;/p&gt;

&lt;pre class=&#34;wp-code-highlight prettyprint&#34;&gt;cd projectA
git submodule add https://github.com/retlehs/roots.git ./wp-content/themes/roots
git submodule init
git submodule update&lt;/pre&gt;

&lt;p&gt;&lt;i class=&#34;icon-warning-sign&#34;&gt;&lt;/i&gt;&lt;strong&gt;Update:&lt;/strong&gt; I have now forked mark&amp;#8217;s wordpress git and added roots as a submodule. You can simply clone or fork my repo to save a step. Get it here: &lt;a title=&#34;Clint Berry&#39;s Github Account&#34; href=&#34;https://github.com/clintberry/WordPress&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://github.com/clintberry/WordPress&#34;&gt;https://github.com/clintberry/WordPress&lt;/a&gt;&lt;/a&gt; Make sure to clone recursive to get the roots theme. This repo updates nightly to the latest wordpress and roots release.&lt;/p&gt;

&lt;p&gt;Now you have a quality blank theme installed into your git repo as a sub-module.&lt;/p&gt;

&lt;h2 id=&#34;3-adding-your-custom-design-wordpress-child-theme-6:ec46d592ccce457d292aec0b82cf84d7&#34;&gt;3. Adding Your Custom Design (WordPress Child Theme)&lt;/h2&gt;

&lt;p&gt;Since we have added the new blank theme as a git submodule, we don&amp;#8217;t want to edit that theme directly. This could cause problems when/if we want to update our code base for the theme. To better avoid update problems, we can use the often-under-utilized-wordpress feature called child themes. Child themes allow you essentially &amp;#8220;inherit&amp;#8221; all the functionality of a &amp;#8220;base&amp;#8221; theme. In this case, we will create a child theme &amp;#8220;MyTheme&amp;#8221; that will have access to all the functionality of our base theme &amp;#8220;Roots&amp;#8221;.&lt;/p&gt;

&lt;p&gt;Creating child themes in wordpress is simple:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Add a new folder to your wordpress themes directory called &amp;#8220;MyTheme&amp;#8221;&lt;/li&gt;
&lt;li&gt;Create a file called &amp;#8220;style.css&amp;#8221; with the following text: &lt;pre class=&#34;wp-code-highlight prettyprint&#34;&gt;/*
Theme Name:     MyProject
Theme URI:      &lt;a href=&#34;http://clintberry.com/&#34;&gt;http://clintberry.com/&lt;/a&gt;
Description:    Roots Child Theme
Author:         Clint Berry
Author URI:     &lt;a href=&#34;http://clintberry.com&#34;&gt;http://clintberry.com&lt;/a&gt;
Template:       roots
Version:        0.1.0
*/&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;@import url(&amp;ldquo;../twentyten/style.css&amp;rdquo;);
&lt;/pre&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Take notice of the &amp;amp;#8220;Template: roots&amp;amp;#8221; field. That is what lets WordPress know that this is a child theme and to inherit all of the roots functionality. Also since this style.css file overwrites the roots css file, we import the css file from roots. &amp;lt;/li&amp;gt; 

  * Create a functions.php file to add any custom WordPress functions. WordPress will load your new functions.php file along with the Roots functions.php file, so all is well.
  * Copy any template file you want to change from the Roots theme to your new child theme directory. Any template file found in your new directory will overwrite the template in Roots.&amp;lt;/ol&amp;gt; 

Now you can start your theme development with an HTML5 bang! Child themes make it much easier to get started and even keep your file structure a big cleaner. 

## Update WordPress Like A Pro

Yes, you could update WordPress in the admin panel, but you want to do it in a much cooler, easier-to-revert way. With Git, now you can. First, backup your database. Then in the root wordpress directory, update your Git repo by using git fetch:

`If you have developed WordPress sites for clients this process might sound familiar to you:
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Get a new client that wants a wordpress site&lt;/li&gt;
&lt;li&gt;Download the most recent wordpress&lt;/li&gt;
&lt;li&gt;Find a good current blank wordpress theme to start implementing the design&lt;/li&gt;
&lt;li&gt;Upload to a staging server to for client to see&lt;/li&gt;
&lt;li&gt;Client requests changes&lt;/li&gt;
&lt;li&gt;You make changes on local server, then upload to staging server&lt;/li&gt;
&lt;li&gt;Repeat last three steps until finished and then you deploy the site to live&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After lots of trial and error, I have come up with a process that is more efficient, and allows rapid development of wordpress sites. I use Git, Git Submodules, and WordPress child themes to get going quicker and keep code up to date with minimal effort. (If your not using a &lt;a href=&#34;http://en.wikipedia.org/wiki/Revision_control&#34; target=&#34;_blank&#34;&gt;revision control &lt;/a&gt;system like &lt;a href=&#34;http://git-scm.com/&#34; target=&#34;_blank&#34;&gt;Git&lt;/a&gt; or &lt;a href=&#34;http://subversion.tigris.org/&#34; target=&#34;_blank&#34;&gt;SVN&lt;/a&gt; for development, then check out &lt;del datetime=&#34;2012-04-22T20:33:39+00:00&#34;&gt;&lt;a href=&#34;http://stackoverflow.com/questions/132520/good-excuses-not-to-use-version-control&#34; target=&#34;_blank&#34;&gt;this funny question and answer session on Stack Overflow&lt;/a&gt;&lt;/del&gt; &lt;strong&gt;Update:&lt;/strong&gt; Stack Overflow moderators removed the question&amp;#8230; bummer. Check out the funny-ness in the &lt;a href=&#34;http://web.archive.org/web/20100722082534/http://stackoverflow.com/questions/132520/good-excuses-not-to-use-version-control&#34; title=&#34;Why to use version control&#34; target=&#34;_blank&#34;&gt;wayback machine internet archiver&lt;/a&gt; instead)&lt;/p&gt;

&lt;p&gt;For this rapid WordPress development cycle, you will need to have Git installed.&lt;/p&gt;

&lt;h2 id=&#34;1-get-the-most-current-wordpress-7:ec46d592ccce457d292aec0b82cf84d7&#34;&gt;1. Get the Most Current WordPress&lt;/h2&gt;

&lt;p&gt;The wordpress core dev team uses SVN to manage wordpress development. But I want to use Git for speed and easy branching. Fortunately there is a &lt;a href=&#34;https://github.com/WordPress/WordPress&#34; target=&#34;_blank&#34;&gt;great WordPress git clone&lt;/a&gt; that is updated every fifteen minutes. To get the most recent version of WordPress, simply clone that repo to your project directory.&lt;/p&gt;

&lt;pre class=&#34;wp-code-highlight prettyprint&#34;&gt;mkdir projectA
git clone https://github.com/markjaquith/WordPress.git ./projectA
cd projectA
git checkout origin/3.2-branch&lt;/pre&gt;

&lt;p&gt;Now you have the most recent version of wordpress, and it will be easier than ever to upgrade wordpress and revert if something goes wrong. But we will get into the upgrade process later.&lt;/p&gt;

&lt;h2 id=&#34;2-starting-with-a-quality-blank-theme-7:ec46d592ccce457d292aec0b82cf84d7&#34;&gt;2. Starting with a Quality Blank Theme&lt;/h2&gt;

&lt;p&gt;To help get your new WordPress project off the ground, let&amp;#8217;s get a quality blank theme that updates regularly. I usually use the &lt;a title=&#34;Roots WordPress Theme&#34; href=&#34;http://www.rootstheme.com/&#34; target=&#34;_blank&#34;&gt;Roots theme&lt;/a&gt;, which is a quality HTML5 wordpress theme that updates regularly. To make sure our theme stays up to date with the latest wordpress updates, we will add the Roots theme as a Git Submodule. This allows us to essentially add a git repository inside of another repository. Why do this? Because we can update our theme code to the latest release with a simple Git command, instead of downloading and merging on our own. To add the sub-module, change to your project directory and add the sub-module to the themes folder then initialize it:&lt;/p&gt;

&lt;pre class=&#34;wp-code-highlight prettyprint&#34;&gt;cd projectA
git submodule add https://github.com/retlehs/roots.git ./wp-content/themes/roots
git submodule init
git submodule update&lt;/pre&gt;

&lt;p&gt;&lt;i class=&#34;icon-warning-sign&#34;&gt;&lt;/i&gt;&lt;strong&gt;Update:&lt;/strong&gt; I have now forked mark&amp;#8217;s wordpress git and added roots as a submodule. You can simply clone or fork my repo to save a step. Get it here: &lt;a title=&#34;Clint Berry&#39;s Github Account&#34; href=&#34;https://github.com/clintberry/WordPress&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://github.com/clintberry/WordPress&#34;&gt;https://github.com/clintberry/WordPress&lt;/a&gt;&lt;/a&gt; Make sure to clone recursive to get the roots theme. This repo updates nightly to the latest wordpress and roots release.&lt;/p&gt;

&lt;p&gt;Now you have a quality blank theme installed into your git repo as a sub-module.&lt;/p&gt;

&lt;h2 id=&#34;3-adding-your-custom-design-wordpress-child-theme-7:ec46d592ccce457d292aec0b82cf84d7&#34;&gt;3. Adding Your Custom Design (WordPress Child Theme)&lt;/h2&gt;

&lt;p&gt;Since we have added the new blank theme as a git submodule, we don&amp;#8217;t want to edit that theme directly. This could cause problems when/if we want to update our code base for the theme. To better avoid update problems, we can use the often-under-utilized-wordpress feature called child themes. Child themes allow you essentially &amp;#8220;inherit&amp;#8221; all the functionality of a &amp;#8220;base&amp;#8221; theme. In this case, we will create a child theme &amp;#8220;MyTheme&amp;#8221; that will have access to all the functionality of our base theme &amp;#8220;Roots&amp;#8221;.&lt;/p&gt;

&lt;p&gt;Creating child themes in wordpress is simple:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Add a new folder to your wordpress themes directory called &amp;#8220;MyTheme&amp;#8221;&lt;/li&gt;
&lt;li&gt;Create a file called &amp;#8220;style.css&amp;#8221; with the following text: &lt;pre class=&#34;wp-code-highlight prettyprint&#34;&gt;/*
Theme Name:     MyProject
Theme URI:      &lt;a href=&#34;http://clintberry.com/&#34;&gt;http://clintberry.com/&lt;/a&gt;
Description:    Roots Child Theme
Author:         Clint Berry
Author URI:     &lt;a href=&#34;http://clintberry.com&#34;&gt;http://clintberry.com&lt;/a&gt;
Template:       roots
Version:        0.1.0
*/&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;@import url(&amp;ldquo;../twentyten/style.css&amp;rdquo;);
&lt;/pre&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Take notice of the &amp;amp;#8220;Template: roots&amp;amp;#8221; field. That is what lets WordPress know that this is a child theme and to inherit all of the roots functionality. Also since this style.css file overwrites the roots css file, we import the css file from roots. &amp;lt;/li&amp;gt; 

  * Create a functions.php file to add any custom WordPress functions. WordPress will load your new functions.php file along with the Roots functions.php file, so all is well.
  * Copy any template file you want to change from the Roots theme to your new child theme directory. Any template file found in your new directory will overwrite the template in Roots.&amp;lt;/ol&amp;gt; 

Now you can start your theme development with an HTML5 bang! Child themes make it much easier to get started and even keep your file structure a big cleaner. 

## Update WordPress Like A Pro

Yes, you could update WordPress in the admin panel, but you want to do it in a much cooler, easier-to-revert way. With Git, now you can. First, backup your database. Then in the root wordpress directory, update your Git repo by using git fetch:
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;`&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Now merge in any updates from your current branch, or merge in a new branch altogether. This command merges the latest update from the 3.2 branch into your WordPress install:
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;``&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Now you have the most recent version of WordPress. It is a beautiful thing.

Don&amp;amp;#8217;t worry! If it breaks something, it is easy to go back. First enter:
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;  
    This will output the most recent changes to your repo. Look for your last change which was merging. It will have a line like this:
    
    &amp;lt;pre class=&amp;quot;wp-code-highlight prettyprint&amp;quot;&amp;gt;Merge remote branch &amp;amp;#039;upstream/master&amp;amp;#039;
&amp;lt;/pre&amp;gt;
    
    Take the commit sha (the long number right after the word commit) that is located on the commit before the Merge line. Take that sha and enter the command:
  
    ````If you have developed WordPress sites for clients this process might sound familiar to you:

  * Get a new client that wants a wordpress site
  * Download the most recent wordpress
  * Find a good current blank wordpress theme to start implementing the design
  * Upload to a staging server to for client to see
  * Client requests changes
  * You make changes on local server, then upload to staging server
  * Repeat last three steps until finished and then you deploy the site to live

After lots of trial and error, I have come up with a process that is more efficient, and allows rapid development of wordpress sites. I use Git, Git Submodules, and WordPress child themes to get going quicker and keep code up to date with minimal effort. (If your not using a &amp;lt;a href=&amp;quot;http://en.wikipedia.org/wiki/Revision_control&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;revision control &amp;lt;/a&amp;gt;system like &amp;lt;a href=&amp;quot;http://git-scm.com/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;Git&amp;lt;/a&amp;gt; or &amp;lt;a href=&amp;quot;http://subversion.tigris.org/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;SVN&amp;lt;/a&amp;gt; for development, then check out &amp;lt;del datetime=&amp;quot;2012-04-22T20:33:39+00:00&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;http://stackoverflow.com/questions/132520/good-excuses-not-to-use-version-control&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;this funny question and answer session on Stack Overflow&amp;lt;/a&amp;gt;&amp;lt;/del&amp;gt; **Update:** Stack Overflow moderators removed the question&amp;amp;#8230; bummer. Check out the funny-ness in the &amp;lt;a href=&amp;quot;http://web.archive.org/web/20100722082534/http://stackoverflow.com/questions/132520/good-excuses-not-to-use-version-control&amp;quot; title=&amp;quot;Why to use version control&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;wayback machine internet archiver&amp;lt;/a&amp;gt; instead)
  



  
For this rapid WordPress development cycle, you will need to have Git installed.

## 1. Get the Most Current WordPress

The wordpress core dev team uses SVN to manage wordpress development. But I want to use Git for speed and easy branching. Fortunately there is a &amp;lt;a href=&amp;quot;https://github.com/WordPress/WordPress&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;great WordPress git clone&amp;lt;/a&amp;gt; that is updated every fifteen minutes. To get the most recent version of WordPress, simply clone that repo to your project directory.

&amp;lt;pre class=&amp;quot;wp-code-highlight prettyprint&amp;quot;&amp;gt;mkdir projectA
git clone https://github.com/markjaquith/WordPress.git ./projectA
cd projectA
git checkout origin/3.2-branch&amp;lt;/pre&amp;gt;

Now you have the most recent version of wordpress, and it will be easier than ever to upgrade wordpress and revert if something goes wrong. But we will get into the upgrade process later.

## 2. Starting with a Quality Blank Theme

To help get your new WordPress project off the ground, let&amp;amp;#8217;s get a quality blank theme that updates regularly. I usually use the &amp;lt;a title=&amp;quot;Roots WordPress Theme&amp;quot; href=&amp;quot;http://www.rootstheme.com/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;Roots theme&amp;lt;/a&amp;gt;, which is a quality HTML5 wordpress theme that updates regularly. To make sure our theme stays up to date with the latest wordpress updates, we will add the Roots theme as a Git Submodule. This allows us to essentially add a git repository inside of another repository. Why do this? Because we can update our theme code to the latest release with a simple Git command, instead of downloading and merging on our own. To add the sub-module, change to your project directory and add the sub-module to the themes folder then initialize it:

&amp;lt;pre class=&amp;quot;wp-code-highlight prettyprint&amp;quot;&amp;gt;cd projectA
git submodule add https://github.com/retlehs/roots.git ./wp-content/themes/roots
git submodule init
git submodule update&amp;lt;/pre&amp;gt;

&amp;lt;i class=&amp;quot;icon-warning-sign&amp;quot;&amp;gt;&amp;lt;/i&amp;gt;**Update:** I have now forked mark&amp;amp;#8217;s wordpress git and added roots as a submodule. You can simply clone or fork my repo to save a step. Get it here: &amp;lt;a title=&amp;quot;Clint Berry&#39;s Github Account&amp;quot; href=&amp;quot;https://github.com/clintberry/WordPress&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;https://github.com/clintberry/WordPress&amp;lt;/a&amp;gt; Make sure to clone recursive to get the roots theme. This repo updates nightly to the latest wordpress and roots release.

Now you have a quality blank theme installed into your git repo as a sub-module.

## 3. Adding Your Custom Design (WordPress Child Theme)

Since we have added the new blank theme as a git submodule, we don&amp;amp;#8217;t want to edit that theme directly. This could cause problems when/if we want to update our code base for the theme. To better avoid update problems, we can use the often-under-utilized-wordpress feature called child themes. Child themes allow you essentially &amp;amp;#8220;inherit&amp;amp;#8221; all the functionality of a &amp;amp;#8220;base&amp;amp;#8221; theme. In this case, we will create a child theme &amp;amp;#8220;MyTheme&amp;amp;#8221; that will have access to all the functionality of our base theme &amp;amp;#8220;Roots&amp;amp;#8221;.

Creating child themes in wordpress is simple:

  1. Add a new folder to your wordpress themes directory called &amp;amp;#8220;MyTheme&amp;amp;#8221;
  2. Create a file called &amp;amp;#8220;style.css&amp;amp;#8221; with the following text: &amp;lt;pre class=&amp;quot;wp-code-highlight prettyprint&amp;quot;&amp;gt;/*
Theme Name:     MyProject
Theme URI:      http://clintberry.com/
Description:    Roots Child Theme
Author:         Clint Berry
Author URI:     http://clintberry.com
Template:       roots
Version:        0.1.0
*/

@import url(&amp;quot;../twentyten/style.css&amp;quot;);
&amp;lt;/pre&amp;gt;
    
    Take notice of the &amp;amp;#8220;Template: roots&amp;amp;#8221; field. That is what lets WordPress know that this is a child theme and to inherit all of the roots functionality. Also since this style.css file overwrites the roots css file, we import the css file from roots. &amp;lt;/li&amp;gt; 
    
      * Create a functions.php file to add any custom WordPress functions. WordPress will load your new functions.php file along with the Roots functions.php file, so all is well.
      * Copy any template file you want to change from the Roots theme to your new child theme directory. Any template file found in your new directory will overwrite the template in Roots.&amp;lt;/ol&amp;gt; 
    
    Now you can start your theme development with an HTML5 bang! Child themes make it much easier to get started and even keep your file structure a big cleaner. 
    
    ## Update WordPress Like A Pro
    
    Yes, you could update WordPress in the admin panel, but you want to do it in a much cooler, easier-to-revert way. With Git, now you can. First, backup your database. Then in the root wordpress directory, update your Git repo by using git fetch:
  
    `If you have developed WordPress sites for clients this process might sound familiar to you:

  * Get a new client that wants a wordpress site
  * Download the most recent wordpress
  * Find a good current blank wordpress theme to start implementing the design
  * Upload to a staging server to for client to see
  * Client requests changes
  * You make changes on local server, then upload to staging server
  * Repeat last three steps until finished and then you deploy the site to live

After lots of trial and error, I have come up with a process that is more efficient, and allows rapid development of wordpress sites. I use Git, Git Submodules, and WordPress child themes to get going quicker and keep code up to date with minimal effort. (If your not using a &amp;lt;a href=&amp;quot;http://en.wikipedia.org/wiki/Revision_control&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;revision control &amp;lt;/a&amp;gt;system like &amp;lt;a href=&amp;quot;http://git-scm.com/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;Git&amp;lt;/a&amp;gt; or &amp;lt;a href=&amp;quot;http://subversion.tigris.org/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;SVN&amp;lt;/a&amp;gt; for development, then check out &amp;lt;del datetime=&amp;quot;2012-04-22T20:33:39+00:00&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;http://stackoverflow.com/questions/132520/good-excuses-not-to-use-version-control&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;this funny question and answer session on Stack Overflow&amp;lt;/a&amp;gt;&amp;lt;/del&amp;gt; **Update:** Stack Overflow moderators removed the question&amp;amp;#8230; bummer. Check out the funny-ness in the &amp;lt;a href=&amp;quot;http://web.archive.org/web/20100722082534/http://stackoverflow.com/questions/132520/good-excuses-not-to-use-version-control&amp;quot; title=&amp;quot;Why to use version control&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;wayback machine internet archiver&amp;lt;/a&amp;gt; instead)
  



  
For this rapid WordPress development cycle, you will need to have Git installed.

## 1. Get the Most Current WordPress

The wordpress core dev team uses SVN to manage wordpress development. But I want to use Git for speed and easy branching. Fortunately there is a &amp;lt;a href=&amp;quot;https://github.com/WordPress/WordPress&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;great WordPress git clone&amp;lt;/a&amp;gt; that is updated every fifteen minutes. To get the most recent version of WordPress, simply clone that repo to your project directory.

&amp;lt;pre class=&amp;quot;wp-code-highlight prettyprint&amp;quot;&amp;gt;mkdir projectA
git clone https://github.com/markjaquith/WordPress.git ./projectA
cd projectA
git checkout origin/3.2-branch&amp;lt;/pre&amp;gt;

Now you have the most recent version of wordpress, and it will be easier than ever to upgrade wordpress and revert if something goes wrong. But we will get into the upgrade process later.

## 2. Starting with a Quality Blank Theme

To help get your new WordPress project off the ground, let&amp;amp;#8217;s get a quality blank theme that updates regularly. I usually use the &amp;lt;a title=&amp;quot;Roots WordPress Theme&amp;quot; href=&amp;quot;http://www.rootstheme.com/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;Roots theme&amp;lt;/a&amp;gt;, which is a quality HTML5 wordpress theme that updates regularly. To make sure our theme stays up to date with the latest wordpress updates, we will add the Roots theme as a Git Submodule. This allows us to essentially add a git repository inside of another repository. Why do this? Because we can update our theme code to the latest release with a simple Git command, instead of downloading and merging on our own. To add the sub-module, change to your project directory and add the sub-module to the themes folder then initialize it:

&amp;lt;pre class=&amp;quot;wp-code-highlight prettyprint&amp;quot;&amp;gt;cd projectA
git submodule add https://github.com/retlehs/roots.git ./wp-content/themes/roots
git submodule init
git submodule update&amp;lt;/pre&amp;gt;

&amp;lt;i class=&amp;quot;icon-warning-sign&amp;quot;&amp;gt;&amp;lt;/i&amp;gt;**Update:** I have now forked mark&amp;amp;#8217;s wordpress git and added roots as a submodule. You can simply clone or fork my repo to save a step. Get it here: &amp;lt;a title=&amp;quot;Clint Berry&#39;s Github Account&amp;quot; href=&amp;quot;https://github.com/clintberry/WordPress&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;https://github.com/clintberry/WordPress&amp;lt;/a&amp;gt; Make sure to clone recursive to get the roots theme. This repo updates nightly to the latest wordpress and roots release.

Now you have a quality blank theme installed into your git repo as a sub-module.

## 3. Adding Your Custom Design (WordPress Child Theme)

Since we have added the new blank theme as a git submodule, we don&amp;amp;#8217;t want to edit that theme directly. This could cause problems when/if we want to update our code base for the theme. To better avoid update problems, we can use the often-under-utilized-wordpress feature called child themes. Child themes allow you essentially &amp;amp;#8220;inherit&amp;amp;#8221; all the functionality of a &amp;amp;#8220;base&amp;amp;#8221; theme. In this case, we will create a child theme &amp;amp;#8220;MyTheme&amp;amp;#8221; that will have access to all the functionality of our base theme &amp;amp;#8220;Roots&amp;amp;#8221;.

Creating child themes in wordpress is simple:

  1. Add a new folder to your wordpress themes directory called &amp;amp;#8220;MyTheme&amp;amp;#8221;
  2. Create a file called &amp;amp;#8220;style.css&amp;amp;#8221; with the following text: &amp;lt;pre class=&amp;quot;wp-code-highlight prettyprint&amp;quot;&amp;gt;/*
Theme Name:     MyProject
Theme URI:      http://clintberry.com/
Description:    Roots Child Theme
Author:         Clint Berry
Author URI:     http://clintberry.com
Template:       roots
Version:        0.1.0
*/

@import url(&amp;quot;../twentyten/style.css&amp;quot;);
&amp;lt;/pre&amp;gt;
    
    Take notice of the &amp;amp;#8220;Template: roots&amp;amp;#8221; field. That is what lets WordPress know that this is a child theme and to inherit all of the roots functionality. Also since this style.css file overwrites the roots css file, we import the css file from roots. &amp;lt;/li&amp;gt; 
    
      * Create a functions.php file to add any custom WordPress functions. WordPress will load your new functions.php file along with the Roots functions.php file, so all is well.
      * Copy any template file you want to change from the Roots theme to your new child theme directory. Any template file found in your new directory will overwrite the template in Roots.&amp;lt;/ol&amp;gt; 
    
    Now you can start your theme development with an HTML5 bang! Child themes make it much easier to get started and even keep your file structure a big cleaner. 
    
    ## Update WordPress Like A Pro
    
    Yes, you could update WordPress in the admin panel, but you want to do it in a much cooler, easier-to-revert way. With Git, now you can. First, backup your database. Then in the root wordpress directory, update your Git repo by using git fetch:
  
` 
  
    Now merge in any updates from your current branch, or merge in a new branch altogether. This command merges the latest update from the 3.2 branch into your WordPress install:
  
    ``If you have developed WordPress sites for clients this process might sound familiar to you:

  * Get a new client that wants a wordpress site
  * Download the most recent wordpress
  * Find a good current blank wordpress theme to start implementing the design
  * Upload to a staging server to for client to see
  * Client requests changes
  * You make changes on local server, then upload to staging server
  * Repeat last three steps until finished and then you deploy the site to live

After lots of trial and error, I have come up with a process that is more efficient, and allows rapid development of wordpress sites. I use Git, Git Submodules, and WordPress child themes to get going quicker and keep code up to date with minimal effort. (If your not using a &amp;lt;a href=&amp;quot;http://en.wikipedia.org/wiki/Revision_control&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;revision control &amp;lt;/a&amp;gt;system like &amp;lt;a href=&amp;quot;http://git-scm.com/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;Git&amp;lt;/a&amp;gt; or &amp;lt;a href=&amp;quot;http://subversion.tigris.org/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;SVN&amp;lt;/a&amp;gt; for development, then check out &amp;lt;del datetime=&amp;quot;2012-04-22T20:33:39+00:00&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;http://stackoverflow.com/questions/132520/good-excuses-not-to-use-version-control&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;this funny question and answer session on Stack Overflow&amp;lt;/a&amp;gt;&amp;lt;/del&amp;gt; **Update:** Stack Overflow moderators removed the question&amp;amp;#8230; bummer. Check out the funny-ness in the &amp;lt;a href=&amp;quot;http://web.archive.org/web/20100722082534/http://stackoverflow.com/questions/132520/good-excuses-not-to-use-version-control&amp;quot; title=&amp;quot;Why to use version control&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;wayback machine internet archiver&amp;lt;/a&amp;gt; instead)
  



  
For this rapid WordPress development cycle, you will need to have Git installed.

## 1. Get the Most Current WordPress

The wordpress core dev team uses SVN to manage wordpress development. But I want to use Git for speed and easy branching. Fortunately there is a &amp;lt;a href=&amp;quot;https://github.com/WordPress/WordPress&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;great WordPress git clone&amp;lt;/a&amp;gt; that is updated every fifteen minutes. To get the most recent version of WordPress, simply clone that repo to your project directory.

&amp;lt;pre class=&amp;quot;wp-code-highlight prettyprint&amp;quot;&amp;gt;mkdir projectA
git clone https://github.com/markjaquith/WordPress.git ./projectA
cd projectA
git checkout origin/3.2-branch&amp;lt;/pre&amp;gt;

Now you have the most recent version of wordpress, and it will be easier than ever to upgrade wordpress and revert if something goes wrong. But we will get into the upgrade process later.

## 2. Starting with a Quality Blank Theme

To help get your new WordPress project off the ground, let&amp;amp;#8217;s get a quality blank theme that updates regularly. I usually use the &amp;lt;a title=&amp;quot;Roots WordPress Theme&amp;quot; href=&amp;quot;http://www.rootstheme.com/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;Roots theme&amp;lt;/a&amp;gt;, which is a quality HTML5 wordpress theme that updates regularly. To make sure our theme stays up to date with the latest wordpress updates, we will add the Roots theme as a Git Submodule. This allows us to essentially add a git repository inside of another repository. Why do this? Because we can update our theme code to the latest release with a simple Git command, instead of downloading and merging on our own. To add the sub-module, change to your project directory and add the sub-module to the themes folder then initialize it:

&amp;lt;pre class=&amp;quot;wp-code-highlight prettyprint&amp;quot;&amp;gt;cd projectA
git submodule add https://github.com/retlehs/roots.git ./wp-content/themes/roots
git submodule init
git submodule update&amp;lt;/pre&amp;gt;

&amp;lt;i class=&amp;quot;icon-warning-sign&amp;quot;&amp;gt;&amp;lt;/i&amp;gt;**Update:** I have now forked mark&amp;amp;#8217;s wordpress git and added roots as a submodule. You can simply clone or fork my repo to save a step. Get it here: &amp;lt;a title=&amp;quot;Clint Berry&#39;s Github Account&amp;quot; href=&amp;quot;https://github.com/clintberry/WordPress&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;https://github.com/clintberry/WordPress&amp;lt;/a&amp;gt; Make sure to clone recursive to get the roots theme. This repo updates nightly to the latest wordpress and roots release.

Now you have a quality blank theme installed into your git repo as a sub-module.

## 3. Adding Your Custom Design (WordPress Child Theme)

Since we have added the new blank theme as a git submodule, we don&amp;amp;#8217;t want to edit that theme directly. This could cause problems when/if we want to update our code base for the theme. To better avoid update problems, we can use the often-under-utilized-wordpress feature called child themes. Child themes allow you essentially &amp;amp;#8220;inherit&amp;amp;#8221; all the functionality of a &amp;amp;#8220;base&amp;amp;#8221; theme. In this case, we will create a child theme &amp;amp;#8220;MyTheme&amp;amp;#8221; that will have access to all the functionality of our base theme &amp;amp;#8220;Roots&amp;amp;#8221;.

Creating child themes in wordpress is simple:

  1. Add a new folder to your wordpress themes directory called &amp;amp;#8220;MyTheme&amp;amp;#8221;
  2. Create a file called &amp;amp;#8220;style.css&amp;amp;#8221; with the following text: &amp;lt;pre class=&amp;quot;wp-code-highlight prettyprint&amp;quot;&amp;gt;/*
Theme Name:     MyProject
Theme URI:      http://clintberry.com/
Description:    Roots Child Theme
Author:         Clint Berry
Author URI:     http://clintberry.com
Template:       roots
Version:        0.1.0
*/

@import url(&amp;quot;../twentyten/style.css&amp;quot;);
&amp;lt;/pre&amp;gt;
    
    Take notice of the &amp;amp;#8220;Template: roots&amp;amp;#8221; field. That is what lets WordPress know that this is a child theme and to inherit all of the roots functionality. Also since this style.css file overwrites the roots css file, we import the css file from roots. &amp;lt;/li&amp;gt; 
    
      * Create a functions.php file to add any custom WordPress functions. WordPress will load your new functions.php file along with the Roots functions.php file, so all is well.
      * Copy any template file you want to change from the Roots theme to your new child theme directory. Any template file found in your new directory will overwrite the template in Roots.&amp;lt;/ol&amp;gt; 
    
    Now you can start your theme development with an HTML5 bang! Child themes make it much easier to get started and even keep your file structure a big cleaner. 
    
    ## Update WordPress Like A Pro
    
    Yes, you could update WordPress in the admin panel, but you want to do it in a much cooler, easier-to-revert way. With Git, now you can. First, backup your database. Then in the root wordpress directory, update your Git repo by using git fetch:
  
    `If you have developed WordPress sites for clients this process might sound familiar to you:

  * Get a new client that wants a wordpress site
  * Download the most recent wordpress
  * Find a good current blank wordpress theme to start implementing the design
  * Upload to a staging server to for client to see
  * Client requests changes
  * You make changes on local server, then upload to staging server
  * Repeat last three steps until finished and then you deploy the site to live

After lots of trial and error, I have come up with a process that is more efficient, and allows rapid development of wordpress sites. I use Git, Git Submodules, and WordPress child themes to get going quicker and keep code up to date with minimal effort. (If your not using a &amp;lt;a href=&amp;quot;http://en.wikipedia.org/wiki/Revision_control&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;revision control &amp;lt;/a&amp;gt;system like &amp;lt;a href=&amp;quot;http://git-scm.com/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;Git&amp;lt;/a&amp;gt; or &amp;lt;a href=&amp;quot;http://subversion.tigris.org/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;SVN&amp;lt;/a&amp;gt; for development, then check out &amp;lt;del datetime=&amp;quot;2012-04-22T20:33:39+00:00&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;http://stackoverflow.com/questions/132520/good-excuses-not-to-use-version-control&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;this funny question and answer session on Stack Overflow&amp;lt;/a&amp;gt;&amp;lt;/del&amp;gt; **Update:** Stack Overflow moderators removed the question&amp;amp;#8230; bummer. Check out the funny-ness in the &amp;lt;a href=&amp;quot;http://web.archive.org/web/20100722082534/http://stackoverflow.com/questions/132520/good-excuses-not-to-use-version-control&amp;quot; title=&amp;quot;Why to use version control&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;wayback machine internet archiver&amp;lt;/a&amp;gt; instead)
  



  
For this rapid WordPress development cycle, you will need to have Git installed.

## 1. Get the Most Current WordPress

The wordpress core dev team uses SVN to manage wordpress development. But I want to use Git for speed and easy branching. Fortunately there is a &amp;lt;a href=&amp;quot;https://github.com/WordPress/WordPress&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;great WordPress git clone&amp;lt;/a&amp;gt; that is updated every fifteen minutes. To get the most recent version of WordPress, simply clone that repo to your project directory.

&amp;lt;pre class=&amp;quot;wp-code-highlight prettyprint&amp;quot;&amp;gt;mkdir projectA
git clone https://github.com/markjaquith/WordPress.git ./projectA
cd projectA
git checkout origin/3.2-branch&amp;lt;/pre&amp;gt;

Now you have the most recent version of wordpress, and it will be easier than ever to upgrade wordpress and revert if something goes wrong. But we will get into the upgrade process later.

## 2. Starting with a Quality Blank Theme

To help get your new WordPress project off the ground, let&amp;amp;#8217;s get a quality blank theme that updates regularly. I usually use the &amp;lt;a title=&amp;quot;Roots WordPress Theme&amp;quot; href=&amp;quot;http://www.rootstheme.com/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;Roots theme&amp;lt;/a&amp;gt;, which is a quality HTML5 wordpress theme that updates regularly. To make sure our theme stays up to date with the latest wordpress updates, we will add the Roots theme as a Git Submodule. This allows us to essentially add a git repository inside of another repository. Why do this? Because we can update our theme code to the latest release with a simple Git command, instead of downloading and merging on our own. To add the sub-module, change to your project directory and add the sub-module to the themes folder then initialize it:

&amp;lt;pre class=&amp;quot;wp-code-highlight prettyprint&amp;quot;&amp;gt;cd projectA
git submodule add https://github.com/retlehs/roots.git ./wp-content/themes/roots
git submodule init
git submodule update&amp;lt;/pre&amp;gt;

&amp;lt;i class=&amp;quot;icon-warning-sign&amp;quot;&amp;gt;&amp;lt;/i&amp;gt;**Update:** I have now forked mark&amp;amp;#8217;s wordpress git and added roots as a submodule. You can simply clone or fork my repo to save a step. Get it here: &amp;lt;a title=&amp;quot;Clint Berry&#39;s Github Account&amp;quot; href=&amp;quot;https://github.com/clintberry/WordPress&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;https://github.com/clintberry/WordPress&amp;lt;/a&amp;gt; Make sure to clone recursive to get the roots theme. This repo updates nightly to the latest wordpress and roots release.

Now you have a quality blank theme installed into your git repo as a sub-module.

## 3. Adding Your Custom Design (WordPress Child Theme)

Since we have added the new blank theme as a git submodule, we don&amp;amp;#8217;t want to edit that theme directly. This could cause problems when/if we want to update our code base for the theme. To better avoid update problems, we can use the often-under-utilized-wordpress feature called child themes. Child themes allow you essentially &amp;amp;#8220;inherit&amp;amp;#8221; all the functionality of a &amp;amp;#8220;base&amp;amp;#8221; theme. In this case, we will create a child theme &amp;amp;#8220;MyTheme&amp;amp;#8221; that will have access to all the functionality of our base theme &amp;amp;#8220;Roots&amp;amp;#8221;.

Creating child themes in wordpress is simple:

  1. Add a new folder to your wordpress themes directory called &amp;amp;#8220;MyTheme&amp;amp;#8221;
  2. Create a file called &amp;amp;#8220;style.css&amp;amp;#8221; with the following text: &amp;lt;pre class=&amp;quot;wp-code-highlight prettyprint&amp;quot;&amp;gt;/*
Theme Name:     MyProject
Theme URI:      http://clintberry.com/
Description:    Roots Child Theme
Author:         Clint Berry
Author URI:     http://clintberry.com
Template:       roots
Version:        0.1.0
*/

@import url(&amp;quot;../twentyten/style.css&amp;quot;);
&amp;lt;/pre&amp;gt;
    
    Take notice of the &amp;amp;#8220;Template: roots&amp;amp;#8221; field. That is what lets WordPress know that this is a child theme and to inherit all of the roots functionality. Also since this style.css file overwrites the roots css file, we import the css file from roots. &amp;lt;/li&amp;gt; 
    
      * Create a functions.php file to add any custom WordPress functions. WordPress will load your new functions.php file along with the Roots functions.php file, so all is well.
      * Copy any template file you want to change from the Roots theme to your new child theme directory. Any template file found in your new directory will overwrite the template in Roots.&amp;lt;/ol&amp;gt; 
    
    Now you can start your theme development with an HTML5 bang! Child themes make it much easier to get started and even keep your file structure a big cleaner. 
    
    ## Update WordPress Like A Pro
    
    Yes, you could update WordPress in the admin panel, but you want to do it in a much cooler, easier-to-revert way. With Git, now you can. First, backup your database. Then in the root wordpress directory, update your Git repo by using git fetch:
  
` 
  
    Now merge in any updates from your current branch, or merge in a new branch altogether. This command merges the latest update from the 3.2 branch into your WordPress install:
  
`` 
  
    Now you have the most recent version of WordPress. It is a beautiful thing.
  
    Don&amp;amp;#8217;t worry! If it breaks something, it is easy to go back. First enter:
  
    ```If you have developed WordPress sites for clients this process might sound familiar to you:

  * Get a new client that wants a wordpress site
  * Download the most recent wordpress
  * Find a good current blank wordpress theme to start implementing the design
  * Upload to a staging server to for client to see
  * Client requests changes
  * You make changes on local server, then upload to staging server
  * Repeat last three steps until finished and then you deploy the site to live

After lots of trial and error, I have come up with a process that is more efficient, and allows rapid development of wordpress sites. I use Git, Git Submodules, and WordPress child themes to get going quicker and keep code up to date with minimal effort. (If your not using a &amp;lt;a href=&amp;quot;http://en.wikipedia.org/wiki/Revision_control&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;revision control &amp;lt;/a&amp;gt;system like &amp;lt;a href=&amp;quot;http://git-scm.com/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;Git&amp;lt;/a&amp;gt; or &amp;lt;a href=&amp;quot;http://subversion.tigris.org/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;SVN&amp;lt;/a&amp;gt; for development, then check out &amp;lt;del datetime=&amp;quot;2012-04-22T20:33:39+00:00&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;http://stackoverflow.com/questions/132520/good-excuses-not-to-use-version-control&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;this funny question and answer session on Stack Overflow&amp;lt;/a&amp;gt;&amp;lt;/del&amp;gt; **Update:** Stack Overflow moderators removed the question&amp;amp;#8230; bummer. Check out the funny-ness in the &amp;lt;a href=&amp;quot;http://web.archive.org/web/20100722082534/http://stackoverflow.com/questions/132520/good-excuses-not-to-use-version-control&amp;quot; title=&amp;quot;Why to use version control&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;wayback machine internet archiver&amp;lt;/a&amp;gt; instead)
  



  
For this rapid WordPress development cycle, you will need to have Git installed.

## 1. Get the Most Current WordPress

The wordpress core dev team uses SVN to manage wordpress development. But I want to use Git for speed and easy branching. Fortunately there is a &amp;lt;a href=&amp;quot;https://github.com/WordPress/WordPress&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;great WordPress git clone&amp;lt;/a&amp;gt; that is updated every fifteen minutes. To get the most recent version of WordPress, simply clone that repo to your project directory.

&amp;lt;pre class=&amp;quot;wp-code-highlight prettyprint&amp;quot;&amp;gt;mkdir projectA
git clone https://github.com/markjaquith/WordPress.git ./projectA
cd projectA
git checkout origin/3.2-branch&amp;lt;/pre&amp;gt;

Now you have the most recent version of wordpress, and it will be easier than ever to upgrade wordpress and revert if something goes wrong. But we will get into the upgrade process later.

## 2. Starting with a Quality Blank Theme

To help get your new WordPress project off the ground, let&amp;amp;#8217;s get a quality blank theme that updates regularly. I usually use the &amp;lt;a title=&amp;quot;Roots WordPress Theme&amp;quot; href=&amp;quot;http://www.rootstheme.com/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;Roots theme&amp;lt;/a&amp;gt;, which is a quality HTML5 wordpress theme that updates regularly. To make sure our theme stays up to date with the latest wordpress updates, we will add the Roots theme as a Git Submodule. This allows us to essentially add a git repository inside of another repository. Why do this? Because we can update our theme code to the latest release with a simple Git command, instead of downloading and merging on our own. To add the sub-module, change to your project directory and add the sub-module to the themes folder then initialize it:

&amp;lt;pre class=&amp;quot;wp-code-highlight prettyprint&amp;quot;&amp;gt;cd projectA
git submodule add https://github.com/retlehs/roots.git ./wp-content/themes/roots
git submodule init
git submodule update&amp;lt;/pre&amp;gt;

&amp;lt;i class=&amp;quot;icon-warning-sign&amp;quot;&amp;gt;&amp;lt;/i&amp;gt;**Update:** I have now forked mark&amp;amp;#8217;s wordpress git and added roots as a submodule. You can simply clone or fork my repo to save a step. Get it here: &amp;lt;a title=&amp;quot;Clint Berry&#39;s Github Account&amp;quot; href=&amp;quot;https://github.com/clintberry/WordPress&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;https://github.com/clintberry/WordPress&amp;lt;/a&amp;gt; Make sure to clone recursive to get the roots theme. This repo updates nightly to the latest wordpress and roots release.

Now you have a quality blank theme installed into your git repo as a sub-module.

## 3. Adding Your Custom Design (WordPress Child Theme)

Since we have added the new blank theme as a git submodule, we don&amp;amp;#8217;t want to edit that theme directly. This could cause problems when/if we want to update our code base for the theme. To better avoid update problems, we can use the often-under-utilized-wordpress feature called child themes. Child themes allow you essentially &amp;amp;#8220;inherit&amp;amp;#8221; all the functionality of a &amp;amp;#8220;base&amp;amp;#8221; theme. In this case, we will create a child theme &amp;amp;#8220;MyTheme&amp;amp;#8221; that will have access to all the functionality of our base theme &amp;amp;#8220;Roots&amp;amp;#8221;.

Creating child themes in wordpress is simple:

  1. Add a new folder to your wordpress themes directory called &amp;amp;#8220;MyTheme&amp;amp;#8221;
  2. Create a file called &amp;amp;#8220;style.css&amp;amp;#8221; with the following text: &amp;lt;pre class=&amp;quot;wp-code-highlight prettyprint&amp;quot;&amp;gt;/*
Theme Name:     MyProject
Theme URI:      http://clintberry.com/
Description:    Roots Child Theme
Author:         Clint Berry
Author URI:     http://clintberry.com
Template:       roots
Version:        0.1.0
*/

@import url(&amp;quot;../twentyten/style.css&amp;quot;);
&amp;lt;/pre&amp;gt;
    
    Take notice of the &amp;amp;#8220;Template: roots&amp;amp;#8221; field. That is what lets WordPress know that this is a child theme and to inherit all of the roots functionality. Also since this style.css file overwrites the roots css file, we import the css file from roots. &amp;lt;/li&amp;gt; 
    
      * Create a functions.php file to add any custom WordPress functions. WordPress will load your new functions.php file along with the Roots functions.php file, so all is well.
      * Copy any template file you want to change from the Roots theme to your new child theme directory. Any template file found in your new directory will overwrite the template in Roots.&amp;lt;/ol&amp;gt; 
    
    Now you can start your theme development with an HTML5 bang! Child themes make it much easier to get started and even keep your file structure a big cleaner. 
    
    ## Update WordPress Like A Pro
    
    Yes, you could update WordPress in the admin panel, but you want to do it in a much cooler, easier-to-revert way. With Git, now you can. First, backup your database. Then in the root wordpress directory, update your Git repo by using git fetch:
  
    `If you have developed WordPress sites for clients this process might sound familiar to you:

  * Get a new client that wants a wordpress site
  * Download the most recent wordpress
  * Find a good current blank wordpress theme to start implementing the design
  * Upload to a staging server to for client to see
  * Client requests changes
  * You make changes on local server, then upload to staging server
  * Repeat last three steps until finished and then you deploy the site to live

After lots of trial and error, I have come up with a process that is more efficient, and allows rapid development of wordpress sites. I use Git, Git Submodules, and WordPress child themes to get going quicker and keep code up to date with minimal effort. (If your not using a &amp;lt;a href=&amp;quot;http://en.wikipedia.org/wiki/Revision_control&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;revision control &amp;lt;/a&amp;gt;system like &amp;lt;a href=&amp;quot;http://git-scm.com/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;Git&amp;lt;/a&amp;gt; or &amp;lt;a href=&amp;quot;http://subversion.tigris.org/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;SVN&amp;lt;/a&amp;gt; for development, then check out &amp;lt;del datetime=&amp;quot;2012-04-22T20:33:39+00:00&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;http://stackoverflow.com/questions/132520/good-excuses-not-to-use-version-control&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;this funny question and answer session on Stack Overflow&amp;lt;/a&amp;gt;&amp;lt;/del&amp;gt; **Update:** Stack Overflow moderators removed the question&amp;amp;#8230; bummer. Check out the funny-ness in the &amp;lt;a href=&amp;quot;http://web.archive.org/web/20100722082534/http://stackoverflow.com/questions/132520/good-excuses-not-to-use-version-control&amp;quot; title=&amp;quot;Why to use version control&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;wayback machine internet archiver&amp;lt;/a&amp;gt; instead)
  



  
For this rapid WordPress development cycle, you will need to have Git installed.

## 1. Get the Most Current WordPress

The wordpress core dev team uses SVN to manage wordpress development. But I want to use Git for speed and easy branching. Fortunately there is a &amp;lt;a href=&amp;quot;https://github.com/WordPress/WordPress&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;great WordPress git clone&amp;lt;/a&amp;gt; that is updated every fifteen minutes. To get the most recent version of WordPress, simply clone that repo to your project directory.

&amp;lt;pre class=&amp;quot;wp-code-highlight prettyprint&amp;quot;&amp;gt;mkdir projectA
git clone https://github.com/markjaquith/WordPress.git ./projectA
cd projectA
git checkout origin/3.2-branch&amp;lt;/pre&amp;gt;

Now you have the most recent version of wordpress, and it will be easier than ever to upgrade wordpress and revert if something goes wrong. But we will get into the upgrade process later.

## 2. Starting with a Quality Blank Theme

To help get your new WordPress project off the ground, let&amp;amp;#8217;s get a quality blank theme that updates regularly. I usually use the &amp;lt;a title=&amp;quot;Roots WordPress Theme&amp;quot; href=&amp;quot;http://www.rootstheme.com/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;Roots theme&amp;lt;/a&amp;gt;, which is a quality HTML5 wordpress theme that updates regularly. To make sure our theme stays up to date with the latest wordpress updates, we will add the Roots theme as a Git Submodule. This allows us to essentially add a git repository inside of another repository. Why do this? Because we can update our theme code to the latest release with a simple Git command, instead of downloading and merging on our own. To add the sub-module, change to your project directory and add the sub-module to the themes folder then initialize it:

&amp;lt;pre class=&amp;quot;wp-code-highlight prettyprint&amp;quot;&amp;gt;cd projectA
git submodule add https://github.com/retlehs/roots.git ./wp-content/themes/roots
git submodule init
git submodule update&amp;lt;/pre&amp;gt;

&amp;lt;i class=&amp;quot;icon-warning-sign&amp;quot;&amp;gt;&amp;lt;/i&amp;gt;**Update:** I have now forked mark&amp;amp;#8217;s wordpress git and added roots as a submodule. You can simply clone or fork my repo to save a step. Get it here: &amp;lt;a title=&amp;quot;Clint Berry&#39;s Github Account&amp;quot; href=&amp;quot;https://github.com/clintberry/WordPress&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;https://github.com/clintberry/WordPress&amp;lt;/a&amp;gt; Make sure to clone recursive to get the roots theme. This repo updates nightly to the latest wordpress and roots release.

Now you have a quality blank theme installed into your git repo as a sub-module.

## 3. Adding Your Custom Design (WordPress Child Theme)

Since we have added the new blank theme as a git submodule, we don&amp;amp;#8217;t want to edit that theme directly. This could cause problems when/if we want to update our code base for the theme. To better avoid update problems, we can use the often-under-utilized-wordpress feature called child themes. Child themes allow you essentially &amp;amp;#8220;inherit&amp;amp;#8221; all the functionality of a &amp;amp;#8220;base&amp;amp;#8221; theme. In this case, we will create a child theme &amp;amp;#8220;MyTheme&amp;amp;#8221; that will have access to all the functionality of our base theme &amp;amp;#8220;Roots&amp;amp;#8221;.

Creating child themes in wordpress is simple:

  1. Add a new folder to your wordpress themes directory called &amp;amp;#8220;MyTheme&amp;amp;#8221;
  2. Create a file called &amp;amp;#8220;style.css&amp;amp;#8221; with the following text: &amp;lt;pre class=&amp;quot;wp-code-highlight prettyprint&amp;quot;&amp;gt;/*
Theme Name:     MyProject
Theme URI:      http://clintberry.com/
Description:    Roots Child Theme
Author:         Clint Berry
Author URI:     http://clintberry.com
Template:       roots
Version:        0.1.0
*/

@import url(&amp;quot;../twentyten/style.css&amp;quot;);
&amp;lt;/pre&amp;gt;
    
    Take notice of the &amp;amp;#8220;Template: roots&amp;amp;#8221; field. That is what lets WordPress know that this is a child theme and to inherit all of the roots functionality. Also since this style.css file overwrites the roots css file, we import the css file from roots. &amp;lt;/li&amp;gt; 
    
      * Create a functions.php file to add any custom WordPress functions. WordPress will load your new functions.php file along with the Roots functions.php file, so all is well.
      * Copy any template file you want to change from the Roots theme to your new child theme directory. Any template file found in your new directory will overwrite the template in Roots.&amp;lt;/ol&amp;gt; 
    
    Now you can start your theme development with an HTML5 bang! Child themes make it much easier to get started and even keep your file structure a big cleaner. 
    
    ## Update WordPress Like A Pro
    
    Yes, you could update WordPress in the admin panel, but you want to do it in a much cooler, easier-to-revert way. With Git, now you can. First, backup your database. Then in the root wordpress directory, update your Git repo by using git fetch:
  
` 
  
    Now merge in any updates from your current branch, or merge in a new branch altogether. This command merges the latest update from the 3.2 branch into your WordPress install:
  
    ``If you have developed WordPress sites for clients this process might sound familiar to you:

  * Get a new client that wants a wordpress site
  * Download the most recent wordpress
  * Find a good current blank wordpress theme to start implementing the design
  * Upload to a staging server to for client to see
  * Client requests changes
  * You make changes on local server, then upload to staging server
  * Repeat last three steps until finished and then you deploy the site to live

After lots of trial and error, I have come up with a process that is more efficient, and allows rapid development of wordpress sites. I use Git, Git Submodules, and WordPress child themes to get going quicker and keep code up to date with minimal effort. (If your not using a &amp;lt;a href=&amp;quot;http://en.wikipedia.org/wiki/Revision_control&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;revision control &amp;lt;/a&amp;gt;system like &amp;lt;a href=&amp;quot;http://git-scm.com/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;Git&amp;lt;/a&amp;gt; or &amp;lt;a href=&amp;quot;http://subversion.tigris.org/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;SVN&amp;lt;/a&amp;gt; for development, then check out &amp;lt;del datetime=&amp;quot;2012-04-22T20:33:39+00:00&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;http://stackoverflow.com/questions/132520/good-excuses-not-to-use-version-control&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;this funny question and answer session on Stack Overflow&amp;lt;/a&amp;gt;&amp;lt;/del&amp;gt; **Update:** Stack Overflow moderators removed the question&amp;amp;#8230; bummer. Check out the funny-ness in the &amp;lt;a href=&amp;quot;http://web.archive.org/web/20100722082534/http://stackoverflow.com/questions/132520/good-excuses-not-to-use-version-control&amp;quot; title=&amp;quot;Why to use version control&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;wayback machine internet archiver&amp;lt;/a&amp;gt; instead)
  



  
For this rapid WordPress development cycle, you will need to have Git installed.

## 1. Get the Most Current WordPress

The wordpress core dev team uses SVN to manage wordpress development. But I want to use Git for speed and easy branching. Fortunately there is a &amp;lt;a href=&amp;quot;https://github.com/WordPress/WordPress&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;great WordPress git clone&amp;lt;/a&amp;gt; that is updated every fifteen minutes. To get the most recent version of WordPress, simply clone that repo to your project directory.

&amp;lt;pre class=&amp;quot;wp-code-highlight prettyprint&amp;quot;&amp;gt;mkdir projectA
git clone https://github.com/markjaquith/WordPress.git ./projectA
cd projectA
git checkout origin/3.2-branch&amp;lt;/pre&amp;gt;

Now you have the most recent version of wordpress, and it will be easier than ever to upgrade wordpress and revert if something goes wrong. But we will get into the upgrade process later.

## 2. Starting with a Quality Blank Theme

To help get your new WordPress project off the ground, let&amp;amp;#8217;s get a quality blank theme that updates regularly. I usually use the &amp;lt;a title=&amp;quot;Roots WordPress Theme&amp;quot; href=&amp;quot;http://www.rootstheme.com/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;Roots theme&amp;lt;/a&amp;gt;, which is a quality HTML5 wordpress theme that updates regularly. To make sure our theme stays up to date with the latest wordpress updates, we will add the Roots theme as a Git Submodule. This allows us to essentially add a git repository inside of another repository. Why do this? Because we can update our theme code to the latest release with a simple Git command, instead of downloading and merging on our own. To add the sub-module, change to your project directory and add the sub-module to the themes folder then initialize it:

&amp;lt;pre class=&amp;quot;wp-code-highlight prettyprint&amp;quot;&amp;gt;cd projectA
git submodule add https://github.com/retlehs/roots.git ./wp-content/themes/roots
git submodule init
git submodule update&amp;lt;/pre&amp;gt;

&amp;lt;i class=&amp;quot;icon-warning-sign&amp;quot;&amp;gt;&amp;lt;/i&amp;gt;**Update:** I have now forked mark&amp;amp;#8217;s wordpress git and added roots as a submodule. You can simply clone or fork my repo to save a step. Get it here: &amp;lt;a title=&amp;quot;Clint Berry&#39;s Github Account&amp;quot; href=&amp;quot;https://github.com/clintberry/WordPress&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;https://github.com/clintberry/WordPress&amp;lt;/a&amp;gt; Make sure to clone recursive to get the roots theme. This repo updates nightly to the latest wordpress and roots release.

Now you have a quality blank theme installed into your git repo as a sub-module.

## 3. Adding Your Custom Design (WordPress Child Theme)

Since we have added the new blank theme as a git submodule, we don&amp;amp;#8217;t want to edit that theme directly. This could cause problems when/if we want to update our code base for the theme. To better avoid update problems, we can use the often-under-utilized-wordpress feature called child themes. Child themes allow you essentially &amp;amp;#8220;inherit&amp;amp;#8221; all the functionality of a &amp;amp;#8220;base&amp;amp;#8221; theme. In this case, we will create a child theme &amp;amp;#8220;MyTheme&amp;amp;#8221; that will have access to all the functionality of our base theme &amp;amp;#8220;Roots&amp;amp;#8221;.

Creating child themes in wordpress is simple:

  1. Add a new folder to your wordpress themes directory called &amp;amp;#8220;MyTheme&amp;amp;#8221;
  2. Create a file called &amp;amp;#8220;style.css&amp;amp;#8221; with the following text: &amp;lt;pre class=&amp;quot;wp-code-highlight prettyprint&amp;quot;&amp;gt;/*
Theme Name:     MyProject
Theme URI:      http://clintberry.com/
Description:    Roots Child Theme
Author:         Clint Berry
Author URI:     http://clintberry.com
Template:       roots
Version:        0.1.0
*/

@import url(&amp;quot;../twentyten/style.css&amp;quot;);
&amp;lt;/pre&amp;gt;
    
    Take notice of the &amp;amp;#8220;Template: roots&amp;amp;#8221; field. That is what lets WordPress know that this is a child theme and to inherit all of the roots functionality. Also since this style.css file overwrites the roots css file, we import the css file from roots. &amp;lt;/li&amp;gt; 
    
      * Create a functions.php file to add any custom WordPress functions. WordPress will load your new functions.php file along with the Roots functions.php file, so all is well.
      * Copy any template file you want to change from the Roots theme to your new child theme directory. Any template file found in your new directory will overwrite the template in Roots.&amp;lt;/ol&amp;gt; 
    
    Now you can start your theme development with an HTML5 bang! Child themes make it much easier to get started and even keep your file structure a big cleaner. 
    
    ## Update WordPress Like A Pro
    
    Yes, you could update WordPress in the admin panel, but you want to do it in a much cooler, easier-to-revert way. With Git, now you can. First, backup your database. Then in the root wordpress directory, update your Git repo by using git fetch:
  
    `If you have developed WordPress sites for clients this process might sound familiar to you:

  * Get a new client that wants a wordpress site
  * Download the most recent wordpress
  * Find a good current blank wordpress theme to start implementing the design
  * Upload to a staging server to for client to see
  * Client requests changes
  * You make changes on local server, then upload to staging server
  * Repeat last three steps until finished and then you deploy the site to live

After lots of trial and error, I have come up with a process that is more efficient, and allows rapid development of wordpress sites. I use Git, Git Submodules, and WordPress child themes to get going quicker and keep code up to date with minimal effort. (If your not using a &amp;lt;a href=&amp;quot;http://en.wikipedia.org/wiki/Revision_control&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;revision control &amp;lt;/a&amp;gt;system like &amp;lt;a href=&amp;quot;http://git-scm.com/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;Git&amp;lt;/a&amp;gt; or &amp;lt;a href=&amp;quot;http://subversion.tigris.org/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;SVN&amp;lt;/a&amp;gt; for development, then check out &amp;lt;del datetime=&amp;quot;2012-04-22T20:33:39+00:00&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;http://stackoverflow.com/questions/132520/good-excuses-not-to-use-version-control&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;this funny question and answer session on Stack Overflow&amp;lt;/a&amp;gt;&amp;lt;/del&amp;gt; **Update:** Stack Overflow moderators removed the question&amp;amp;#8230; bummer. Check out the funny-ness in the &amp;lt;a href=&amp;quot;http://web.archive.org/web/20100722082534/http://stackoverflow.com/questions/132520/good-excuses-not-to-use-version-control&amp;quot; title=&amp;quot;Why to use version control&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;wayback machine internet archiver&amp;lt;/a&amp;gt; instead)
  



  
For this rapid WordPress development cycle, you will need to have Git installed.

## 1. Get the Most Current WordPress

The wordpress core dev team uses SVN to manage wordpress development. But I want to use Git for speed and easy branching. Fortunately there is a &amp;lt;a href=&amp;quot;https://github.com/WordPress/WordPress&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;great WordPress git clone&amp;lt;/a&amp;gt; that is updated every fifteen minutes. To get the most recent version of WordPress, simply clone that repo to your project directory.

&amp;lt;pre class=&amp;quot;wp-code-highlight prettyprint&amp;quot;&amp;gt;mkdir projectA
git clone https://github.com/markjaquith/WordPress.git ./projectA
cd projectA
git checkout origin/3.2-branch&amp;lt;/pre&amp;gt;

Now you have the most recent version of wordpress, and it will be easier than ever to upgrade wordpress and revert if something goes wrong. But we will get into the upgrade process later.

## 2. Starting with a Quality Blank Theme

To help get your new WordPress project off the ground, let&amp;amp;#8217;s get a quality blank theme that updates regularly. I usually use the &amp;lt;a title=&amp;quot;Roots WordPress Theme&amp;quot; href=&amp;quot;http://www.rootstheme.com/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;Roots theme&amp;lt;/a&amp;gt;, which is a quality HTML5 wordpress theme that updates regularly. To make sure our theme stays up to date with the latest wordpress updates, we will add the Roots theme as a Git Submodule. This allows us to essentially add a git repository inside of another repository. Why do this? Because we can update our theme code to the latest release with a simple Git command, instead of downloading and merging on our own. To add the sub-module, change to your project directory and add the sub-module to the themes folder then initialize it:

&amp;lt;pre class=&amp;quot;wp-code-highlight prettyprint&amp;quot;&amp;gt;cd projectA
git submodule add https://github.com/retlehs/roots.git ./wp-content/themes/roots
git submodule init
git submodule update&amp;lt;/pre&amp;gt;

&amp;lt;i class=&amp;quot;icon-warning-sign&amp;quot;&amp;gt;&amp;lt;/i&amp;gt;**Update:** I have now forked mark&amp;amp;#8217;s wordpress git and added roots as a submodule. You can simply clone or fork my repo to save a step. Get it here: &amp;lt;a title=&amp;quot;Clint Berry&#39;s Github Account&amp;quot; href=&amp;quot;https://github.com/clintberry/WordPress&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;https://github.com/clintberry/WordPress&amp;lt;/a&amp;gt; Make sure to clone recursive to get the roots theme. This repo updates nightly to the latest wordpress and roots release.

Now you have a quality blank theme installed into your git repo as a sub-module.

## 3. Adding Your Custom Design (WordPress Child Theme)

Since we have added the new blank theme as a git submodule, we don&amp;amp;#8217;t want to edit that theme directly. This could cause problems when/if we want to update our code base for the theme. To better avoid update problems, we can use the often-under-utilized-wordpress feature called child themes. Child themes allow you essentially &amp;amp;#8220;inherit&amp;amp;#8221; all the functionality of a &amp;amp;#8220;base&amp;amp;#8221; theme. In this case, we will create a child theme &amp;amp;#8220;MyTheme&amp;amp;#8221; that will have access to all the functionality of our base theme &amp;amp;#8220;Roots&amp;amp;#8221;.

Creating child themes in wordpress is simple:

  1. Add a new folder to your wordpress themes directory called &amp;amp;#8220;MyTheme&amp;amp;#8221;
  2. Create a file called &amp;amp;#8220;style.css&amp;amp;#8221; with the following text: &amp;lt;pre class=&amp;quot;wp-code-highlight prettyprint&amp;quot;&amp;gt;/*
Theme Name:     MyProject
Theme URI:      http://clintberry.com/
Description:    Roots Child Theme
Author:         Clint Berry
Author URI:     http://clintberry.com
Template:       roots
Version:        0.1.0
*/

@import url(&amp;quot;../twentyten/style.css&amp;quot;);
&amp;lt;/pre&amp;gt;
    
    Take notice of the &amp;amp;#8220;Template: roots&amp;amp;#8221; field. That is what lets WordPress know that this is a child theme and to inherit all of the roots functionality. Also since this style.css file overwrites the roots css file, we import the css file from roots. &amp;lt;/li&amp;gt; 
    
      * Create a functions.php file to add any custom WordPress functions. WordPress will load your new functions.php file along with the Roots functions.php file, so all is well.
      * Copy any template file you want to change from the Roots theme to your new child theme directory. Any template file found in your new directory will overwrite the template in Roots.&amp;lt;/ol&amp;gt; 
    
    Now you can start your theme development with an HTML5 bang! Child themes make it much easier to get started and even keep your file structure a big cleaner. 
    
    ## Update WordPress Like A Pro
    
    Yes, you could update WordPress in the admin panel, but you want to do it in a much cooler, easier-to-revert way. With Git, now you can. First, backup your database. Then in the root wordpress directory, update your Git repo by using git fetch:
  
` 
  
    Now merge in any updates from your current branch, or merge in a new branch altogether. This command merges the latest update from the 3.2 branch into your WordPress install:
  
`` 
  
    Now you have the most recent version of WordPress. It is a beautiful thing.
  
    Don&amp;amp;#8217;t worry! If it breaks something, it is easy to go back. First enter:
  
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;This will output the most recent changes to your repo. Look for your last change which was merging. It will have a line like this:

&amp;lt;pre class=&amp;quot;wp-code-highlight prettyprint&amp;quot;&amp;gt;Merge remote branch &amp;amp;#039;upstream/master&amp;amp;#039;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/pre&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Take the commit sha (the long number right after the word commit) that is located on the commit before the Merge line. Take that sha and enter the command:
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;````&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Now restore your database and you are back in action.

## Easier WordPress Deployment

Deploying a WordPress site has always been a thorn in my side. Currently, I am developing a plugin for much easier deployment, but for now things are a bit hairy. The nice thing about git is keeping your code base up to date is much easier. Unfortunately, Git doesn&amp;amp;#8217;t help much with the database side of things, so we will focus on just the code base for now. 

#### Deploy Using Git Clone

Deploying with Git Clone is the easiest way to get your code installed on a different server. All you have to do is push your repo to a remote repository (like github) and then clone it directly on the live server. This allows easy updating in the future as well since a simple git pull is all that is required to get the most recent code base. If you don&amp;amp;#8217;t have SSH access or if the server you are deploying to doesn&amp;amp;#8217;t have Git, then this method won&amp;amp;#8217;t work.

#### Old School FTP

For a good guide on deploying the old fashioned way, as well as deploying the database, see &amp;lt;a href=&amp;quot;http://www.codemyownroad.com/13-steps-to-deploy-wordpress-from-your-localhost-to-a-live-web-server/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;This Post&amp;lt;/a&amp;gt;

I hope this helps getting your WordPress sites off the ground quicker and easier! As always, any comments or suggestions are welcome.
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>