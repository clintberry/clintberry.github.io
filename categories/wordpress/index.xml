<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Wordpress on Clint Berry</title>
    <link>http://clintberry.com/categories/wordpress/</link>
    <description>Recent content in Wordpress on Clint Berry</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 02 Feb 2012 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://clintberry.com/categories/wordpress/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Sublime Text 2 for PHP &amp; WordPress Development</title>
      <link>http://clintberry.com/2012/sublime-text-2-php-symfony-development/</link>
      <pubDate>Thu, 02 Feb 2012 00:00:00 +0000</pubDate>
      
      <guid>http://clintberry.com/2012/sublime-text-2-php-symfony-development/</guid>
      <description>

&lt;p&gt;Sublime Text 2 is an amazing code editor that I started using on the recommendation of a friend. I fell in love and haven&amp;#8217;t looked back. Here are some recomendations for setting up Sublime Text 2 for PHP and WordPress development.&lt;/p&gt;

&lt;h3 id=&#34;why-is-sublime-text-2-awesome&#34;&gt;Why is Sublime Text 2 Awesome?&lt;/h3&gt;

&lt;p&gt;Where do I start&amp;#8230; Here are some of my favorite features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It is light weight. The download size is under 10 megs and it runs fast&lt;/li&gt;
&lt;li&gt;It is VERY customizable. Every key binding and setting imaginable is available to customize&lt;/li&gt;
&lt;li&gt;Plugins, plugins, plugins. ST2 has a built in python interpreter which allows web developers to create custom plugins. (The only thing that would make it better is if it had node.js bundled in for plugins, but I&amp;#8217;ll take Python)&lt;/li&gt;

&lt;li&gt;&lt;p&gt;vim key bindings. Yes, if you love vim, or want to love vim, then you will love sublime text 2, which comes bundled with &amp;#8220;vintage mode&amp;#8221;, which allows you to use vim keybindings.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;It runs on Windows, OSX, and Linux, so I can use ST2 on almost any computer. &lt;/ul&gt;
There are &lt;strong&gt;MANY&lt;/strong&gt; more reasons. Check out this link for some good ones: &lt;a href=&#34;http://net.tutsplus.com/tutorials/tools-and-tips/sublime-text-2-tips-and-tricks/&#34; title=&#34;Sublime Text Tips and Tricks&#34; target=&#34;_blank&#34;&gt;Sublime Text Tips and Tricks&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now you should be fully convinced that Sublime Text is the greatest thing since sliced bread  &lt;img src=&#34;http://clintberry.com/wp-includes/images/smilies/simple-smile.png&#34; alt=&#34;:-)&#34; class=&#34;wp-smiley&#34; style=&#34;height: 1em; max-height: 1em;&#34; /&gt;Let&amp;#8217;s get it setup for developing PHP applications.&lt;/p&gt;

&lt;h3 id=&#34;setting-up-package-management&#34;&gt;Setting Up Package Management&lt;/h3&gt;

&lt;p&gt;One of the coolest plugins for ST2 is the package manager. This should be the first plugin you install because it is the gateway to a big list of other great plugins for you. Installation is easy, simply open ST2 and press command+` (on windows ctrl+`) and it will open up the ST2 console. Copy and paste this code into the terminal:&lt;/p&gt;

&lt;pre class=&#34;wp-code-highlight prettyprint&#34;&gt;import urllib2,os; pf=&amp;#039;Package Control.sublime-package&amp;#039;; ipp=sublime.installed_packages_path(); os.makedirs(ipp) if not os.path.exists(ipp) else None; urllib2.install_opener(urllib2.build_opener(urllib2.ProxyHandler())); open(os.path.join(ipp,pf),&amp;#039;wb&amp;#039;).write(urllib2.urlopen(&amp;#039;http://sublime.wbond.net/&amp;#039;+pf.replace(&amp;#039; &amp;#039;,&amp;#039;%20&amp;#039;)).read()); print &amp;#039;Please restart Sublime Text to finish installation&amp;#039;
&lt;/pre&gt;
        

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;That&amp;#8217;s it, you now have package control built into your editor. To access package control, press shift+command+p and start typing &amp;#8220;package&amp;#8221;. (shift+command+p opens the window of all commands in sublime text 2). You will see a list of commands related to package control. Sweet.&lt;/p&gt;

&lt;h3 id=&#34;packages-you-need&#34;&gt;Packages you need&lt;/h3&gt;

&lt;p&gt;Let&amp;#8217;s get this puppy setup for some PHP development!&lt;/p&gt;

&lt;p&gt;To install a package, type shift+command+p and start typing &amp;#8220;package install&amp;#8221; and hit enter when it is highlighted. Wait a few seconds and it will bring up a list of available packages. Select the package you want to install and then hit enter. That&amp;#8217;s it! Now follow those steps for the following packages:&lt;/p&gt;

&lt;h5 id=&#34;sublime-code-intel-1&#34;&gt;&lt;a href=&#34;https://github.com/Kronuz/SublimeCodeIntel&#34; title=&#34;Sublime Code Intel&#34;&gt;Sublime Code Intel&lt;/a&gt;&lt;/h5&gt;

&lt;p&gt;What use would editing code be without some good autocompletion? CodeIntel provides a better code completion by parsing all the files in your project and creating a nice index of autocomplete options. It also provides click-to-definition functionality by clicking alt-click on a function or variable name. I have found that this plugin isn&amp;#8217;t as consistent or as fast as full IDEs such as Eclipse, but in general is pretty good.&lt;/p&gt;

&lt;h5 id=&#34;sublime-linter-2&#34;&gt;[Sublime Linter][2]&lt;/h5&gt;

&lt;p&gt;This plugin gives you real-time error checking in your php code which is standard in most IDEs. Now it is standard in Sublime Text &lt;img src=&#34;http://clintberry.com/wp-includes/images/smilies/simple-smile.png&#34; alt=&#34;:-)&#34; class=&#34;wp-smiley&#34; style=&#34;height: 1em; max-height: 1em;&#34; /&gt;&lt;/p&gt;

&lt;h5 id=&#34;zen-coding-3&#34;&gt;&lt;a href=&#34;https://bitbucket.org/sublimator/sublime-2-zencoding&#34; title=&#34;Zen Coding&#34;&gt;Zen Coding&lt;/a&gt;&lt;/h5&gt;

&lt;p&gt;If you aren&amp;#8217;t using Zen Coding to create your HTML, then you are missing out. This adds zen coding features into sublime text 2.&lt;/p&gt;

&lt;h5 id=&#34;sublime-jsdocs-4&#34;&gt;&lt;a href=&#34;https://github.com/spadgos/sublime-jsdocs&#34; title=&#34;PHP Doc Blocks&#34;&gt;Sublime JsDocs&lt;/a&gt;&lt;/h5&gt;

&lt;p&gt;Don&amp;#8217;t let the name fool you, this plugin is a smart Doc Block generator for PHP as well as JavaScript. It is the best one of any I have tried. To use it, simply type /** in front of the function/variable you want to generate the docs for and hit tab. You will get a nice block generated for you.&lt;/p&gt;

&lt;h5 id=&#34;wordpress-plugin-5&#34;&gt;[WordPress Plugin][5]&lt;/h5&gt;

&lt;p&gt;This plugin adds a bunch of good snippets to have in your snippet/auto-complete library for WordPress. This helps speed up development significantly if you do a lot of wordpress sites.&lt;/p&gt;

&lt;h5 id=&#34;git-6-038-also-git-sidebar-7&#34;&gt;[Git][6] &amp;#038; also [Git Sidebar][7]&lt;/h5&gt;

&lt;p&gt;Git commands integrated into git hub for your favorite version control. As an added bonus, add git functionality to the sidebar context menu as well.&lt;/p&gt;

&lt;h3 id=&#34;syntax-specific-settings&#34;&gt;Syntax Specific Settings&lt;/h3&gt;

&lt;p&gt;One of the greatest things about ST2 is how easy it is to customize. All the settings are simply JSON documents that you can change to meet your needs. Go ahead and open up Preferences-&amp;gt;Global Preferences and you will see all settings that are available. But don&amp;#8217;t change this file, since it gets overwritten during upgrades. Open up the User preferences file and put in any changes that you need.&lt;/p&gt;

&lt;p&gt;But if you want to customize setting for only certain syntaxes (like PHP) you can do so by opening a PHP file in the editor and then going to Preferences-&amp;gt;Syntax Specific and you will be able to change settings for only the PHP syntax. For instance I like it when I double click a variable in php for it to select the $ symbol as well, but by default ST2 doesn&amp;#8217;t do this, so I change the PHP settings to not include $ in word separators.&lt;/p&gt;

&lt;pre class=&#34;wp-code-highlight prettyprint&#34;&gt;{
&#34;extensions&#34;:
[
&#34;php&#34;
],
&#34;word_separators&#34;: &#34;./\\()\&#34;&amp;#039;-:,.;&amp;lt;&amp;gt;~!@#%^&amp;*|+=[]{}`~?&#34;
}&lt;/pre&gt;
        

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;h3 id=&#34;important-shortcut-keys&#34;&gt;Important Shortcut Keys&lt;/h3&gt;

&lt;p&gt;Lastly, I want to include a short list of some short cut keys you will likely enjoy:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Alt+[1-9]&lt;/strong&gt; &amp;#8211; Switch to a certain tab&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Command+P&lt;/strong&gt; &amp;#8211; Fast file switching, Line Number, Jump to definition (within file)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Alt+.&lt;/strong&gt; &amp;#8211; Close a started HTML tag (although I suggest Zen Coding Plugin)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Esc&lt;/strong&gt; &amp;#8211; Enter Vintage Mode (if enabled)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Command+D&lt;/strong&gt; &amp;#8211; Multi-select same word. This is VERY COOL.&lt;/p&gt;

&lt;p&gt;Here are some other good &lt;a href=&#34;http://www.sublimetext.com/forum/viewtopic.php?f=2&amp;#038;t=4198&#34; title=&#34;Sublime Text 2 Shortcut Keys&#34; target=&#34;_blank&#34;&gt;shortcut&lt;/a&gt; &lt;a href=&#34;http://www.sublimetext.com/docs/selection&#34; title=&#34;Sublime Text 2 Shortcut Keys&#34; target=&#34;_blank&#34;&gt;keys&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hope you enjoy Sublime Text as much as I have!&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[2]: &lt;a href=&#34;https://github.com/Kronuz/SublimeLinter&#34;&gt;https://github.com/Kronuz/SublimeLinter&lt;/a&gt; &amp;ldquo;&amp;rdquo;&lt;/p&gt;

&lt;p&gt;[5]: &lt;a href=&#34;https://github.com/purplefish32/sublime-text-2-wordpress&#34;&gt;https://github.com/purplefish32/sublime-text-2-wordpress&lt;/a&gt; &amp;ldquo;&amp;rdquo;
 [6]: &lt;a href=&#34;https://github.com/kemayo/sublime-text-2-git&#34;&gt;https://github.com/kemayo/sublime-text-2-git&lt;/a&gt; &amp;ldquo;&amp;rdquo;
 [7]: &lt;a href=&#34;https://github.com/SublimeText/SideBarGit&#34;&gt;https://github.com/SublimeText/SideBarGit&lt;/a&gt; &amp;ldquo;&amp;rdquo;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Speed Up Your WordPress Development Cycle With Git</title>
      <link>http://clintberry.com/2011/speed-up-your-wordpress-development-cycle-with-git/</link>
      <pubDate>Sat, 30 Jul 2011 00:00:00 +0000</pubDate>
      
      <guid>http://clintberry.com/2011/speed-up-your-wordpress-development-cycle-with-git/</guid>
      <description>

&lt;p&gt;If you have developed WordPress sites for clients this process might sound familiar to you:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Get a new client that wants a wordpress site&lt;/li&gt;
&lt;li&gt;Download the most recent wordpress&lt;/li&gt;
&lt;li&gt;Find a good current blank wordpress theme to start implementing the design&lt;/li&gt;
&lt;li&gt;Upload to a staging server to for client to see&lt;/li&gt;
&lt;li&gt;Client requests changes&lt;/li&gt;
&lt;li&gt;You make changes on local server, then upload to staging server&lt;/li&gt;
&lt;li&gt;Repeat last three steps until finished and then you deploy the site to live&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After lots of trial and error, I have come up with a process that is more efficient, and allows rapid development of wordpress sites. I use Git, Git Submodules, and WordPress child themes to get going quicker and keep code up to date with minimal effort. (If your not using a &lt;a href=&#34;http://en.wikipedia.org/wiki/Revision_control&#34; target=&#34;_blank&#34;&gt;revision control &lt;/a&gt;system like &lt;a href=&#34;http://git-scm.com/&#34; target=&#34;_blank&#34;&gt;Git&lt;/a&gt; or &lt;a href=&#34;http://subversion.tigris.org/&#34; target=&#34;_blank&#34;&gt;SVN&lt;/a&gt; for development, then check out &lt;del datetime=&#34;2012-04-22T20:33:39+00:00&#34;&gt;&lt;a href=&#34;http://stackoverflow.com/questions/132520/good-excuses-not-to-use-version-control&#34; target=&#34;_blank&#34;&gt;this funny question and answer session on Stack Overflow&lt;/a&gt;&lt;/del&gt; &lt;strong&gt;Update:&lt;/strong&gt; Stack Overflow moderators removed the question&amp;#8230; bummer. Check out the funny-ness in the &lt;a href=&#34;http://web.archive.org/web/20100722082534/http://stackoverflow.com/questions/132520/good-excuses-not-to-use-version-control&#34; title=&#34;Why to use version control&#34; target=&#34;_blank&#34;&gt;wayback machine internet archiver&lt;/a&gt; instead)&lt;/p&gt;

&lt;p&gt;For this rapid WordPress development cycle, you will need to have Git installed.&lt;/p&gt;

&lt;h2 id=&#34;1-get-the-most-current-wordpress&#34;&gt;1. Get the Most Current WordPress&lt;/h2&gt;

&lt;p&gt;The wordpress core dev team uses SVN to manage wordpress development. But I want to use Git for speed and easy branching. Fortunately there is a &lt;a href=&#34;https://github.com/WordPress/WordPress&#34; target=&#34;_blank&#34;&gt;great WordPress git clone&lt;/a&gt; that is updated every fifteen minutes. To get the most recent version of WordPress, simply clone that repo to your project directory.&lt;/p&gt;

&lt;pre class=&#34;wp-code-highlight prettyprint&#34;&gt;mkdir projectA
git clone https://github.com/markjaquith/WordPress.git ./projectA
cd projectA
git checkout origin/3.2-branch&lt;/pre&gt;

&lt;p&gt;Now you have the most recent version of wordpress, and it will be easier than ever to upgrade wordpress and revert if something goes wrong. But we will get into the upgrade process later.&lt;/p&gt;

&lt;h2 id=&#34;2-starting-with-a-quality-blank-theme&#34;&gt;2. Starting with a Quality Blank Theme&lt;/h2&gt;

&lt;p&gt;To help get your new WordPress project off the ground, let&amp;#8217;s get a quality blank theme that updates regularly. I usually use the &lt;a title=&#34;Roots WordPress Theme&#34; href=&#34;http://www.rootstheme.com/&#34; target=&#34;_blank&#34;&gt;Roots theme&lt;/a&gt;, which is a quality HTML5 wordpress theme that updates regularly. To make sure our theme stays up to date with the latest wordpress updates, we will add the Roots theme as a Git Submodule. This allows us to essentially add a git repository inside of another repository. Why do this? Because we can update our theme code to the latest release with a simple Git command, instead of downloading and merging on our own. To add the sub-module, change to your project directory and add the sub-module to the themes folder then initialize it:&lt;/p&gt;

&lt;pre class=&#34;wp-code-highlight prettyprint&#34;&gt;cd projectA
git submodule add https://github.com/retlehs/roots.git ./wp-content/themes/roots
git submodule init
git submodule update&lt;/pre&gt;

&lt;p&gt;&lt;i class=&#34;icon-warning-sign&#34;&gt;&lt;/i&gt;&lt;strong&gt;Update:&lt;/strong&gt; I have now forked mark&amp;#8217;s wordpress git and added roots as a submodule. You can simply clone or fork my repo to save a step. Get it here: &lt;a title=&#34;Clint Berry&#39;s Github Account&#34; href=&#34;https://github.com/clintberry/WordPress&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://github.com/clintberry/WordPress&#34;&gt;https://github.com/clintberry/WordPress&lt;/a&gt;&lt;/a&gt; Make sure to clone recursive to get the roots theme. This repo updates nightly to the latest wordpress and roots release.&lt;/p&gt;

&lt;p&gt;Now you have a quality blank theme installed into your git repo as a sub-module.&lt;/p&gt;

&lt;h2 id=&#34;3-adding-your-custom-design-wordpress-child-theme&#34;&gt;3. Adding Your Custom Design (WordPress Child Theme)&lt;/h2&gt;

&lt;p&gt;Since we have added the new blank theme as a git submodule, we don&amp;#8217;t want to edit that theme directly. This could cause problems when/if we want to update our code base for the theme. To better avoid update problems, we can use the often-under-utilized-wordpress feature called child themes. Child themes allow you essentially &amp;#8220;inherit&amp;#8221; all the functionality of a &amp;#8220;base&amp;#8221; theme. In this case, we will create a child theme &amp;#8220;MyTheme&amp;#8221; that will have access to all the functionality of our base theme &amp;#8220;Roots&amp;#8221;.&lt;/p&gt;

&lt;p&gt;Creating child themes in wordpress is simple:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Add a new folder to your wordpress themes directory called &amp;#8220;MyTheme&amp;#8221;&lt;/li&gt;
&lt;li&gt;Create a file called &amp;#8220;style.css&amp;#8221; with the following text: &lt;pre class=&#34;wp-code-highlight prettyprint&#34;&gt;/*
Theme Name:     MyProject
Theme URI:      &lt;a href=&#34;http://clintberry.com/&#34;&gt;http://clintberry.com/&lt;/a&gt;
Description:    Roots Child Theme
Author:         Clint Berry
Author URI:     &lt;a href=&#34;http://clintberry.com&#34;&gt;http://clintberry.com&lt;/a&gt;
Template:       roots
Version:        0.1.0
*/&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;@import url(&amp;ldquo;../twentyten/style.css&amp;rdquo;);
&lt;/pre&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Take notice of the &amp;amp;#8220;Template: roots&amp;amp;#8221; field. That is what lets WordPress know that this is a child theme and to inherit all of the roots functionality. Also since this style.css file overwrites the roots css file, we import the css file from roots. &amp;lt;/li&amp;gt; 

  * Create a functions.php file to add any custom WordPress functions. WordPress will load your new functions.php file along with the Roots functions.php file, so all is well.
  * Copy any template file you want to change from the Roots theme to your new child theme directory. Any template file found in your new directory will overwrite the template in Roots.&amp;lt;/ol&amp;gt; 

Now you can start your theme development with an HTML5 bang! Child themes make it much easier to get started and even keep your file structure a big cleaner. 

## Update WordPress Like A Pro

Yes, you could update WordPress in the admin panel, but you want to do it in a much cooler, easier-to-revert way. With Git, now you can. First, backup your database. Then in the root wordpress directory, update your Git repo by using git fetch:

`If you have developed WordPress sites for clients this process might sound familiar to you:
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Get a new client that wants a wordpress site&lt;/li&gt;
&lt;li&gt;Download the most recent wordpress&lt;/li&gt;
&lt;li&gt;Find a good current blank wordpress theme to start implementing the design&lt;/li&gt;
&lt;li&gt;Upload to a staging server to for client to see&lt;/li&gt;
&lt;li&gt;Client requests changes&lt;/li&gt;
&lt;li&gt;You make changes on local server, then upload to staging server&lt;/li&gt;
&lt;li&gt;Repeat last three steps until finished and then you deploy the site to live&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After lots of trial and error, I have come up with a process that is more efficient, and allows rapid development of wordpress sites. I use Git, Git Submodules, and WordPress child themes to get going quicker and keep code up to date with minimal effort. (If your not using a &lt;a href=&#34;http://en.wikipedia.org/wiki/Revision_control&#34; target=&#34;_blank&#34;&gt;revision control &lt;/a&gt;system like &lt;a href=&#34;http://git-scm.com/&#34; target=&#34;_blank&#34;&gt;Git&lt;/a&gt; or &lt;a href=&#34;http://subversion.tigris.org/&#34; target=&#34;_blank&#34;&gt;SVN&lt;/a&gt; for development, then check out &lt;del datetime=&#34;2012-04-22T20:33:39+00:00&#34;&gt;&lt;a href=&#34;http://stackoverflow.com/questions/132520/good-excuses-not-to-use-version-control&#34; target=&#34;_blank&#34;&gt;this funny question and answer session on Stack Overflow&lt;/a&gt;&lt;/del&gt; &lt;strong&gt;Update:&lt;/strong&gt; Stack Overflow moderators removed the question&amp;#8230; bummer. Check out the funny-ness in the &lt;a href=&#34;http://web.archive.org/web/20100722082534/http://stackoverflow.com/questions/132520/good-excuses-not-to-use-version-control&#34; title=&#34;Why to use version control&#34; target=&#34;_blank&#34;&gt;wayback machine internet archiver&lt;/a&gt; instead)&lt;/p&gt;

&lt;p&gt;For this rapid WordPress development cycle, you will need to have Git installed.&lt;/p&gt;

&lt;h2 id=&#34;1-get-the-most-current-wordpress-1&#34;&gt;1. Get the Most Current WordPress&lt;/h2&gt;

&lt;p&gt;The wordpress core dev team uses SVN to manage wordpress development. But I want to use Git for speed and easy branching. Fortunately there is a &lt;a href=&#34;https://github.com/WordPress/WordPress&#34; target=&#34;_blank&#34;&gt;great WordPress git clone&lt;/a&gt; that is updated every fifteen minutes. To get the most recent version of WordPress, simply clone that repo to your project directory.&lt;/p&gt;

&lt;pre class=&#34;wp-code-highlight prettyprint&#34;&gt;mkdir projectA
git clone https://github.com/markjaquith/WordPress.git ./projectA
cd projectA
git checkout origin/3.2-branch&lt;/pre&gt;

&lt;p&gt;Now you have the most recent version of wordpress, and it will be easier than ever to upgrade wordpress and revert if something goes wrong. But we will get into the upgrade process later.&lt;/p&gt;

&lt;h2 id=&#34;2-starting-with-a-quality-blank-theme-1&#34;&gt;2. Starting with a Quality Blank Theme&lt;/h2&gt;

&lt;p&gt;To help get your new WordPress project off the ground, let&amp;#8217;s get a quality blank theme that updates regularly. I usually use the &lt;a title=&#34;Roots WordPress Theme&#34; href=&#34;http://www.rootstheme.com/&#34; target=&#34;_blank&#34;&gt;Roots theme&lt;/a&gt;, which is a quality HTML5 wordpress theme that updates regularly. To make sure our theme stays up to date with the latest wordpress updates, we will add the Roots theme as a Git Submodule. This allows us to essentially add a git repository inside of another repository. Why do this? Because we can update our theme code to the latest release with a simple Git command, instead of downloading and merging on our own. To add the sub-module, change to your project directory and add the sub-module to the themes folder then initialize it:&lt;/p&gt;

&lt;pre class=&#34;wp-code-highlight prettyprint&#34;&gt;cd projectA
git submodule add https://github.com/retlehs/roots.git ./wp-content/themes/roots
git submodule init
git submodule update&lt;/pre&gt;

&lt;p&gt;&lt;i class=&#34;icon-warning-sign&#34;&gt;&lt;/i&gt;&lt;strong&gt;Update:&lt;/strong&gt; I have now forked mark&amp;#8217;s wordpress git and added roots as a submodule. You can simply clone or fork my repo to save a step. Get it here: &lt;a title=&#34;Clint Berry&#39;s Github Account&#34; href=&#34;https://github.com/clintberry/WordPress&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://github.com/clintberry/WordPress&#34;&gt;https://github.com/clintberry/WordPress&lt;/a&gt;&lt;/a&gt; Make sure to clone recursive to get the roots theme. This repo updates nightly to the latest wordpress and roots release.&lt;/p&gt;

&lt;p&gt;Now you have a quality blank theme installed into your git repo as a sub-module.&lt;/p&gt;

&lt;h2 id=&#34;3-adding-your-custom-design-wordpress-child-theme-1&#34;&gt;3. Adding Your Custom Design (WordPress Child Theme)&lt;/h2&gt;

&lt;p&gt;Since we have added the new blank theme as a git submodule, we don&amp;#8217;t want to edit that theme directly. This could cause problems when/if we want to update our code base for the theme. To better avoid update problems, we can use the often-under-utilized-wordpress feature called child themes. Child themes allow you essentially &amp;#8220;inherit&amp;#8221; all the functionality of a &amp;#8220;base&amp;#8221; theme. In this case, we will create a child theme &amp;#8220;MyTheme&amp;#8221; that will have access to all the functionality of our base theme &amp;#8220;Roots&amp;#8221;.&lt;/p&gt;

&lt;p&gt;Creating child themes in wordpress is simple:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Add a new folder to your wordpress themes directory called &amp;#8220;MyTheme&amp;#8221;&lt;/li&gt;
&lt;li&gt;Create a file called &amp;#8220;style.css&amp;#8221; with the following text: &lt;pre class=&#34;wp-code-highlight prettyprint&#34;&gt;/*
Theme Name:     MyProject
Theme URI:      &lt;a href=&#34;http://clintberry.com/&#34;&gt;http://clintberry.com/&lt;/a&gt;
Description:    Roots Child Theme
Author:         Clint Berry
Author URI:     &lt;a href=&#34;http://clintberry.com&#34;&gt;http://clintberry.com&lt;/a&gt;
Template:       roots
Version:        0.1.0
*/&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;@import url(&amp;ldquo;../twentyten/style.css&amp;rdquo;);
&lt;/pre&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Take notice of the &amp;amp;#8220;Template: roots&amp;amp;#8221; field. That is what lets WordPress know that this is a child theme and to inherit all of the roots functionality. Also since this style.css file overwrites the roots css file, we import the css file from roots. &amp;lt;/li&amp;gt; 

  * Create a functions.php file to add any custom WordPress functions. WordPress will load your new functions.php file along with the Roots functions.php file, so all is well.
  * Copy any template file you want to change from the Roots theme to your new child theme directory. Any template file found in your new directory will overwrite the template in Roots.&amp;lt;/ol&amp;gt; 

Now you can start your theme development with an HTML5 bang! Child themes make it much easier to get started and even keep your file structure a big cleaner. 

## Update WordPress Like A Pro

Yes, you could update WordPress in the admin panel, but you want to do it in a much cooler, easier-to-revert way. With Git, now you can. First, backup your database. Then in the root wordpress directory, update your Git repo by using git fetch:
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;`&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Now merge in any updates from your current branch, or merge in a new branch altogether. This command merges the latest update from the 3.2 branch into your WordPress install:

``If you have developed WordPress sites for clients this process might sound familiar to you:
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Get a new client that wants a wordpress site&lt;/li&gt;
&lt;li&gt;Download the most recent wordpress&lt;/li&gt;
&lt;li&gt;Find a good current blank wordpress theme to start implementing the design&lt;/li&gt;
&lt;li&gt;Upload to a staging server to for client to see&lt;/li&gt;
&lt;li&gt;Client requests changes&lt;/li&gt;
&lt;li&gt;You make changes on local server, then upload to staging server&lt;/li&gt;
&lt;li&gt;Repeat last three steps until finished and then you deploy the site to live&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After lots of trial and error, I have come up with a process that is more efficient, and allows rapid development of wordpress sites. I use Git, Git Submodules, and WordPress child themes to get going quicker and keep code up to date with minimal effort. (If your not using a &lt;a href=&#34;http://en.wikipedia.org/wiki/Revision_control&#34; target=&#34;_blank&#34;&gt;revision control &lt;/a&gt;system like &lt;a href=&#34;http://git-scm.com/&#34; target=&#34;_blank&#34;&gt;Git&lt;/a&gt; or &lt;a href=&#34;http://subversion.tigris.org/&#34; target=&#34;_blank&#34;&gt;SVN&lt;/a&gt; for development, then check out &lt;del datetime=&#34;2012-04-22T20:33:39+00:00&#34;&gt;&lt;a href=&#34;http://stackoverflow.com/questions/132520/good-excuses-not-to-use-version-control&#34; target=&#34;_blank&#34;&gt;this funny question and answer session on Stack Overflow&lt;/a&gt;&lt;/del&gt; &lt;strong&gt;Update:&lt;/strong&gt; Stack Overflow moderators removed the question&amp;#8230; bummer. Check out the funny-ness in the &lt;a href=&#34;http://web.archive.org/web/20100722082534/http://stackoverflow.com/questions/132520/good-excuses-not-to-use-version-control&#34; title=&#34;Why to use version control&#34; target=&#34;_blank&#34;&gt;wayback machine internet archiver&lt;/a&gt; instead)&lt;/p&gt;

&lt;p&gt;For this rapid WordPress development cycle, you will need to have Git installed.&lt;/p&gt;

&lt;h2 id=&#34;1-get-the-most-current-wordpress-2&#34;&gt;1. Get the Most Current WordPress&lt;/h2&gt;

&lt;p&gt;The wordpress core dev team uses SVN to manage wordpress development. But I want to use Git for speed and easy branching. Fortunately there is a &lt;a href=&#34;https://github.com/WordPress/WordPress&#34; target=&#34;_blank&#34;&gt;great WordPress git clone&lt;/a&gt; that is updated every fifteen minutes. To get the most recent version of WordPress, simply clone that repo to your project directory.&lt;/p&gt;

&lt;pre class=&#34;wp-code-highlight prettyprint&#34;&gt;mkdir projectA
git clone https://github.com/markjaquith/WordPress.git ./projectA
cd projectA
git checkout origin/3.2-branch&lt;/pre&gt;

&lt;p&gt;Now you have the most recent version of wordpress, and it will be easier than ever to upgrade wordpress and revert if something goes wrong. But we will get into the upgrade process later.&lt;/p&gt;

&lt;h2 id=&#34;2-starting-with-a-quality-blank-theme-2&#34;&gt;2. Starting with a Quality Blank Theme&lt;/h2&gt;

&lt;p&gt;To help get your new WordPress project off the ground, let&amp;#8217;s get a quality blank theme that updates regularly. I usually use the &lt;a title=&#34;Roots WordPress Theme&#34; href=&#34;http://www.rootstheme.com/&#34; target=&#34;_blank&#34;&gt;Roots theme&lt;/a&gt;, which is a quality HTML5 wordpress theme that updates regularly. To make sure our theme stays up to date with the latest wordpress updates, we will add the Roots theme as a Git Submodule. This allows us to essentially add a git repository inside of another repository. Why do this? Because we can update our theme code to the latest release with a simple Git command, instead of downloading and merging on our own. To add the sub-module, change to your project directory and add the sub-module to the themes folder then initialize it:&lt;/p&gt;

&lt;pre class=&#34;wp-code-highlight prettyprint&#34;&gt;cd projectA
git submodule add https://github.com/retlehs/roots.git ./wp-content/themes/roots
git submodule init
git submodule update&lt;/pre&gt;

&lt;p&gt;&lt;i class=&#34;icon-warning-sign&#34;&gt;&lt;/i&gt;&lt;strong&gt;Update:&lt;/strong&gt; I have now forked mark&amp;#8217;s wordpress git and added roots as a submodule. You can simply clone or fork my repo to save a step. Get it here: &lt;a title=&#34;Clint Berry&#39;s Github Account&#34; href=&#34;https://github.com/clintberry/WordPress&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://github.com/clintberry/WordPress&#34;&gt;https://github.com/clintberry/WordPress&lt;/a&gt;&lt;/a&gt; Make sure to clone recursive to get the roots theme. This repo updates nightly to the latest wordpress and roots release.&lt;/p&gt;

&lt;p&gt;Now you have a quality blank theme installed into your git repo as a sub-module.&lt;/p&gt;

&lt;h2 id=&#34;3-adding-your-custom-design-wordpress-child-theme-2&#34;&gt;3. Adding Your Custom Design (WordPress Child Theme)&lt;/h2&gt;

&lt;p&gt;Since we have added the new blank theme as a git submodule, we don&amp;#8217;t want to edit that theme directly. This could cause problems when/if we want to update our code base for the theme. To better avoid update problems, we can use the often-under-utilized-wordpress feature called child themes. Child themes allow you essentially &amp;#8220;inherit&amp;#8221; all the functionality of a &amp;#8220;base&amp;#8221; theme. In this case, we will create a child theme &amp;#8220;MyTheme&amp;#8221; that will have access to all the functionality of our base theme &amp;#8220;Roots&amp;#8221;.&lt;/p&gt;

&lt;p&gt;Creating child themes in wordpress is simple:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Add a new folder to your wordpress themes directory called &amp;#8220;MyTheme&amp;#8221;&lt;/li&gt;
&lt;li&gt;Create a file called &amp;#8220;style.css&amp;#8221; with the following text: &lt;pre class=&#34;wp-code-highlight prettyprint&#34;&gt;/*
Theme Name:     MyProject
Theme URI:      &lt;a href=&#34;http://clintberry.com/&#34;&gt;http://clintberry.com/&lt;/a&gt;
Description:    Roots Child Theme
Author:         Clint Berry
Author URI:     &lt;a href=&#34;http://clintberry.com&#34;&gt;http://clintberry.com&lt;/a&gt;
Template:       roots
Version:        0.1.0
*/&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;@import url(&amp;ldquo;../twentyten/style.css&amp;rdquo;);
&lt;/pre&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Take notice of the &amp;amp;#8220;Template: roots&amp;amp;#8221; field. That is what lets WordPress know that this is a child theme and to inherit all of the roots functionality. Also since this style.css file overwrites the roots css file, we import the css file from roots. &amp;lt;/li&amp;gt; 

  * Create a functions.php file to add any custom WordPress functions. WordPress will load your new functions.php file along with the Roots functions.php file, so all is well.
  * Copy any template file you want to change from the Roots theme to your new child theme directory. Any template file found in your new directory will overwrite the template in Roots.&amp;lt;/ol&amp;gt; 

Now you can start your theme development with an HTML5 bang! Child themes make it much easier to get started and even keep your file structure a big cleaner. 

## Update WordPress Like A Pro

Yes, you could update WordPress in the admin panel, but you want to do it in a much cooler, easier-to-revert way. With Git, now you can. First, backup your database. Then in the root wordpress directory, update your Git repo by using git fetch:

`If you have developed WordPress sites for clients this process might sound familiar to you:
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Get a new client that wants a wordpress site&lt;/li&gt;
&lt;li&gt;Download the most recent wordpress&lt;/li&gt;
&lt;li&gt;Find a good current blank wordpress theme to start implementing the design&lt;/li&gt;
&lt;li&gt;Upload to a staging server to for client to see&lt;/li&gt;
&lt;li&gt;Client requests changes&lt;/li&gt;
&lt;li&gt;You make changes on local server, then upload to staging server&lt;/li&gt;
&lt;li&gt;Repeat last three steps until finished and then you deploy the site to live&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After lots of trial and error, I have come up with a process that is more efficient, and allows rapid development of wordpress sites. I use Git, Git Submodules, and WordPress child themes to get going quicker and keep code up to date with minimal effort. (If your not using a &lt;a href=&#34;http://en.wikipedia.org/wiki/Revision_control&#34; target=&#34;_blank&#34;&gt;revision control &lt;/a&gt;system like &lt;a href=&#34;http://git-scm.com/&#34; target=&#34;_blank&#34;&gt;Git&lt;/a&gt; or &lt;a href=&#34;http://subversion.tigris.org/&#34; target=&#34;_blank&#34;&gt;SVN&lt;/a&gt; for development, then check out &lt;del datetime=&#34;2012-04-22T20:33:39+00:00&#34;&gt;&lt;a href=&#34;http://stackoverflow.com/questions/132520/good-excuses-not-to-use-version-control&#34; target=&#34;_blank&#34;&gt;this funny question and answer session on Stack Overflow&lt;/a&gt;&lt;/del&gt; &lt;strong&gt;Update:&lt;/strong&gt; Stack Overflow moderators removed the question&amp;#8230; bummer. Check out the funny-ness in the &lt;a href=&#34;http://web.archive.org/web/20100722082534/http://stackoverflow.com/questions/132520/good-excuses-not-to-use-version-control&#34; title=&#34;Why to use version control&#34; target=&#34;_blank&#34;&gt;wayback machine internet archiver&lt;/a&gt; instead)&lt;/p&gt;

&lt;p&gt;For this rapid WordPress development cycle, you will need to have Git installed.&lt;/p&gt;

&lt;h2 id=&#34;1-get-the-most-current-wordpress-3&#34;&gt;1. Get the Most Current WordPress&lt;/h2&gt;

&lt;p&gt;The wordpress core dev team uses SVN to manage wordpress development. But I want to use Git for speed and easy branching. Fortunately there is a &lt;a href=&#34;https://github.com/WordPress/WordPress&#34; target=&#34;_blank&#34;&gt;great WordPress git clone&lt;/a&gt; that is updated every fifteen minutes. To get the most recent version of WordPress, simply clone that repo to your project directory.&lt;/p&gt;

&lt;pre class=&#34;wp-code-highlight prettyprint&#34;&gt;mkdir projectA
git clone https://github.com/markjaquith/WordPress.git ./projectA
cd projectA
git checkout origin/3.2-branch&lt;/pre&gt;

&lt;p&gt;Now you have the most recent version of wordpress, and it will be easier than ever to upgrade wordpress and revert if something goes wrong. But we will get into the upgrade process later.&lt;/p&gt;

&lt;h2 id=&#34;2-starting-with-a-quality-blank-theme-3&#34;&gt;2. Starting with a Quality Blank Theme&lt;/h2&gt;

&lt;p&gt;To help get your new WordPress project off the ground, let&amp;#8217;s get a quality blank theme that updates regularly. I usually use the &lt;a title=&#34;Roots WordPress Theme&#34; href=&#34;http://www.rootstheme.com/&#34; target=&#34;_blank&#34;&gt;Roots theme&lt;/a&gt;, which is a quality HTML5 wordpress theme that updates regularly. To make sure our theme stays up to date with the latest wordpress updates, we will add the Roots theme as a Git Submodule. This allows us to essentially add a git repository inside of another repository. Why do this? Because we can update our theme code to the latest release with a simple Git command, instead of downloading and merging on our own. To add the sub-module, change to your project directory and add the sub-module to the themes folder then initialize it:&lt;/p&gt;

&lt;pre class=&#34;wp-code-highlight prettyprint&#34;&gt;cd projectA
git submodule add https://github.com/retlehs/roots.git ./wp-content/themes/roots
git submodule init
git submodule update&lt;/pre&gt;

&lt;p&gt;&lt;i class=&#34;icon-warning-sign&#34;&gt;&lt;/i&gt;&lt;strong&gt;Update:&lt;/strong&gt; I have now forked mark&amp;#8217;s wordpress git and added roots as a submodule. You can simply clone or fork my repo to save a step. Get it here: &lt;a title=&#34;Clint Berry&#39;s Github Account&#34; href=&#34;https://github.com/clintberry/WordPress&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://github.com/clintberry/WordPress&#34;&gt;https://github.com/clintberry/WordPress&lt;/a&gt;&lt;/a&gt; Make sure to clone recursive to get the roots theme. This repo updates nightly to the latest wordpress and roots release.&lt;/p&gt;

&lt;p&gt;Now you have a quality blank theme installed into your git repo as a sub-module.&lt;/p&gt;

&lt;h2 id=&#34;3-adding-your-custom-design-wordpress-child-theme-3&#34;&gt;3. Adding Your Custom Design (WordPress Child Theme)&lt;/h2&gt;

&lt;p&gt;Since we have added the new blank theme as a git submodule, we don&amp;#8217;t want to edit that theme directly. This could cause problems when/if we want to update our code base for the theme. To better avoid update problems, we can use the often-under-utilized-wordpress feature called child themes. Child themes allow you essentially &amp;#8220;inherit&amp;#8221; all the functionality of a &amp;#8220;base&amp;#8221; theme. In this case, we will create a child theme &amp;#8220;MyTheme&amp;#8221; that will have access to all the functionality of our base theme &amp;#8220;Roots&amp;#8221;.&lt;/p&gt;

&lt;p&gt;Creating child themes in wordpress is simple:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Add a new folder to your wordpress themes directory called &amp;#8220;MyTheme&amp;#8221;&lt;/li&gt;
&lt;li&gt;Create a file called &amp;#8220;style.css&amp;#8221; with the following text: &lt;pre class=&#34;wp-code-highlight prettyprint&#34;&gt;/*
Theme Name:     MyProject
Theme URI:      &lt;a href=&#34;http://clintberry.com/&#34;&gt;http://clintberry.com/&lt;/a&gt;
Description:    Roots Child Theme
Author:         Clint Berry
Author URI:     &lt;a href=&#34;http://clintberry.com&#34;&gt;http://clintberry.com&lt;/a&gt;
Template:       roots
Version:        0.1.0
*/&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;@import url(&amp;ldquo;../twentyten/style.css&amp;rdquo;);
&lt;/pre&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Take notice of the &amp;amp;#8220;Template: roots&amp;amp;#8221; field. That is what lets WordPress know that this is a child theme and to inherit all of the roots functionality. Also since this style.css file overwrites the roots css file, we import the css file from roots. &amp;lt;/li&amp;gt; 

  * Create a functions.php file to add any custom WordPress functions. WordPress will load your new functions.php file along with the Roots functions.php file, so all is well.
  * Copy any template file you want to change from the Roots theme to your new child theme directory. Any template file found in your new directory will overwrite the template in Roots.&amp;lt;/ol&amp;gt; 

Now you can start your theme development with an HTML5 bang! Child themes make it much easier to get started and even keep your file structure a big cleaner. 

## Update WordPress Like A Pro

Yes, you could update WordPress in the admin panel, but you want to do it in a much cooler, easier-to-revert way. With Git, now you can. First, backup your database. Then in the root wordpress directory, update your Git repo by using git fetch:
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;`&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Now merge in any updates from your current branch, or merge in a new branch altogether. This command merges the latest update from the 3.2 branch into your WordPress install:
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;``&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Now you have the most recent version of WordPress. It is a beautiful thing.

Don&amp;amp;#8217;t worry! If it breaks something, it is easy to go back. First enter:

```If you have developed WordPress sites for clients this process might sound familiar to you:
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Get a new client that wants a wordpress site&lt;/li&gt;
&lt;li&gt;Download the most recent wordpress&lt;/li&gt;
&lt;li&gt;Find a good current blank wordpress theme to start implementing the design&lt;/li&gt;
&lt;li&gt;Upload to a staging server to for client to see&lt;/li&gt;
&lt;li&gt;Client requests changes&lt;/li&gt;
&lt;li&gt;You make changes on local server, then upload to staging server&lt;/li&gt;
&lt;li&gt;Repeat last three steps until finished and then you deploy the site to live&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After lots of trial and error, I have come up with a process that is more efficient, and allows rapid development of wordpress sites. I use Git, Git Submodules, and WordPress child themes to get going quicker and keep code up to date with minimal effort. (If your not using a &lt;a href=&#34;http://en.wikipedia.org/wiki/Revision_control&#34; target=&#34;_blank&#34;&gt;revision control &lt;/a&gt;system like &lt;a href=&#34;http://git-scm.com/&#34; target=&#34;_blank&#34;&gt;Git&lt;/a&gt; or &lt;a href=&#34;http://subversion.tigris.org/&#34; target=&#34;_blank&#34;&gt;SVN&lt;/a&gt; for development, then check out &lt;del datetime=&#34;2012-04-22T20:33:39+00:00&#34;&gt;&lt;a href=&#34;http://stackoverflow.com/questions/132520/good-excuses-not-to-use-version-control&#34; target=&#34;_blank&#34;&gt;this funny question and answer session on Stack Overflow&lt;/a&gt;&lt;/del&gt; &lt;strong&gt;Update:&lt;/strong&gt; Stack Overflow moderators removed the question&amp;#8230; bummer. Check out the funny-ness in the &lt;a href=&#34;http://web.archive.org/web/20100722082534/http://stackoverflow.com/questions/132520/good-excuses-not-to-use-version-control&#34; title=&#34;Why to use version control&#34; target=&#34;_blank&#34;&gt;wayback machine internet archiver&lt;/a&gt; instead)&lt;/p&gt;

&lt;p&gt;For this rapid WordPress development cycle, you will need to have Git installed.&lt;/p&gt;

&lt;h2 id=&#34;1-get-the-most-current-wordpress-4&#34;&gt;1. Get the Most Current WordPress&lt;/h2&gt;

&lt;p&gt;The wordpress core dev team uses SVN to manage wordpress development. But I want to use Git for speed and easy branching. Fortunately there is a &lt;a href=&#34;https://github.com/WordPress/WordPress&#34; target=&#34;_blank&#34;&gt;great WordPress git clone&lt;/a&gt; that is updated every fifteen minutes. To get the most recent version of WordPress, simply clone that repo to your project directory.&lt;/p&gt;

&lt;pre class=&#34;wp-code-highlight prettyprint&#34;&gt;mkdir projectA
git clone https://github.com/markjaquith/WordPress.git ./projectA
cd projectA
git checkout origin/3.2-branch&lt;/pre&gt;

&lt;p&gt;Now you have the most recent version of wordpress, and it will be easier than ever to upgrade wordpress and revert if something goes wrong. But we will get into the upgrade process later.&lt;/p&gt;

&lt;h2 id=&#34;2-starting-with-a-quality-blank-theme-4&#34;&gt;2. Starting with a Quality Blank Theme&lt;/h2&gt;

&lt;p&gt;To help get your new WordPress project off the ground, let&amp;#8217;s get a quality blank theme that updates regularly. I usually use the &lt;a title=&#34;Roots WordPress Theme&#34; href=&#34;http://www.rootstheme.com/&#34; target=&#34;_blank&#34;&gt;Roots theme&lt;/a&gt;, which is a quality HTML5 wordpress theme that updates regularly. To make sure our theme stays up to date with the latest wordpress updates, we will add the Roots theme as a Git Submodule. This allows us to essentially add a git repository inside of another repository. Why do this? Because we can update our theme code to the latest release with a simple Git command, instead of downloading and merging on our own. To add the sub-module, change to your project directory and add the sub-module to the themes folder then initialize it:&lt;/p&gt;

&lt;pre class=&#34;wp-code-highlight prettyprint&#34;&gt;cd projectA
git submodule add https://github.com/retlehs/roots.git ./wp-content/themes/roots
git submodule init
git submodule update&lt;/pre&gt;

&lt;p&gt;&lt;i class=&#34;icon-warning-sign&#34;&gt;&lt;/i&gt;&lt;strong&gt;Update:&lt;/strong&gt; I have now forked mark&amp;#8217;s wordpress git and added roots as a submodule. You can simply clone or fork my repo to save a step. Get it here: &lt;a title=&#34;Clint Berry&#39;s Github Account&#34; href=&#34;https://github.com/clintberry/WordPress&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://github.com/clintberry/WordPress&#34;&gt;https://github.com/clintberry/WordPress&lt;/a&gt;&lt;/a&gt; Make sure to clone recursive to get the roots theme. This repo updates nightly to the latest wordpress and roots release.&lt;/p&gt;

&lt;p&gt;Now you have a quality blank theme installed into your git repo as a sub-module.&lt;/p&gt;

&lt;h2 id=&#34;3-adding-your-custom-design-wordpress-child-theme-4&#34;&gt;3. Adding Your Custom Design (WordPress Child Theme)&lt;/h2&gt;

&lt;p&gt;Since we have added the new blank theme as a git submodule, we don&amp;#8217;t want to edit that theme directly. This could cause problems when/if we want to update our code base for the theme. To better avoid update problems, we can use the often-under-utilized-wordpress feature called child themes. Child themes allow you essentially &amp;#8220;inherit&amp;#8221; all the functionality of a &amp;#8220;base&amp;#8221; theme. In this case, we will create a child theme &amp;#8220;MyTheme&amp;#8221; that will have access to all the functionality of our base theme &amp;#8220;Roots&amp;#8221;.&lt;/p&gt;

&lt;p&gt;Creating child themes in wordpress is simple:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Add a new folder to your wordpress themes directory called &amp;#8220;MyTheme&amp;#8221;&lt;/li&gt;
&lt;li&gt;Create a file called &amp;#8220;style.css&amp;#8221; with the following text: &lt;pre class=&#34;wp-code-highlight prettyprint&#34;&gt;/*
Theme Name:     MyProject
Theme URI:      &lt;a href=&#34;http://clintberry.com/&#34;&gt;http://clintberry.com/&lt;/a&gt;
Description:    Roots Child Theme
Author:         Clint Berry
Author URI:     &lt;a href=&#34;http://clintberry.com&#34;&gt;http://clintberry.com&lt;/a&gt;
Template:       roots
Version:        0.1.0
*/&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;@import url(&amp;ldquo;../twentyten/style.css&amp;rdquo;);
&lt;/pre&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Take notice of the &amp;amp;#8220;Template: roots&amp;amp;#8221; field. That is what lets WordPress know that this is a child theme and to inherit all of the roots functionality. Also since this style.css file overwrites the roots css file, we import the css file from roots. &amp;lt;/li&amp;gt; 

  * Create a functions.php file to add any custom WordPress functions. WordPress will load your new functions.php file along with the Roots functions.php file, so all is well.
  * Copy any template file you want to change from the Roots theme to your new child theme directory. Any template file found in your new directory will overwrite the template in Roots.&amp;lt;/ol&amp;gt; 

Now you can start your theme development with an HTML5 bang! Child themes make it much easier to get started and even keep your file structure a big cleaner. 

## Update WordPress Like A Pro

Yes, you could update WordPress in the admin panel, but you want to do it in a much cooler, easier-to-revert way. With Git, now you can. First, backup your database. Then in the root wordpress directory, update your Git repo by using git fetch:

`If you have developed WordPress sites for clients this process might sound familiar to you:
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Get a new client that wants a wordpress site&lt;/li&gt;
&lt;li&gt;Download the most recent wordpress&lt;/li&gt;
&lt;li&gt;Find a good current blank wordpress theme to start implementing the design&lt;/li&gt;
&lt;li&gt;Upload to a staging server to for client to see&lt;/li&gt;
&lt;li&gt;Client requests changes&lt;/li&gt;
&lt;li&gt;You make changes on local server, then upload to staging server&lt;/li&gt;
&lt;li&gt;Repeat last three steps until finished and then you deploy the site to live&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After lots of trial and error, I have come up with a process that is more efficient, and allows rapid development of wordpress sites. I use Git, Git Submodules, and WordPress child themes to get going quicker and keep code up to date with minimal effort. (If your not using a &lt;a href=&#34;http://en.wikipedia.org/wiki/Revision_control&#34; target=&#34;_blank&#34;&gt;revision control &lt;/a&gt;system like &lt;a href=&#34;http://git-scm.com/&#34; target=&#34;_blank&#34;&gt;Git&lt;/a&gt; or &lt;a href=&#34;http://subversion.tigris.org/&#34; target=&#34;_blank&#34;&gt;SVN&lt;/a&gt; for development, then check out &lt;del datetime=&#34;2012-04-22T20:33:39+00:00&#34;&gt;&lt;a href=&#34;http://stackoverflow.com/questions/132520/good-excuses-not-to-use-version-control&#34; target=&#34;_blank&#34;&gt;this funny question and answer session on Stack Overflow&lt;/a&gt;&lt;/del&gt; &lt;strong&gt;Update:&lt;/strong&gt; Stack Overflow moderators removed the question&amp;#8230; bummer. Check out the funny-ness in the &lt;a href=&#34;http://web.archive.org/web/20100722082534/http://stackoverflow.com/questions/132520/good-excuses-not-to-use-version-control&#34; title=&#34;Why to use version control&#34; target=&#34;_blank&#34;&gt;wayback machine internet archiver&lt;/a&gt; instead)&lt;/p&gt;

&lt;p&gt;For this rapid WordPress development cycle, you will need to have Git installed.&lt;/p&gt;

&lt;h2 id=&#34;1-get-the-most-current-wordpress-5&#34;&gt;1. Get the Most Current WordPress&lt;/h2&gt;

&lt;p&gt;The wordpress core dev team uses SVN to manage wordpress development. But I want to use Git for speed and easy branching. Fortunately there is a &lt;a href=&#34;https://github.com/WordPress/WordPress&#34; target=&#34;_blank&#34;&gt;great WordPress git clone&lt;/a&gt; that is updated every fifteen minutes. To get the most recent version of WordPress, simply clone that repo to your project directory.&lt;/p&gt;

&lt;pre class=&#34;wp-code-highlight prettyprint&#34;&gt;mkdir projectA
git clone https://github.com/markjaquith/WordPress.git ./projectA
cd projectA
git checkout origin/3.2-branch&lt;/pre&gt;

&lt;p&gt;Now you have the most recent version of wordpress, and it will be easier than ever to upgrade wordpress and revert if something goes wrong. But we will get into the upgrade process later.&lt;/p&gt;

&lt;h2 id=&#34;2-starting-with-a-quality-blank-theme-5&#34;&gt;2. Starting with a Quality Blank Theme&lt;/h2&gt;

&lt;p&gt;To help get your new WordPress project off the ground, let&amp;#8217;s get a quality blank theme that updates regularly. I usually use the &lt;a title=&#34;Roots WordPress Theme&#34; href=&#34;http://www.rootstheme.com/&#34; target=&#34;_blank&#34;&gt;Roots theme&lt;/a&gt;, which is a quality HTML5 wordpress theme that updates regularly. To make sure our theme stays up to date with the latest wordpress updates, we will add the Roots theme as a Git Submodule. This allows us to essentially add a git repository inside of another repository. Why do this? Because we can update our theme code to the latest release with a simple Git command, instead of downloading and merging on our own. To add the sub-module, change to your project directory and add the sub-module to the themes folder then initialize it:&lt;/p&gt;

&lt;pre class=&#34;wp-code-highlight prettyprint&#34;&gt;cd projectA
git submodule add https://github.com/retlehs/roots.git ./wp-content/themes/roots
git submodule init
git submodule update&lt;/pre&gt;

&lt;p&gt;&lt;i class=&#34;icon-warning-sign&#34;&gt;&lt;/i&gt;&lt;strong&gt;Update:&lt;/strong&gt; I have now forked mark&amp;#8217;s wordpress git and added roots as a submodule. You can simply clone or fork my repo to save a step. Get it here: &lt;a title=&#34;Clint Berry&#39;s Github Account&#34; href=&#34;https://github.com/clintberry/WordPress&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://github.com/clintberry/WordPress&#34;&gt;https://github.com/clintberry/WordPress&lt;/a&gt;&lt;/a&gt; Make sure to clone recursive to get the roots theme. This repo updates nightly to the latest wordpress and roots release.&lt;/p&gt;

&lt;p&gt;Now you have a quality blank theme installed into your git repo as a sub-module.&lt;/p&gt;

&lt;h2 id=&#34;3-adding-your-custom-design-wordpress-child-theme-5&#34;&gt;3. Adding Your Custom Design (WordPress Child Theme)&lt;/h2&gt;

&lt;p&gt;Since we have added the new blank theme as a git submodule, we don&amp;#8217;t want to edit that theme directly. This could cause problems when/if we want to update our code base for the theme. To better avoid update problems, we can use the often-under-utilized-wordpress feature called child themes. Child themes allow you essentially &amp;#8220;inherit&amp;#8221; all the functionality of a &amp;#8220;base&amp;#8221; theme. In this case, we will create a child theme &amp;#8220;MyTheme&amp;#8221; that will have access to all the functionality of our base theme &amp;#8220;Roots&amp;#8221;.&lt;/p&gt;

&lt;p&gt;Creating child themes in wordpress is simple:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Add a new folder to your wordpress themes directory called &amp;#8220;MyTheme&amp;#8221;&lt;/li&gt;
&lt;li&gt;Create a file called &amp;#8220;style.css&amp;#8221; with the following text: &lt;pre class=&#34;wp-code-highlight prettyprint&#34;&gt;/*
Theme Name:     MyProject
Theme URI:      &lt;a href=&#34;http://clintberry.com/&#34;&gt;http://clintberry.com/&lt;/a&gt;
Description:    Roots Child Theme
Author:         Clint Berry
Author URI:     &lt;a href=&#34;http://clintberry.com&#34;&gt;http://clintberry.com&lt;/a&gt;
Template:       roots
Version:        0.1.0
*/&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;@import url(&amp;ldquo;../twentyten/style.css&amp;rdquo;);
&lt;/pre&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Take notice of the &amp;amp;#8220;Template: roots&amp;amp;#8221; field. That is what lets WordPress know that this is a child theme and to inherit all of the roots functionality. Also since this style.css file overwrites the roots css file, we import the css file from roots. &amp;lt;/li&amp;gt; 

  * Create a functions.php file to add any custom WordPress functions. WordPress will load your new functions.php file along with the Roots functions.php file, so all is well.
  * Copy any template file you want to change from the Roots theme to your new child theme directory. Any template file found in your new directory will overwrite the template in Roots.&amp;lt;/ol&amp;gt; 

Now you can start your theme development with an HTML5 bang! Child themes make it much easier to get started and even keep your file structure a big cleaner. 

## Update WordPress Like A Pro

Yes, you could update WordPress in the admin panel, but you want to do it in a much cooler, easier-to-revert way. With Git, now you can. First, backup your database. Then in the root wordpress directory, update your Git repo by using git fetch:
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;`&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Now merge in any updates from your current branch, or merge in a new branch altogether. This command merges the latest update from the 3.2 branch into your WordPress install:

``If you have developed WordPress sites for clients this process might sound familiar to you:
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Get a new client that wants a wordpress site&lt;/li&gt;
&lt;li&gt;Download the most recent wordpress&lt;/li&gt;
&lt;li&gt;Find a good current blank wordpress theme to start implementing the design&lt;/li&gt;
&lt;li&gt;Upload to a staging server to for client to see&lt;/li&gt;
&lt;li&gt;Client requests changes&lt;/li&gt;
&lt;li&gt;You make changes on local server, then upload to staging server&lt;/li&gt;
&lt;li&gt;Repeat last three steps until finished and then you deploy the site to live&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After lots of trial and error, I have come up with a process that is more efficient, and allows rapid development of wordpress sites. I use Git, Git Submodules, and WordPress child themes to get going quicker and keep code up to date with minimal effort. (If your not using a &lt;a href=&#34;http://en.wikipedia.org/wiki/Revision_control&#34; target=&#34;_blank&#34;&gt;revision control &lt;/a&gt;system like &lt;a href=&#34;http://git-scm.com/&#34; target=&#34;_blank&#34;&gt;Git&lt;/a&gt; or &lt;a href=&#34;http://subversion.tigris.org/&#34; target=&#34;_blank&#34;&gt;SVN&lt;/a&gt; for development, then check out &lt;del datetime=&#34;2012-04-22T20:33:39+00:00&#34;&gt;&lt;a href=&#34;http://stackoverflow.com/questions/132520/good-excuses-not-to-use-version-control&#34; target=&#34;_blank&#34;&gt;this funny question and answer session on Stack Overflow&lt;/a&gt;&lt;/del&gt; &lt;strong&gt;Update:&lt;/strong&gt; Stack Overflow moderators removed the question&amp;#8230; bummer. Check out the funny-ness in the &lt;a href=&#34;http://web.archive.org/web/20100722082534/http://stackoverflow.com/questions/132520/good-excuses-not-to-use-version-control&#34; title=&#34;Why to use version control&#34; target=&#34;_blank&#34;&gt;wayback machine internet archiver&lt;/a&gt; instead)&lt;/p&gt;

&lt;p&gt;For this rapid WordPress development cycle, you will need to have Git installed.&lt;/p&gt;

&lt;h2 id=&#34;1-get-the-most-current-wordpress-6&#34;&gt;1. Get the Most Current WordPress&lt;/h2&gt;

&lt;p&gt;The wordpress core dev team uses SVN to manage wordpress development. But I want to use Git for speed and easy branching. Fortunately there is a &lt;a href=&#34;https://github.com/WordPress/WordPress&#34; target=&#34;_blank&#34;&gt;great WordPress git clone&lt;/a&gt; that is updated every fifteen minutes. To get the most recent version of WordPress, simply clone that repo to your project directory.&lt;/p&gt;

&lt;pre class=&#34;wp-code-highlight prettyprint&#34;&gt;mkdir projectA
git clone https://github.com/markjaquith/WordPress.git ./projectA
cd projectA
git checkout origin/3.2-branch&lt;/pre&gt;

&lt;p&gt;Now you have the most recent version of wordpress, and it will be easier than ever to upgrade wordpress and revert if something goes wrong. But we will get into the upgrade process later.&lt;/p&gt;

&lt;h2 id=&#34;2-starting-with-a-quality-blank-theme-6&#34;&gt;2. Starting with a Quality Blank Theme&lt;/h2&gt;

&lt;p&gt;To help get your new WordPress project off the ground, let&amp;#8217;s get a quality blank theme that updates regularly. I usually use the &lt;a title=&#34;Roots WordPress Theme&#34; href=&#34;http://www.rootstheme.com/&#34; target=&#34;_blank&#34;&gt;Roots theme&lt;/a&gt;, which is a quality HTML5 wordpress theme that updates regularly. To make sure our theme stays up to date with the latest wordpress updates, we will add the Roots theme as a Git Submodule. This allows us to essentially add a git repository inside of another repository. Why do this? Because we can update our theme code to the latest release with a simple Git command, instead of downloading and merging on our own. To add the sub-module, change to your project directory and add the sub-module to the themes folder then initialize it:&lt;/p&gt;

&lt;pre class=&#34;wp-code-highlight prettyprint&#34;&gt;cd projectA
git submodule add https://github.com/retlehs/roots.git ./wp-content/themes/roots
git submodule init
git submodule update&lt;/pre&gt;

&lt;p&gt;&lt;i class=&#34;icon-warning-sign&#34;&gt;&lt;/i&gt;&lt;strong&gt;Update:&lt;/strong&gt; I have now forked mark&amp;#8217;s wordpress git and added roots as a submodule. You can simply clone or fork my repo to save a step. Get it here: &lt;a title=&#34;Clint Berry&#39;s Github Account&#34; href=&#34;https://github.com/clintberry/WordPress&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://github.com/clintberry/WordPress&#34;&gt;https://github.com/clintberry/WordPress&lt;/a&gt;&lt;/a&gt; Make sure to clone recursive to get the roots theme. This repo updates nightly to the latest wordpress and roots release.&lt;/p&gt;

&lt;p&gt;Now you have a quality blank theme installed into your git repo as a sub-module.&lt;/p&gt;

&lt;h2 id=&#34;3-adding-your-custom-design-wordpress-child-theme-6&#34;&gt;3. Adding Your Custom Design (WordPress Child Theme)&lt;/h2&gt;

&lt;p&gt;Since we have added the new blank theme as a git submodule, we don&amp;#8217;t want to edit that theme directly. This could cause problems when/if we want to update our code base for the theme. To better avoid update problems, we can use the often-under-utilized-wordpress feature called child themes. Child themes allow you essentially &amp;#8220;inherit&amp;#8221; all the functionality of a &amp;#8220;base&amp;#8221; theme. In this case, we will create a child theme &amp;#8220;MyTheme&amp;#8221; that will have access to all the functionality of our base theme &amp;#8220;Roots&amp;#8221;.&lt;/p&gt;

&lt;p&gt;Creating child themes in wordpress is simple:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Add a new folder to your wordpress themes directory called &amp;#8220;MyTheme&amp;#8221;&lt;/li&gt;
&lt;li&gt;Create a file called &amp;#8220;style.css&amp;#8221; with the following text: &lt;pre class=&#34;wp-code-highlight prettyprint&#34;&gt;/*
Theme Name:     MyProject
Theme URI:      &lt;a href=&#34;http://clintberry.com/&#34;&gt;http://clintberry.com/&lt;/a&gt;
Description:    Roots Child Theme
Author:         Clint Berry
Author URI:     &lt;a href=&#34;http://clintberry.com&#34;&gt;http://clintberry.com&lt;/a&gt;
Template:       roots
Version:        0.1.0
*/&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;@import url(&amp;ldquo;../twentyten/style.css&amp;rdquo;);
&lt;/pre&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Take notice of the &amp;amp;#8220;Template: roots&amp;amp;#8221; field. That is what lets WordPress know that this is a child theme and to inherit all of the roots functionality. Also since this style.css file overwrites the roots css file, we import the css file from roots. &amp;lt;/li&amp;gt; 

  * Create a functions.php file to add any custom WordPress functions. WordPress will load your new functions.php file along with the Roots functions.php file, so all is well.
  * Copy any template file you want to change from the Roots theme to your new child theme directory. Any template file found in your new directory will overwrite the template in Roots.&amp;lt;/ol&amp;gt; 

Now you can start your theme development with an HTML5 bang! Child themes make it much easier to get started and even keep your file structure a big cleaner. 

## Update WordPress Like A Pro

Yes, you could update WordPress in the admin panel, but you want to do it in a much cooler, easier-to-revert way. With Git, now you can. First, backup your database. Then in the root wordpress directory, update your Git repo by using git fetch:

`If you have developed WordPress sites for clients this process might sound familiar to you:
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Get a new client that wants a wordpress site&lt;/li&gt;
&lt;li&gt;Download the most recent wordpress&lt;/li&gt;
&lt;li&gt;Find a good current blank wordpress theme to start implementing the design&lt;/li&gt;
&lt;li&gt;Upload to a staging server to for client to see&lt;/li&gt;
&lt;li&gt;Client requests changes&lt;/li&gt;
&lt;li&gt;You make changes on local server, then upload to staging server&lt;/li&gt;
&lt;li&gt;Repeat last three steps until finished and then you deploy the site to live&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After lots of trial and error, I have come up with a process that is more efficient, and allows rapid development of wordpress sites. I use Git, Git Submodules, and WordPress child themes to get going quicker and keep code up to date with minimal effort. (If your not using a &lt;a href=&#34;http://en.wikipedia.org/wiki/Revision_control&#34; target=&#34;_blank&#34;&gt;revision control &lt;/a&gt;system like &lt;a href=&#34;http://git-scm.com/&#34; target=&#34;_blank&#34;&gt;Git&lt;/a&gt; or &lt;a href=&#34;http://subversion.tigris.org/&#34; target=&#34;_blank&#34;&gt;SVN&lt;/a&gt; for development, then check out &lt;del datetime=&#34;2012-04-22T20:33:39+00:00&#34;&gt;&lt;a href=&#34;http://stackoverflow.com/questions/132520/good-excuses-not-to-use-version-control&#34; target=&#34;_blank&#34;&gt;this funny question and answer session on Stack Overflow&lt;/a&gt;&lt;/del&gt; &lt;strong&gt;Update:&lt;/strong&gt; Stack Overflow moderators removed the question&amp;#8230; bummer. Check out the funny-ness in the &lt;a href=&#34;http://web.archive.org/web/20100722082534/http://stackoverflow.com/questions/132520/good-excuses-not-to-use-version-control&#34; title=&#34;Why to use version control&#34; target=&#34;_blank&#34;&gt;wayback machine internet archiver&lt;/a&gt; instead)&lt;/p&gt;

&lt;p&gt;For this rapid WordPress development cycle, you will need to have Git installed.&lt;/p&gt;

&lt;h2 id=&#34;1-get-the-most-current-wordpress-7&#34;&gt;1. Get the Most Current WordPress&lt;/h2&gt;

&lt;p&gt;The wordpress core dev team uses SVN to manage wordpress development. But I want to use Git for speed and easy branching. Fortunately there is a &lt;a href=&#34;https://github.com/WordPress/WordPress&#34; target=&#34;_blank&#34;&gt;great WordPress git clone&lt;/a&gt; that is updated every fifteen minutes. To get the most recent version of WordPress, simply clone that repo to your project directory.&lt;/p&gt;

&lt;pre class=&#34;wp-code-highlight prettyprint&#34;&gt;mkdir projectA
git clone https://github.com/markjaquith/WordPress.git ./projectA
cd projectA
git checkout origin/3.2-branch&lt;/pre&gt;

&lt;p&gt;Now you have the most recent version of wordpress, and it will be easier than ever to upgrade wordpress and revert if something goes wrong. But we will get into the upgrade process later.&lt;/p&gt;

&lt;h2 id=&#34;2-starting-with-a-quality-blank-theme-7&#34;&gt;2. Starting with a Quality Blank Theme&lt;/h2&gt;

&lt;p&gt;To help get your new WordPress project off the ground, let&amp;#8217;s get a quality blank theme that updates regularly. I usually use the &lt;a title=&#34;Roots WordPress Theme&#34; href=&#34;http://www.rootstheme.com/&#34; target=&#34;_blank&#34;&gt;Roots theme&lt;/a&gt;, which is a quality HTML5 wordpress theme that updates regularly. To make sure our theme stays up to date with the latest wordpress updates, we will add the Roots theme as a Git Submodule. This allows us to essentially add a git repository inside of another repository. Why do this? Because we can update our theme code to the latest release with a simple Git command, instead of downloading and merging on our own. To add the sub-module, change to your project directory and add the sub-module to the themes folder then initialize it:&lt;/p&gt;

&lt;pre class=&#34;wp-code-highlight prettyprint&#34;&gt;cd projectA
git submodule add https://github.com/retlehs/roots.git ./wp-content/themes/roots
git submodule init
git submodule update&lt;/pre&gt;

&lt;p&gt;&lt;i class=&#34;icon-warning-sign&#34;&gt;&lt;/i&gt;&lt;strong&gt;Update:&lt;/strong&gt; I have now forked mark&amp;#8217;s wordpress git and added roots as a submodule. You can simply clone or fork my repo to save a step. Get it here: &lt;a title=&#34;Clint Berry&#39;s Github Account&#34; href=&#34;https://github.com/clintberry/WordPress&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://github.com/clintberry/WordPress&#34;&gt;https://github.com/clintberry/WordPress&lt;/a&gt;&lt;/a&gt; Make sure to clone recursive to get the roots theme. This repo updates nightly to the latest wordpress and roots release.&lt;/p&gt;

&lt;p&gt;Now you have a quality blank theme installed into your git repo as a sub-module.&lt;/p&gt;

&lt;h2 id=&#34;3-adding-your-custom-design-wordpress-child-theme-7&#34;&gt;3. Adding Your Custom Design (WordPress Child Theme)&lt;/h2&gt;

&lt;p&gt;Since we have added the new blank theme as a git submodule, we don&amp;#8217;t want to edit that theme directly. This could cause problems when/if we want to update our code base for the theme. To better avoid update problems, we can use the often-under-utilized-wordpress feature called child themes. Child themes allow you essentially &amp;#8220;inherit&amp;#8221; all the functionality of a &amp;#8220;base&amp;#8221; theme. In this case, we will create a child theme &amp;#8220;MyTheme&amp;#8221; that will have access to all the functionality of our base theme &amp;#8220;Roots&amp;#8221;.&lt;/p&gt;

&lt;p&gt;Creating child themes in wordpress is simple:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Add a new folder to your wordpress themes directory called &amp;#8220;MyTheme&amp;#8221;&lt;/li&gt;
&lt;li&gt;Create a file called &amp;#8220;style.css&amp;#8221; with the following text: &lt;pre class=&#34;wp-code-highlight prettyprint&#34;&gt;/*
Theme Name:     MyProject
Theme URI:      &lt;a href=&#34;http://clintberry.com/&#34;&gt;http://clintberry.com/&lt;/a&gt;
Description:    Roots Child Theme
Author:         Clint Berry
Author URI:     &lt;a href=&#34;http://clintberry.com&#34;&gt;http://clintberry.com&lt;/a&gt;
Template:       roots
Version:        0.1.0
*/&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;@import url(&amp;ldquo;../twentyten/style.css&amp;rdquo;);
&lt;/pre&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Take notice of the &amp;amp;#8220;Template: roots&amp;amp;#8221; field. That is what lets WordPress know that this is a child theme and to inherit all of the roots functionality. Also since this style.css file overwrites the roots css file, we import the css file from roots. &amp;lt;/li&amp;gt; 

  * Create a functions.php file to add any custom WordPress functions. WordPress will load your new functions.php file along with the Roots functions.php file, so all is well.
  * Copy any template file you want to change from the Roots theme to your new child theme directory. Any template file found in your new directory will overwrite the template in Roots.&amp;lt;/ol&amp;gt; 

Now you can start your theme development with an HTML5 bang! Child themes make it much easier to get started and even keep your file structure a big cleaner. 

## Update WordPress Like A Pro

Yes, you could update WordPress in the admin panel, but you want to do it in a much cooler, easier-to-revert way. With Git, now you can. First, backup your database. Then in the root wordpress directory, update your Git repo by using git fetch:
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;`&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Now merge in any updates from your current branch, or merge in a new branch altogether. This command merges the latest update from the 3.2 branch into your WordPress install:
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;``&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Now you have the most recent version of WordPress. It is a beautiful thing.

Don&amp;amp;#8217;t worry! If it breaks something, it is easy to go back. First enter:
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;  
    This will output the most recent changes to your repo. Look for your last change which was merging. It will have a line like this:
    
    &amp;lt;pre class=&amp;quot;wp-code-highlight prettyprint&amp;quot;&amp;gt;Merge remote branch &amp;amp;#039;upstream/master&amp;amp;#039;
&amp;lt;/pre&amp;gt;
    
    Take the commit sha (the long number right after the word commit) that is located on the commit before the Merge line. Take that sha and enter the command:
  
    ````If you have developed WordPress sites for clients this process might sound familiar to you:

  * Get a new client that wants a wordpress site
  * Download the most recent wordpress
  * Find a good current blank wordpress theme to start implementing the design
  * Upload to a staging server to for client to see
  * Client requests changes
  * You make changes on local server, then upload to staging server
  * Repeat last three steps until finished and then you deploy the site to live

After lots of trial and error, I have come up with a process that is more efficient, and allows rapid development of wordpress sites. I use Git, Git Submodules, and WordPress child themes to get going quicker and keep code up to date with minimal effort. (If your not using a &amp;lt;a href=&amp;quot;http://en.wikipedia.org/wiki/Revision_control&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;revision control &amp;lt;/a&amp;gt;system like &amp;lt;a href=&amp;quot;http://git-scm.com/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;Git&amp;lt;/a&amp;gt; or &amp;lt;a href=&amp;quot;http://subversion.tigris.org/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;SVN&amp;lt;/a&amp;gt; for development, then check out &amp;lt;del datetime=&amp;quot;2012-04-22T20:33:39+00:00&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;http://stackoverflow.com/questions/132520/good-excuses-not-to-use-version-control&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;this funny question and answer session on Stack Overflow&amp;lt;/a&amp;gt;&amp;lt;/del&amp;gt; **Update:** Stack Overflow moderators removed the question&amp;amp;#8230; bummer. Check out the funny-ness in the &amp;lt;a href=&amp;quot;http://web.archive.org/web/20100722082534/http://stackoverflow.com/questions/132520/good-excuses-not-to-use-version-control&amp;quot; title=&amp;quot;Why to use version control&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;wayback machine internet archiver&amp;lt;/a&amp;gt; instead)
  



  
For this rapid WordPress development cycle, you will need to have Git installed.

## 1. Get the Most Current WordPress

The wordpress core dev team uses SVN to manage wordpress development. But I want to use Git for speed and easy branching. Fortunately there is a &amp;lt;a href=&amp;quot;https://github.com/WordPress/WordPress&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;great WordPress git clone&amp;lt;/a&amp;gt; that is updated every fifteen minutes. To get the most recent version of WordPress, simply clone that repo to your project directory.

&amp;lt;pre class=&amp;quot;wp-code-highlight prettyprint&amp;quot;&amp;gt;mkdir projectA
git clone https://github.com/markjaquith/WordPress.git ./projectA
cd projectA
git checkout origin/3.2-branch&amp;lt;/pre&amp;gt;

Now you have the most recent version of wordpress, and it will be easier than ever to upgrade wordpress and revert if something goes wrong. But we will get into the upgrade process later.

## 2. Starting with a Quality Blank Theme

To help get your new WordPress project off the ground, let&amp;amp;#8217;s get a quality blank theme that updates regularly. I usually use the &amp;lt;a title=&amp;quot;Roots WordPress Theme&amp;quot; href=&amp;quot;http://www.rootstheme.com/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;Roots theme&amp;lt;/a&amp;gt;, which is a quality HTML5 wordpress theme that updates regularly. To make sure our theme stays up to date with the latest wordpress updates, we will add the Roots theme as a Git Submodule. This allows us to essentially add a git repository inside of another repository. Why do this? Because we can update our theme code to the latest release with a simple Git command, instead of downloading and merging on our own. To add the sub-module, change to your project directory and add the sub-module to the themes folder then initialize it:

&amp;lt;pre class=&amp;quot;wp-code-highlight prettyprint&amp;quot;&amp;gt;cd projectA
git submodule add https://github.com/retlehs/roots.git ./wp-content/themes/roots
git submodule init
git submodule update&amp;lt;/pre&amp;gt;

&amp;lt;i class=&amp;quot;icon-warning-sign&amp;quot;&amp;gt;&amp;lt;/i&amp;gt;**Update:** I have now forked mark&amp;amp;#8217;s wordpress git and added roots as a submodule. You can simply clone or fork my repo to save a step. Get it here: &amp;lt;a title=&amp;quot;Clint Berry&#39;s Github Account&amp;quot; href=&amp;quot;https://github.com/clintberry/WordPress&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;https://github.com/clintberry/WordPress&amp;lt;/a&amp;gt; Make sure to clone recursive to get the roots theme. This repo updates nightly to the latest wordpress and roots release.

Now you have a quality blank theme installed into your git repo as a sub-module.

## 3. Adding Your Custom Design (WordPress Child Theme)

Since we have added the new blank theme as a git submodule, we don&amp;amp;#8217;t want to edit that theme directly. This could cause problems when/if we want to update our code base for the theme. To better avoid update problems, we can use the often-under-utilized-wordpress feature called child themes. Child themes allow you essentially &amp;amp;#8220;inherit&amp;amp;#8221; all the functionality of a &amp;amp;#8220;base&amp;amp;#8221; theme. In this case, we will create a child theme &amp;amp;#8220;MyTheme&amp;amp;#8221; that will have access to all the functionality of our base theme &amp;amp;#8220;Roots&amp;amp;#8221;.

Creating child themes in wordpress is simple:

  1. Add a new folder to your wordpress themes directory called &amp;amp;#8220;MyTheme&amp;amp;#8221;
  2. Create a file called &amp;amp;#8220;style.css&amp;amp;#8221; with the following text: &amp;lt;pre class=&amp;quot;wp-code-highlight prettyprint&amp;quot;&amp;gt;/*
Theme Name:     MyProject
Theme URI:      http://clintberry.com/
Description:    Roots Child Theme
Author:         Clint Berry
Author URI:     http://clintberry.com
Template:       roots
Version:        0.1.0
*/

@import url(&amp;quot;../twentyten/style.css&amp;quot;);
&amp;lt;/pre&amp;gt;
    
    Take notice of the &amp;amp;#8220;Template: roots&amp;amp;#8221; field. That is what lets WordPress know that this is a child theme and to inherit all of the roots functionality. Also since this style.css file overwrites the roots css file, we import the css file from roots. &amp;lt;/li&amp;gt; 
    
      * Create a functions.php file to add any custom WordPress functions. WordPress will load your new functions.php file along with the Roots functions.php file, so all is well.
      * Copy any template file you want to change from the Roots theme to your new child theme directory. Any template file found in your new directory will overwrite the template in Roots.&amp;lt;/ol&amp;gt; 
    
    Now you can start your theme development with an HTML5 bang! Child themes make it much easier to get started and even keep your file structure a big cleaner. 
    
    ## Update WordPress Like A Pro
    
    Yes, you could update WordPress in the admin panel, but you want to do it in a much cooler, easier-to-revert way. With Git, now you can. First, backup your database. Then in the root wordpress directory, update your Git repo by using git fetch:
  
    `If you have developed WordPress sites for clients this process might sound familiar to you:

  * Get a new client that wants a wordpress site
  * Download the most recent wordpress
  * Find a good current blank wordpress theme to start implementing the design
  * Upload to a staging server to for client to see
  * Client requests changes
  * You make changes on local server, then upload to staging server
  * Repeat last three steps until finished and then you deploy the site to live

After lots of trial and error, I have come up with a process that is more efficient, and allows rapid development of wordpress sites. I use Git, Git Submodules, and WordPress child themes to get going quicker and keep code up to date with minimal effort. (If your not using a &amp;lt;a href=&amp;quot;http://en.wikipedia.org/wiki/Revision_control&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;revision control &amp;lt;/a&amp;gt;system like &amp;lt;a href=&amp;quot;http://git-scm.com/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;Git&amp;lt;/a&amp;gt; or &amp;lt;a href=&amp;quot;http://subversion.tigris.org/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;SVN&amp;lt;/a&amp;gt; for development, then check out &amp;lt;del datetime=&amp;quot;2012-04-22T20:33:39+00:00&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;http://stackoverflow.com/questions/132520/good-excuses-not-to-use-version-control&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;this funny question and answer session on Stack Overflow&amp;lt;/a&amp;gt;&amp;lt;/del&amp;gt; **Update:** Stack Overflow moderators removed the question&amp;amp;#8230; bummer. Check out the funny-ness in the &amp;lt;a href=&amp;quot;http://web.archive.org/web/20100722082534/http://stackoverflow.com/questions/132520/good-excuses-not-to-use-version-control&amp;quot; title=&amp;quot;Why to use version control&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;wayback machine internet archiver&amp;lt;/a&amp;gt; instead)
  



  
For this rapid WordPress development cycle, you will need to have Git installed.

## 1. Get the Most Current WordPress

The wordpress core dev team uses SVN to manage wordpress development. But I want to use Git for speed and easy branching. Fortunately there is a &amp;lt;a href=&amp;quot;https://github.com/WordPress/WordPress&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;great WordPress git clone&amp;lt;/a&amp;gt; that is updated every fifteen minutes. To get the most recent version of WordPress, simply clone that repo to your project directory.

&amp;lt;pre class=&amp;quot;wp-code-highlight prettyprint&amp;quot;&amp;gt;mkdir projectA
git clone https://github.com/markjaquith/WordPress.git ./projectA
cd projectA
git checkout origin/3.2-branch&amp;lt;/pre&amp;gt;

Now you have the most recent version of wordpress, and it will be easier than ever to upgrade wordpress and revert if something goes wrong. But we will get into the upgrade process later.

## 2. Starting with a Quality Blank Theme

To help get your new WordPress project off the ground, let&amp;amp;#8217;s get a quality blank theme that updates regularly. I usually use the &amp;lt;a title=&amp;quot;Roots WordPress Theme&amp;quot; href=&amp;quot;http://www.rootstheme.com/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;Roots theme&amp;lt;/a&amp;gt;, which is a quality HTML5 wordpress theme that updates regularly. To make sure our theme stays up to date with the latest wordpress updates, we will add the Roots theme as a Git Submodule. This allows us to essentially add a git repository inside of another repository. Why do this? Because we can update our theme code to the latest release with a simple Git command, instead of downloading and merging on our own. To add the sub-module, change to your project directory and add the sub-module to the themes folder then initialize it:

&amp;lt;pre class=&amp;quot;wp-code-highlight prettyprint&amp;quot;&amp;gt;cd projectA
git submodule add https://github.com/retlehs/roots.git ./wp-content/themes/roots
git submodule init
git submodule update&amp;lt;/pre&amp;gt;

&amp;lt;i class=&amp;quot;icon-warning-sign&amp;quot;&amp;gt;&amp;lt;/i&amp;gt;**Update:** I have now forked mark&amp;amp;#8217;s wordpress git and added roots as a submodule. You can simply clone or fork my repo to save a step. Get it here: &amp;lt;a title=&amp;quot;Clint Berry&#39;s Github Account&amp;quot; href=&amp;quot;https://github.com/clintberry/WordPress&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;https://github.com/clintberry/WordPress&amp;lt;/a&amp;gt; Make sure to clone recursive to get the roots theme. This repo updates nightly to the latest wordpress and roots release.

Now you have a quality blank theme installed into your git repo as a sub-module.

## 3. Adding Your Custom Design (WordPress Child Theme)

Since we have added the new blank theme as a git submodule, we don&amp;amp;#8217;t want to edit that theme directly. This could cause problems when/if we want to update our code base for the theme. To better avoid update problems, we can use the often-under-utilized-wordpress feature called child themes. Child themes allow you essentially &amp;amp;#8220;inherit&amp;amp;#8221; all the functionality of a &amp;amp;#8220;base&amp;amp;#8221; theme. In this case, we will create a child theme &amp;amp;#8220;MyTheme&amp;amp;#8221; that will have access to all the functionality of our base theme &amp;amp;#8220;Roots&amp;amp;#8221;.

Creating child themes in wordpress is simple:

  1. Add a new folder to your wordpress themes directory called &amp;amp;#8220;MyTheme&amp;amp;#8221;
  2. Create a file called &amp;amp;#8220;style.css&amp;amp;#8221; with the following text: &amp;lt;pre class=&amp;quot;wp-code-highlight prettyprint&amp;quot;&amp;gt;/*
Theme Name:     MyProject
Theme URI:      http://clintberry.com/
Description:    Roots Child Theme
Author:         Clint Berry
Author URI:     http://clintberry.com
Template:       roots
Version:        0.1.0
*/

@import url(&amp;quot;../twentyten/style.css&amp;quot;);
&amp;lt;/pre&amp;gt;
    
    Take notice of the &amp;amp;#8220;Template: roots&amp;amp;#8221; field. That is what lets WordPress know that this is a child theme and to inherit all of the roots functionality. Also since this style.css file overwrites the roots css file, we import the css file from roots. &amp;lt;/li&amp;gt; 
    
      * Create a functions.php file to add any custom WordPress functions. WordPress will load your new functions.php file along with the Roots functions.php file, so all is well.
      * Copy any template file you want to change from the Roots theme to your new child theme directory. Any template file found in your new directory will overwrite the template in Roots.&amp;lt;/ol&amp;gt; 
    
    Now you can start your theme development with an HTML5 bang! Child themes make it much easier to get started and even keep your file structure a big cleaner. 
    
    ## Update WordPress Like A Pro
    
    Yes, you could update WordPress in the admin panel, but you want to do it in a much cooler, easier-to-revert way. With Git, now you can. First, backup your database. Then in the root wordpress directory, update your Git repo by using git fetch:
  
` 
  
    Now merge in any updates from your current branch, or merge in a new branch altogether. This command merges the latest update from the 3.2 branch into your WordPress install:
  
    ``If you have developed WordPress sites for clients this process might sound familiar to you:

  * Get a new client that wants a wordpress site
  * Download the most recent wordpress
  * Find a good current blank wordpress theme to start implementing the design
  * Upload to a staging server to for client to see
  * Client requests changes
  * You make changes on local server, then upload to staging server
  * Repeat last three steps until finished and then you deploy the site to live

After lots of trial and error, I have come up with a process that is more efficient, and allows rapid development of wordpress sites. I use Git, Git Submodules, and WordPress child themes to get going quicker and keep code up to date with minimal effort. (If your not using a &amp;lt;a href=&amp;quot;http://en.wikipedia.org/wiki/Revision_control&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;revision control &amp;lt;/a&amp;gt;system like &amp;lt;a href=&amp;quot;http://git-scm.com/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;Git&amp;lt;/a&amp;gt; or &amp;lt;a href=&amp;quot;http://subversion.tigris.org/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;SVN&amp;lt;/a&amp;gt; for development, then check out &amp;lt;del datetime=&amp;quot;2012-04-22T20:33:39+00:00&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;http://stackoverflow.com/questions/132520/good-excuses-not-to-use-version-control&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;this funny question and answer session on Stack Overflow&amp;lt;/a&amp;gt;&amp;lt;/del&amp;gt; **Update:** Stack Overflow moderators removed the question&amp;amp;#8230; bummer. Check out the funny-ness in the &amp;lt;a href=&amp;quot;http://web.archive.org/web/20100722082534/http://stackoverflow.com/questions/132520/good-excuses-not-to-use-version-control&amp;quot; title=&amp;quot;Why to use version control&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;wayback machine internet archiver&amp;lt;/a&amp;gt; instead)
  



  
For this rapid WordPress development cycle, you will need to have Git installed.

## 1. Get the Most Current WordPress

The wordpress core dev team uses SVN to manage wordpress development. But I want to use Git for speed and easy branching. Fortunately there is a &amp;lt;a href=&amp;quot;https://github.com/WordPress/WordPress&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;great WordPress git clone&amp;lt;/a&amp;gt; that is updated every fifteen minutes. To get the most recent version of WordPress, simply clone that repo to your project directory.

&amp;lt;pre class=&amp;quot;wp-code-highlight prettyprint&amp;quot;&amp;gt;mkdir projectA
git clone https://github.com/markjaquith/WordPress.git ./projectA
cd projectA
git checkout origin/3.2-branch&amp;lt;/pre&amp;gt;

Now you have the most recent version of wordpress, and it will be easier than ever to upgrade wordpress and revert if something goes wrong. But we will get into the upgrade process later.

## 2. Starting with a Quality Blank Theme

To help get your new WordPress project off the ground, let&amp;amp;#8217;s get a quality blank theme that updates regularly. I usually use the &amp;lt;a title=&amp;quot;Roots WordPress Theme&amp;quot; href=&amp;quot;http://www.rootstheme.com/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;Roots theme&amp;lt;/a&amp;gt;, which is a quality HTML5 wordpress theme that updates regularly. To make sure our theme stays up to date with the latest wordpress updates, we will add the Roots theme as a Git Submodule. This allows us to essentially add a git repository inside of another repository. Why do this? Because we can update our theme code to the latest release with a simple Git command, instead of downloading and merging on our own. To add the sub-module, change to your project directory and add the sub-module to the themes folder then initialize it:

&amp;lt;pre class=&amp;quot;wp-code-highlight prettyprint&amp;quot;&amp;gt;cd projectA
git submodule add https://github.com/retlehs/roots.git ./wp-content/themes/roots
git submodule init
git submodule update&amp;lt;/pre&amp;gt;

&amp;lt;i class=&amp;quot;icon-warning-sign&amp;quot;&amp;gt;&amp;lt;/i&amp;gt;**Update:** I have now forked mark&amp;amp;#8217;s wordpress git and added roots as a submodule. You can simply clone or fork my repo to save a step. Get it here: &amp;lt;a title=&amp;quot;Clint Berry&#39;s Github Account&amp;quot; href=&amp;quot;https://github.com/clintberry/WordPress&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;https://github.com/clintberry/WordPress&amp;lt;/a&amp;gt; Make sure to clone recursive to get the roots theme. This repo updates nightly to the latest wordpress and roots release.

Now you have a quality blank theme installed into your git repo as a sub-module.

## 3. Adding Your Custom Design (WordPress Child Theme)

Since we have added the new blank theme as a git submodule, we don&amp;amp;#8217;t want to edit that theme directly. This could cause problems when/if we want to update our code base for the theme. To better avoid update problems, we can use the often-under-utilized-wordpress feature called child themes. Child themes allow you essentially &amp;amp;#8220;inherit&amp;amp;#8221; all the functionality of a &amp;amp;#8220;base&amp;amp;#8221; theme. In this case, we will create a child theme &amp;amp;#8220;MyTheme&amp;amp;#8221; that will have access to all the functionality of our base theme &amp;amp;#8220;Roots&amp;amp;#8221;.

Creating child themes in wordpress is simple:

  1. Add a new folder to your wordpress themes directory called &amp;amp;#8220;MyTheme&amp;amp;#8221;
  2. Create a file called &amp;amp;#8220;style.css&amp;amp;#8221; with the following text: &amp;lt;pre class=&amp;quot;wp-code-highlight prettyprint&amp;quot;&amp;gt;/*
Theme Name:     MyProject
Theme URI:      http://clintberry.com/
Description:    Roots Child Theme
Author:         Clint Berry
Author URI:     http://clintberry.com
Template:       roots
Version:        0.1.0
*/

@import url(&amp;quot;../twentyten/style.css&amp;quot;);
&amp;lt;/pre&amp;gt;
    
    Take notice of the &amp;amp;#8220;Template: roots&amp;amp;#8221; field. That is what lets WordPress know that this is a child theme and to inherit all of the roots functionality. Also since this style.css file overwrites the roots css file, we import the css file from roots. &amp;lt;/li&amp;gt; 
    
      * Create a functions.php file to add any custom WordPress functions. WordPress will load your new functions.php file along with the Roots functions.php file, so all is well.
      * Copy any template file you want to change from the Roots theme to your new child theme directory. Any template file found in your new directory will overwrite the template in Roots.&amp;lt;/ol&amp;gt; 
    
    Now you can start your theme development with an HTML5 bang! Child themes make it much easier to get started and even keep your file structure a big cleaner. 
    
    ## Update WordPress Like A Pro
    
    Yes, you could update WordPress in the admin panel, but you want to do it in a much cooler, easier-to-revert way. With Git, now you can. First, backup your database. Then in the root wordpress directory, update your Git repo by using git fetch:
  
    `If you have developed WordPress sites for clients this process might sound familiar to you:

  * Get a new client that wants a wordpress site
  * Download the most recent wordpress
  * Find a good current blank wordpress theme to start implementing the design
  * Upload to a staging server to for client to see
  * Client requests changes
  * You make changes on local server, then upload to staging server
  * Repeat last three steps until finished and then you deploy the site to live

After lots of trial and error, I have come up with a process that is more efficient, and allows rapid development of wordpress sites. I use Git, Git Submodules, and WordPress child themes to get going quicker and keep code up to date with minimal effort. (If your not using a &amp;lt;a href=&amp;quot;http://en.wikipedia.org/wiki/Revision_control&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;revision control &amp;lt;/a&amp;gt;system like &amp;lt;a href=&amp;quot;http://git-scm.com/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;Git&amp;lt;/a&amp;gt; or &amp;lt;a href=&amp;quot;http://subversion.tigris.org/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;SVN&amp;lt;/a&amp;gt; for development, then check out &amp;lt;del datetime=&amp;quot;2012-04-22T20:33:39+00:00&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;http://stackoverflow.com/questions/132520/good-excuses-not-to-use-version-control&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;this funny question and answer session on Stack Overflow&amp;lt;/a&amp;gt;&amp;lt;/del&amp;gt; **Update:** Stack Overflow moderators removed the question&amp;amp;#8230; bummer. Check out the funny-ness in the &amp;lt;a href=&amp;quot;http://web.archive.org/web/20100722082534/http://stackoverflow.com/questions/132520/good-excuses-not-to-use-version-control&amp;quot; title=&amp;quot;Why to use version control&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;wayback machine internet archiver&amp;lt;/a&amp;gt; instead)
  



  
For this rapid WordPress development cycle, you will need to have Git installed.

## 1. Get the Most Current WordPress

The wordpress core dev team uses SVN to manage wordpress development. But I want to use Git for speed and easy branching. Fortunately there is a &amp;lt;a href=&amp;quot;https://github.com/WordPress/WordPress&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;great WordPress git clone&amp;lt;/a&amp;gt; that is updated every fifteen minutes. To get the most recent version of WordPress, simply clone that repo to your project directory.

&amp;lt;pre class=&amp;quot;wp-code-highlight prettyprint&amp;quot;&amp;gt;mkdir projectA
git clone https://github.com/markjaquith/WordPress.git ./projectA
cd projectA
git checkout origin/3.2-branch&amp;lt;/pre&amp;gt;

Now you have the most recent version of wordpress, and it will be easier than ever to upgrade wordpress and revert if something goes wrong. But we will get into the upgrade process later.

## 2. Starting with a Quality Blank Theme

To help get your new WordPress project off the ground, let&amp;amp;#8217;s get a quality blank theme that updates regularly. I usually use the &amp;lt;a title=&amp;quot;Roots WordPress Theme&amp;quot; href=&amp;quot;http://www.rootstheme.com/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;Roots theme&amp;lt;/a&amp;gt;, which is a quality HTML5 wordpress theme that updates regularly. To make sure our theme stays up to date with the latest wordpress updates, we will add the Roots theme as a Git Submodule. This allows us to essentially add a git repository inside of another repository. Why do this? Because we can update our theme code to the latest release with a simple Git command, instead of downloading and merging on our own. To add the sub-module, change to your project directory and add the sub-module to the themes folder then initialize it:

&amp;lt;pre class=&amp;quot;wp-code-highlight prettyprint&amp;quot;&amp;gt;cd projectA
git submodule add https://github.com/retlehs/roots.git ./wp-content/themes/roots
git submodule init
git submodule update&amp;lt;/pre&amp;gt;

&amp;lt;i class=&amp;quot;icon-warning-sign&amp;quot;&amp;gt;&amp;lt;/i&amp;gt;**Update:** I have now forked mark&amp;amp;#8217;s wordpress git and added roots as a submodule. You can simply clone or fork my repo to save a step. Get it here: &amp;lt;a title=&amp;quot;Clint Berry&#39;s Github Account&amp;quot; href=&amp;quot;https://github.com/clintberry/WordPress&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;https://github.com/clintberry/WordPress&amp;lt;/a&amp;gt; Make sure to clone recursive to get the roots theme. This repo updates nightly to the latest wordpress and roots release.

Now you have a quality blank theme installed into your git repo as a sub-module.

## 3. Adding Your Custom Design (WordPress Child Theme)

Since we have added the new blank theme as a git submodule, we don&amp;amp;#8217;t want to edit that theme directly. This could cause problems when/if we want to update our code base for the theme. To better avoid update problems, we can use the often-under-utilized-wordpress feature called child themes. Child themes allow you essentially &amp;amp;#8220;inherit&amp;amp;#8221; all the functionality of a &amp;amp;#8220;base&amp;amp;#8221; theme. In this case, we will create a child theme &amp;amp;#8220;MyTheme&amp;amp;#8221; that will have access to all the functionality of our base theme &amp;amp;#8220;Roots&amp;amp;#8221;.

Creating child themes in wordpress is simple:

  1. Add a new folder to your wordpress themes directory called &amp;amp;#8220;MyTheme&amp;amp;#8221;
  2. Create a file called &amp;amp;#8220;style.css&amp;amp;#8221; with the following text: &amp;lt;pre class=&amp;quot;wp-code-highlight prettyprint&amp;quot;&amp;gt;/*
Theme Name:     MyProject
Theme URI:      http://clintberry.com/
Description:    Roots Child Theme
Author:         Clint Berry
Author URI:     http://clintberry.com
Template:       roots
Version:        0.1.0
*/

@import url(&amp;quot;../twentyten/style.css&amp;quot;);
&amp;lt;/pre&amp;gt;
    
    Take notice of the &amp;amp;#8220;Template: roots&amp;amp;#8221; field. That is what lets WordPress know that this is a child theme and to inherit all of the roots functionality. Also since this style.css file overwrites the roots css file, we import the css file from roots. &amp;lt;/li&amp;gt; 
    
      * Create a functions.php file to add any custom WordPress functions. WordPress will load your new functions.php file along with the Roots functions.php file, so all is well.
      * Copy any template file you want to change from the Roots theme to your new child theme directory. Any template file found in your new directory will overwrite the template in Roots.&amp;lt;/ol&amp;gt; 
    
    Now you can start your theme development with an HTML5 bang! Child themes make it much easier to get started and even keep your file structure a big cleaner. 
    
    ## Update WordPress Like A Pro
    
    Yes, you could update WordPress in the admin panel, but you want to do it in a much cooler, easier-to-revert way. With Git, now you can. First, backup your database. Then in the root wordpress directory, update your Git repo by using git fetch:
  
` 
  
    Now merge in any updates from your current branch, or merge in a new branch altogether. This command merges the latest update from the 3.2 branch into your WordPress install:
  
`` 
  
    Now you have the most recent version of WordPress. It is a beautiful thing.
  
    Don&amp;amp;#8217;t worry! If it breaks something, it is easy to go back. First enter:
  
    ```If you have developed WordPress sites for clients this process might sound familiar to you:

  * Get a new client that wants a wordpress site
  * Download the most recent wordpress
  * Find a good current blank wordpress theme to start implementing the design
  * Upload to a staging server to for client to see
  * Client requests changes
  * You make changes on local server, then upload to staging server
  * Repeat last three steps until finished and then you deploy the site to live

After lots of trial and error, I have come up with a process that is more efficient, and allows rapid development of wordpress sites. I use Git, Git Submodules, and WordPress child themes to get going quicker and keep code up to date with minimal effort. (If your not using a &amp;lt;a href=&amp;quot;http://en.wikipedia.org/wiki/Revision_control&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;revision control &amp;lt;/a&amp;gt;system like &amp;lt;a href=&amp;quot;http://git-scm.com/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;Git&amp;lt;/a&amp;gt; or &amp;lt;a href=&amp;quot;http://subversion.tigris.org/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;SVN&amp;lt;/a&amp;gt; for development, then check out &amp;lt;del datetime=&amp;quot;2012-04-22T20:33:39+00:00&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;http://stackoverflow.com/questions/132520/good-excuses-not-to-use-version-control&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;this funny question and answer session on Stack Overflow&amp;lt;/a&amp;gt;&amp;lt;/del&amp;gt; **Update:** Stack Overflow moderators removed the question&amp;amp;#8230; bummer. Check out the funny-ness in the &amp;lt;a href=&amp;quot;http://web.archive.org/web/20100722082534/http://stackoverflow.com/questions/132520/good-excuses-not-to-use-version-control&amp;quot; title=&amp;quot;Why to use version control&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;wayback machine internet archiver&amp;lt;/a&amp;gt; instead)
  



  
For this rapid WordPress development cycle, you will need to have Git installed.

## 1. Get the Most Current WordPress

The wordpress core dev team uses SVN to manage wordpress development. But I want to use Git for speed and easy branching. Fortunately there is a &amp;lt;a href=&amp;quot;https://github.com/WordPress/WordPress&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;great WordPress git clone&amp;lt;/a&amp;gt; that is updated every fifteen minutes. To get the most recent version of WordPress, simply clone that repo to your project directory.

&amp;lt;pre class=&amp;quot;wp-code-highlight prettyprint&amp;quot;&amp;gt;mkdir projectA
git clone https://github.com/markjaquith/WordPress.git ./projectA
cd projectA
git checkout origin/3.2-branch&amp;lt;/pre&amp;gt;

Now you have the most recent version of wordpress, and it will be easier than ever to upgrade wordpress and revert if something goes wrong. But we will get into the upgrade process later.

## 2. Starting with a Quality Blank Theme

To help get your new WordPress project off the ground, let&amp;amp;#8217;s get a quality blank theme that updates regularly. I usually use the &amp;lt;a title=&amp;quot;Roots WordPress Theme&amp;quot; href=&amp;quot;http://www.rootstheme.com/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;Roots theme&amp;lt;/a&amp;gt;, which is a quality HTML5 wordpress theme that updates regularly. To make sure our theme stays up to date with the latest wordpress updates, we will add the Roots theme as a Git Submodule. This allows us to essentially add a git repository inside of another repository. Why do this? Because we can update our theme code to the latest release with a simple Git command, instead of downloading and merging on our own. To add the sub-module, change to your project directory and add the sub-module to the themes folder then initialize it:

&amp;lt;pre class=&amp;quot;wp-code-highlight prettyprint&amp;quot;&amp;gt;cd projectA
git submodule add https://github.com/retlehs/roots.git ./wp-content/themes/roots
git submodule init
git submodule update&amp;lt;/pre&amp;gt;

&amp;lt;i class=&amp;quot;icon-warning-sign&amp;quot;&amp;gt;&amp;lt;/i&amp;gt;**Update:** I have now forked mark&amp;amp;#8217;s wordpress git and added roots as a submodule. You can simply clone or fork my repo to save a step. Get it here: &amp;lt;a title=&amp;quot;Clint Berry&#39;s Github Account&amp;quot; href=&amp;quot;https://github.com/clintberry/WordPress&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;https://github.com/clintberry/WordPress&amp;lt;/a&amp;gt; Make sure to clone recursive to get the roots theme. This repo updates nightly to the latest wordpress and roots release.

Now you have a quality blank theme installed into your git repo as a sub-module.

## 3. Adding Your Custom Design (WordPress Child Theme)

Since we have added the new blank theme as a git submodule, we don&amp;amp;#8217;t want to edit that theme directly. This could cause problems when/if we want to update our code base for the theme. To better avoid update problems, we can use the often-under-utilized-wordpress feature called child themes. Child themes allow you essentially &amp;amp;#8220;inherit&amp;amp;#8221; all the functionality of a &amp;amp;#8220;base&amp;amp;#8221; theme. In this case, we will create a child theme &amp;amp;#8220;MyTheme&amp;amp;#8221; that will have access to all the functionality of our base theme &amp;amp;#8220;Roots&amp;amp;#8221;.

Creating child themes in wordpress is simple:

  1. Add a new folder to your wordpress themes directory called &amp;amp;#8220;MyTheme&amp;amp;#8221;
  2. Create a file called &amp;amp;#8220;style.css&amp;amp;#8221; with the following text: &amp;lt;pre class=&amp;quot;wp-code-highlight prettyprint&amp;quot;&amp;gt;/*
Theme Name:     MyProject
Theme URI:      http://clintberry.com/
Description:    Roots Child Theme
Author:         Clint Berry
Author URI:     http://clintberry.com
Template:       roots
Version:        0.1.0
*/

@import url(&amp;quot;../twentyten/style.css&amp;quot;);
&amp;lt;/pre&amp;gt;
    
    Take notice of the &amp;amp;#8220;Template: roots&amp;amp;#8221; field. That is what lets WordPress know that this is a child theme and to inherit all of the roots functionality. Also since this style.css file overwrites the roots css file, we import the css file from roots. &amp;lt;/li&amp;gt; 
    
      * Create a functions.php file to add any custom WordPress functions. WordPress will load your new functions.php file along with the Roots functions.php file, so all is well.
      * Copy any template file you want to change from the Roots theme to your new child theme directory. Any template file found in your new directory will overwrite the template in Roots.&amp;lt;/ol&amp;gt; 
    
    Now you can start your theme development with an HTML5 bang! Child themes make it much easier to get started and even keep your file structure a big cleaner. 
    
    ## Update WordPress Like A Pro
    
    Yes, you could update WordPress in the admin panel, but you want to do it in a much cooler, easier-to-revert way. With Git, now you can. First, backup your database. Then in the root wordpress directory, update your Git repo by using git fetch:
  
    `If you have developed WordPress sites for clients this process might sound familiar to you:

  * Get a new client that wants a wordpress site
  * Download the most recent wordpress
  * Find a good current blank wordpress theme to start implementing the design
  * Upload to a staging server to for client to see
  * Client requests changes
  * You make changes on local server, then upload to staging server
  * Repeat last three steps until finished and then you deploy the site to live

After lots of trial and error, I have come up with a process that is more efficient, and allows rapid development of wordpress sites. I use Git, Git Submodules, and WordPress child themes to get going quicker and keep code up to date with minimal effort. (If your not using a &amp;lt;a href=&amp;quot;http://en.wikipedia.org/wiki/Revision_control&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;revision control &amp;lt;/a&amp;gt;system like &amp;lt;a href=&amp;quot;http://git-scm.com/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;Git&amp;lt;/a&amp;gt; or &amp;lt;a href=&amp;quot;http://subversion.tigris.org/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;SVN&amp;lt;/a&amp;gt; for development, then check out &amp;lt;del datetime=&amp;quot;2012-04-22T20:33:39+00:00&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;http://stackoverflow.com/questions/132520/good-excuses-not-to-use-version-control&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;this funny question and answer session on Stack Overflow&amp;lt;/a&amp;gt;&amp;lt;/del&amp;gt; **Update:** Stack Overflow moderators removed the question&amp;amp;#8230; bummer. Check out the funny-ness in the &amp;lt;a href=&amp;quot;http://web.archive.org/web/20100722082534/http://stackoverflow.com/questions/132520/good-excuses-not-to-use-version-control&amp;quot; title=&amp;quot;Why to use version control&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;wayback machine internet archiver&amp;lt;/a&amp;gt; instead)
  



  
For this rapid WordPress development cycle, you will need to have Git installed.

## 1. Get the Most Current WordPress

The wordpress core dev team uses SVN to manage wordpress development. But I want to use Git for speed and easy branching. Fortunately there is a &amp;lt;a href=&amp;quot;https://github.com/WordPress/WordPress&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;great WordPress git clone&amp;lt;/a&amp;gt; that is updated every fifteen minutes. To get the most recent version of WordPress, simply clone that repo to your project directory.

&amp;lt;pre class=&amp;quot;wp-code-highlight prettyprint&amp;quot;&amp;gt;mkdir projectA
git clone https://github.com/markjaquith/WordPress.git ./projectA
cd projectA
git checkout origin/3.2-branch&amp;lt;/pre&amp;gt;

Now you have the most recent version of wordpress, and it will be easier than ever to upgrade wordpress and revert if something goes wrong. But we will get into the upgrade process later.

## 2. Starting with a Quality Blank Theme

To help get your new WordPress project off the ground, let&amp;amp;#8217;s get a quality blank theme that updates regularly. I usually use the &amp;lt;a title=&amp;quot;Roots WordPress Theme&amp;quot; href=&amp;quot;http://www.rootstheme.com/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;Roots theme&amp;lt;/a&amp;gt;, which is a quality HTML5 wordpress theme that updates regularly. To make sure our theme stays up to date with the latest wordpress updates, we will add the Roots theme as a Git Submodule. This allows us to essentially add a git repository inside of another repository. Why do this? Because we can update our theme code to the latest release with a simple Git command, instead of downloading and merging on our own. To add the sub-module, change to your project directory and add the sub-module to the themes folder then initialize it:

&amp;lt;pre class=&amp;quot;wp-code-highlight prettyprint&amp;quot;&amp;gt;cd projectA
git submodule add https://github.com/retlehs/roots.git ./wp-content/themes/roots
git submodule init
git submodule update&amp;lt;/pre&amp;gt;

&amp;lt;i class=&amp;quot;icon-warning-sign&amp;quot;&amp;gt;&amp;lt;/i&amp;gt;**Update:** I have now forked mark&amp;amp;#8217;s wordpress git and added roots as a submodule. You can simply clone or fork my repo to save a step. Get it here: &amp;lt;a title=&amp;quot;Clint Berry&#39;s Github Account&amp;quot; href=&amp;quot;https://github.com/clintberry/WordPress&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;https://github.com/clintberry/WordPress&amp;lt;/a&amp;gt; Make sure to clone recursive to get the roots theme. This repo updates nightly to the latest wordpress and roots release.

Now you have a quality blank theme installed into your git repo as a sub-module.

## 3. Adding Your Custom Design (WordPress Child Theme)

Since we have added the new blank theme as a git submodule, we don&amp;amp;#8217;t want to edit that theme directly. This could cause problems when/if we want to update our code base for the theme. To better avoid update problems, we can use the often-under-utilized-wordpress feature called child themes. Child themes allow you essentially &amp;amp;#8220;inherit&amp;amp;#8221; all the functionality of a &amp;amp;#8220;base&amp;amp;#8221; theme. In this case, we will create a child theme &amp;amp;#8220;MyTheme&amp;amp;#8221; that will have access to all the functionality of our base theme &amp;amp;#8220;Roots&amp;amp;#8221;.

Creating child themes in wordpress is simple:

  1. Add a new folder to your wordpress themes directory called &amp;amp;#8220;MyTheme&amp;amp;#8221;
  2. Create a file called &amp;amp;#8220;style.css&amp;amp;#8221; with the following text: &amp;lt;pre class=&amp;quot;wp-code-highlight prettyprint&amp;quot;&amp;gt;/*
Theme Name:     MyProject
Theme URI:      http://clintberry.com/
Description:    Roots Child Theme
Author:         Clint Berry
Author URI:     http://clintberry.com
Template:       roots
Version:        0.1.0
*/

@import url(&amp;quot;../twentyten/style.css&amp;quot;);
&amp;lt;/pre&amp;gt;
    
    Take notice of the &amp;amp;#8220;Template: roots&amp;amp;#8221; field. That is what lets WordPress know that this is a child theme and to inherit all of the roots functionality. Also since this style.css file overwrites the roots css file, we import the css file from roots. &amp;lt;/li&amp;gt; 
    
      * Create a functions.php file to add any custom WordPress functions. WordPress will load your new functions.php file along with the Roots functions.php file, so all is well.
      * Copy any template file you want to change from the Roots theme to your new child theme directory. Any template file found in your new directory will overwrite the template in Roots.&amp;lt;/ol&amp;gt; 
    
    Now you can start your theme development with an HTML5 bang! Child themes make it much easier to get started and even keep your file structure a big cleaner. 
    
    ## Update WordPress Like A Pro
    
    Yes, you could update WordPress in the admin panel, but you want to do it in a much cooler, easier-to-revert way. With Git, now you can. First, backup your database. Then in the root wordpress directory, update your Git repo by using git fetch:
  
` 
  
    Now merge in any updates from your current branch, or merge in a new branch altogether. This command merges the latest update from the 3.2 branch into your WordPress install:
  
    ``If you have developed WordPress sites for clients this process might sound familiar to you:

  * Get a new client that wants a wordpress site
  * Download the most recent wordpress
  * Find a good current blank wordpress theme to start implementing the design
  * Upload to a staging server to for client to see
  * Client requests changes
  * You make changes on local server, then upload to staging server
  * Repeat last three steps until finished and then you deploy the site to live

After lots of trial and error, I have come up with a process that is more efficient, and allows rapid development of wordpress sites. I use Git, Git Submodules, and WordPress child themes to get going quicker and keep code up to date with minimal effort. (If your not using a &amp;lt;a href=&amp;quot;http://en.wikipedia.org/wiki/Revision_control&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;revision control &amp;lt;/a&amp;gt;system like &amp;lt;a href=&amp;quot;http://git-scm.com/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;Git&amp;lt;/a&amp;gt; or &amp;lt;a href=&amp;quot;http://subversion.tigris.org/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;SVN&amp;lt;/a&amp;gt; for development, then check out &amp;lt;del datetime=&amp;quot;2012-04-22T20:33:39+00:00&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;http://stackoverflow.com/questions/132520/good-excuses-not-to-use-version-control&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;this funny question and answer session on Stack Overflow&amp;lt;/a&amp;gt;&amp;lt;/del&amp;gt; **Update:** Stack Overflow moderators removed the question&amp;amp;#8230; bummer. Check out the funny-ness in the &amp;lt;a href=&amp;quot;http://web.archive.org/web/20100722082534/http://stackoverflow.com/questions/132520/good-excuses-not-to-use-version-control&amp;quot; title=&amp;quot;Why to use version control&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;wayback machine internet archiver&amp;lt;/a&amp;gt; instead)
  



  
For this rapid WordPress development cycle, you will need to have Git installed.

## 1. Get the Most Current WordPress

The wordpress core dev team uses SVN to manage wordpress development. But I want to use Git for speed and easy branching. Fortunately there is a &amp;lt;a href=&amp;quot;https://github.com/WordPress/WordPress&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;great WordPress git clone&amp;lt;/a&amp;gt; that is updated every fifteen minutes. To get the most recent version of WordPress, simply clone that repo to your project directory.

&amp;lt;pre class=&amp;quot;wp-code-highlight prettyprint&amp;quot;&amp;gt;mkdir projectA
git clone https://github.com/markjaquith/WordPress.git ./projectA
cd projectA
git checkout origin/3.2-branch&amp;lt;/pre&amp;gt;

Now you have the most recent version of wordpress, and it will be easier than ever to upgrade wordpress and revert if something goes wrong. But we will get into the upgrade process later.

## 2. Starting with a Quality Blank Theme

To help get your new WordPress project off the ground, let&amp;amp;#8217;s get a quality blank theme that updates regularly. I usually use the &amp;lt;a title=&amp;quot;Roots WordPress Theme&amp;quot; href=&amp;quot;http://www.rootstheme.com/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;Roots theme&amp;lt;/a&amp;gt;, which is a quality HTML5 wordpress theme that updates regularly. To make sure our theme stays up to date with the latest wordpress updates, we will add the Roots theme as a Git Submodule. This allows us to essentially add a git repository inside of another repository. Why do this? Because we can update our theme code to the latest release with a simple Git command, instead of downloading and merging on our own. To add the sub-module, change to your project directory and add the sub-module to the themes folder then initialize it:

&amp;lt;pre class=&amp;quot;wp-code-highlight prettyprint&amp;quot;&amp;gt;cd projectA
git submodule add https://github.com/retlehs/roots.git ./wp-content/themes/roots
git submodule init
git submodule update&amp;lt;/pre&amp;gt;

&amp;lt;i class=&amp;quot;icon-warning-sign&amp;quot;&amp;gt;&amp;lt;/i&amp;gt;**Update:** I have now forked mark&amp;amp;#8217;s wordpress git and added roots as a submodule. You can simply clone or fork my repo to save a step. Get it here: &amp;lt;a title=&amp;quot;Clint Berry&#39;s Github Account&amp;quot; href=&amp;quot;https://github.com/clintberry/WordPress&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;https://github.com/clintberry/WordPress&amp;lt;/a&amp;gt; Make sure to clone recursive to get the roots theme. This repo updates nightly to the latest wordpress and roots release.

Now you have a quality blank theme installed into your git repo as a sub-module.

## 3. Adding Your Custom Design (WordPress Child Theme)

Since we have added the new blank theme as a git submodule, we don&amp;amp;#8217;t want to edit that theme directly. This could cause problems when/if we want to update our code base for the theme. To better avoid update problems, we can use the often-under-utilized-wordpress feature called child themes. Child themes allow you essentially &amp;amp;#8220;inherit&amp;amp;#8221; all the functionality of a &amp;amp;#8220;base&amp;amp;#8221; theme. In this case, we will create a child theme &amp;amp;#8220;MyTheme&amp;amp;#8221; that will have access to all the functionality of our base theme &amp;amp;#8220;Roots&amp;amp;#8221;.

Creating child themes in wordpress is simple:

  1. Add a new folder to your wordpress themes directory called &amp;amp;#8220;MyTheme&amp;amp;#8221;
  2. Create a file called &amp;amp;#8220;style.css&amp;amp;#8221; with the following text: &amp;lt;pre class=&amp;quot;wp-code-highlight prettyprint&amp;quot;&amp;gt;/*
Theme Name:     MyProject
Theme URI:      http://clintberry.com/
Description:    Roots Child Theme
Author:         Clint Berry
Author URI:     http://clintberry.com
Template:       roots
Version:        0.1.0
*/

@import url(&amp;quot;../twentyten/style.css&amp;quot;);
&amp;lt;/pre&amp;gt;
    
    Take notice of the &amp;amp;#8220;Template: roots&amp;amp;#8221; field. That is what lets WordPress know that this is a child theme and to inherit all of the roots functionality. Also since this style.css file overwrites the roots css file, we import the css file from roots. &amp;lt;/li&amp;gt; 
    
      * Create a functions.php file to add any custom WordPress functions. WordPress will load your new functions.php file along with the Roots functions.php file, so all is well.
      * Copy any template file you want to change from the Roots theme to your new child theme directory. Any template file found in your new directory will overwrite the template in Roots.&amp;lt;/ol&amp;gt; 
    
    Now you can start your theme development with an HTML5 bang! Child themes make it much easier to get started and even keep your file structure a big cleaner. 
    
    ## Update WordPress Like A Pro
    
    Yes, you could update WordPress in the admin panel, but you want to do it in a much cooler, easier-to-revert way. With Git, now you can. First, backup your database. Then in the root wordpress directory, update your Git repo by using git fetch:
  
    `If you have developed WordPress sites for clients this process might sound familiar to you:

  * Get a new client that wants a wordpress site
  * Download the most recent wordpress
  * Find a good current blank wordpress theme to start implementing the design
  * Upload to a staging server to for client to see
  * Client requests changes
  * You make changes on local server, then upload to staging server
  * Repeat last three steps until finished and then you deploy the site to live

After lots of trial and error, I have come up with a process that is more efficient, and allows rapid development of wordpress sites. I use Git, Git Submodules, and WordPress child themes to get going quicker and keep code up to date with minimal effort. (If your not using a &amp;lt;a href=&amp;quot;http://en.wikipedia.org/wiki/Revision_control&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;revision control &amp;lt;/a&amp;gt;system like &amp;lt;a href=&amp;quot;http://git-scm.com/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;Git&amp;lt;/a&amp;gt; or &amp;lt;a href=&amp;quot;http://subversion.tigris.org/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;SVN&amp;lt;/a&amp;gt; for development, then check out &amp;lt;del datetime=&amp;quot;2012-04-22T20:33:39+00:00&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;http://stackoverflow.com/questions/132520/good-excuses-not-to-use-version-control&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;this funny question and answer session on Stack Overflow&amp;lt;/a&amp;gt;&amp;lt;/del&amp;gt; **Update:** Stack Overflow moderators removed the question&amp;amp;#8230; bummer. Check out the funny-ness in the &amp;lt;a href=&amp;quot;http://web.archive.org/web/20100722082534/http://stackoverflow.com/questions/132520/good-excuses-not-to-use-version-control&amp;quot; title=&amp;quot;Why to use version control&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;wayback machine internet archiver&amp;lt;/a&amp;gt; instead)
  



  
For this rapid WordPress development cycle, you will need to have Git installed.

## 1. Get the Most Current WordPress

The wordpress core dev team uses SVN to manage wordpress development. But I want to use Git for speed and easy branching. Fortunately there is a &amp;lt;a href=&amp;quot;https://github.com/WordPress/WordPress&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;great WordPress git clone&amp;lt;/a&amp;gt; that is updated every fifteen minutes. To get the most recent version of WordPress, simply clone that repo to your project directory.

&amp;lt;pre class=&amp;quot;wp-code-highlight prettyprint&amp;quot;&amp;gt;mkdir projectA
git clone https://github.com/markjaquith/WordPress.git ./projectA
cd projectA
git checkout origin/3.2-branch&amp;lt;/pre&amp;gt;

Now you have the most recent version of wordpress, and it will be easier than ever to upgrade wordpress and revert if something goes wrong. But we will get into the upgrade process later.

## 2. Starting with a Quality Blank Theme

To help get your new WordPress project off the ground, let&amp;amp;#8217;s get a quality blank theme that updates regularly. I usually use the &amp;lt;a title=&amp;quot;Roots WordPress Theme&amp;quot; href=&amp;quot;http://www.rootstheme.com/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;Roots theme&amp;lt;/a&amp;gt;, which is a quality HTML5 wordpress theme that updates regularly. To make sure our theme stays up to date with the latest wordpress updates, we will add the Roots theme as a Git Submodule. This allows us to essentially add a git repository inside of another repository. Why do this? Because we can update our theme code to the latest release with a simple Git command, instead of downloading and merging on our own. To add the sub-module, change to your project directory and add the sub-module to the themes folder then initialize it:

&amp;lt;pre class=&amp;quot;wp-code-highlight prettyprint&amp;quot;&amp;gt;cd projectA
git submodule add https://github.com/retlehs/roots.git ./wp-content/themes/roots
git submodule init
git submodule update&amp;lt;/pre&amp;gt;

&amp;lt;i class=&amp;quot;icon-warning-sign&amp;quot;&amp;gt;&amp;lt;/i&amp;gt;**Update:** I have now forked mark&amp;amp;#8217;s wordpress git and added roots as a submodule. You can simply clone or fork my repo to save a step. Get it here: &amp;lt;a title=&amp;quot;Clint Berry&#39;s Github Account&amp;quot; href=&amp;quot;https://github.com/clintberry/WordPress&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;https://github.com/clintberry/WordPress&amp;lt;/a&amp;gt; Make sure to clone recursive to get the roots theme. This repo updates nightly to the latest wordpress and roots release.

Now you have a quality blank theme installed into your git repo as a sub-module.

## 3. Adding Your Custom Design (WordPress Child Theme)

Since we have added the new blank theme as a git submodule, we don&amp;amp;#8217;t want to edit that theme directly. This could cause problems when/if we want to update our code base for the theme. To better avoid update problems, we can use the often-under-utilized-wordpress feature called child themes. Child themes allow you essentially &amp;amp;#8220;inherit&amp;amp;#8221; all the functionality of a &amp;amp;#8220;base&amp;amp;#8221; theme. In this case, we will create a child theme &amp;amp;#8220;MyTheme&amp;amp;#8221; that will have access to all the functionality of our base theme &amp;amp;#8220;Roots&amp;amp;#8221;.

Creating child themes in wordpress is simple:

  1. Add a new folder to your wordpress themes directory called &amp;amp;#8220;MyTheme&amp;amp;#8221;
  2. Create a file called &amp;amp;#8220;style.css&amp;amp;#8221; with the following text: &amp;lt;pre class=&amp;quot;wp-code-highlight prettyprint&amp;quot;&amp;gt;/*
Theme Name:     MyProject
Theme URI:      http://clintberry.com/
Description:    Roots Child Theme
Author:         Clint Berry
Author URI:     http://clintberry.com
Template:       roots
Version:        0.1.0
*/

@import url(&amp;quot;../twentyten/style.css&amp;quot;);
&amp;lt;/pre&amp;gt;
    
    Take notice of the &amp;amp;#8220;Template: roots&amp;amp;#8221; field. That is what lets WordPress know that this is a child theme and to inherit all of the roots functionality. Also since this style.css file overwrites the roots css file, we import the css file from roots. &amp;lt;/li&amp;gt; 
    
      * Create a functions.php file to add any custom WordPress functions. WordPress will load your new functions.php file along with the Roots functions.php file, so all is well.
      * Copy any template file you want to change from the Roots theme to your new child theme directory. Any template file found in your new directory will overwrite the template in Roots.&amp;lt;/ol&amp;gt; 
    
    Now you can start your theme development with an HTML5 bang! Child themes make it much easier to get started and even keep your file structure a big cleaner. 
    
    ## Update WordPress Like A Pro
    
    Yes, you could update WordPress in the admin panel, but you want to do it in a much cooler, easier-to-revert way. With Git, now you can. First, backup your database. Then in the root wordpress directory, update your Git repo by using git fetch:
  
` 
  
    Now merge in any updates from your current branch, or merge in a new branch altogether. This command merges the latest update from the 3.2 branch into your WordPress install:
  
`` 
  
    Now you have the most recent version of WordPress. It is a beautiful thing.
  
    Don&amp;amp;#8217;t worry! If it breaks something, it is easy to go back. First enter:
  
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;This will output the most recent changes to your repo. Look for your last change which was merging. It will have a line like this:

&amp;lt;pre class=&amp;quot;wp-code-highlight prettyprint&amp;quot;&amp;gt;Merge remote branch &amp;amp;#039;upstream/master&amp;amp;#039;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/pre&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Take the commit sha (the long number right after the word commit) that is located on the commit before the Merge line. Take that sha and enter the command:
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;````&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Now restore your database and you are back in action.

## Easier WordPress Deployment

Deploying a WordPress site has always been a thorn in my side. Currently, I am developing a plugin for much easier deployment, but for now things are a bit hairy. The nice thing about git is keeping your code base up to date is much easier. Unfortunately, Git doesn&amp;amp;#8217;t help much with the database side of things, so we will focus on just the code base for now. 

#### Deploy Using Git Clone

Deploying with Git Clone is the easiest way to get your code installed on a different server. All you have to do is push your repo to a remote repository (like github) and then clone it directly on the live server. This allows easy updating in the future as well since a simple git pull is all that is required to get the most recent code base. If you don&amp;amp;#8217;t have SSH access or if the server you are deploying to doesn&amp;amp;#8217;t have Git, then this method won&amp;amp;#8217;t work.

#### Old School FTP

For a good guide on deploying the old fashioned way, as well as deploying the database, see &amp;lt;a href=&amp;quot;http://www.codemyownroad.com/13-steps-to-deploy-wordpress-from-your-localhost-to-a-live-web-server/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;This Post&amp;lt;/a&amp;gt;

I hope this helps getting your WordPress sites off the ground quicker and easier! As always, any comments or suggestions are welcome.
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>