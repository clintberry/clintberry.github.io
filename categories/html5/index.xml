<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Html5 on Clint Berry</title>
    <link>http://clintberry.com/categories/html5/</link>
    <description>Recent content in Html5 on Clint Berry</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 22 Jul 2013 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://clintberry.com/categories/html5/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>JavaScript and the Brackets Shell Environment</title>
      <link>http://clintberry.com/2013/native-desktop-javascript/</link>
      <pubDate>Mon, 22 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>http://clintberry.com/2013/native-desktop-javascript/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;http://clintberry.com/images/brackets-js.png&#34; alt=&#34;brackets-js&#34; width=&#34;300&#34; height=&#34;120&#34; class=&#34;alignleft size-full wp-image-1058&#34; /&gt;This is the second post in my series on using the amazing &lt;a href=&#34;https://github.com/adobe/brackets-shell/&#34; title=&#34;Brackets Shell&#34; target=&#34;_blank&#34;&gt;bracket-shell&lt;/a&gt; project for building native desktop applications with HTML and JavaScript.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://clintberry.com/2013/html5-desktop-apps-with-brackets-shell/&#34; title=&#34;Native Desktop Apps with HTML&#34;&gt;Post 1 &amp;#8211; Build Native Desktop Apps with Brackets Shell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Post 2 &amp;#8211; JavaScript and the Brackets Shell Environment&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At this point you should have brackets-shell compiling/building with your own HTML app bundled inside of it. In this post I want to teach you how to interact with the shell via JavaScript.&lt;/p&gt;

&lt;p&gt;Brackets shell has two ways to interact with the native environment via JavaScript. The first is via a set of functions created in native C++/Objective-C and then exposed in &lt;a href=&#34;Chromium Embedded Framework&#34; title=&#34;CEF&#34; target=&#34;_blank&#34;&gt;Chromium Embedded Framework&lt;/a&gt;. The second method is to communicate with the Node.js process via websocket protocol and tell it to run commands on the native environment. This post will take a look at the first method.&lt;/p&gt;

&lt;h4 id=&#34;the-brackets-javascript-object&#34;&gt;The Brackets JavaScript Object&lt;/h4&gt;

&lt;p&gt;The brackets-shell team has already built several native functions and exposed them via JavaScript to your HTML application. To take a look, run your newly built brackets shell app and open the Chrome DevTools by right clicking anywhere in your app and selecting `Show DevTools`.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://clintberry.com/images/Screen-Shot-2013-07-17-at-10.27.26-PM.png&#34; alt=&#34;Show dev tools&#34; width=&#34;554&#34; height=&#34;308&#34; class=&#34;alignnone size-full wp-image-1024&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Once in DevTools, click on the console tab furthest to the right. Inside the console type `brackets` and hit enter. The console will echo the contents of that variable, but it will be minimized. Click on the little triangle arrow to the left of the response to expand the contents and you will see an `app` object and a `fs` object. Expand either of those objects to see an entire list of functions that brackets-shell gives you for free to use in your app. The `brackets` variable is injected into the browser via C++ and is available to your code when running in the shell. So cool.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://clintberry.com/images/Screen-Shot-2013-07-17-at-10.24.19-PM.png&#34; alt=&#34;brackets.app contents&#34; width=&#34;727&#34; height=&#34;560&#34; class=&#34;alignnone size-full wp-image-1021&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You can see there are some handy functions in there. To test one out, type in `brackets.app.quit()` into the console and your app should quit! Pretty neat that you did it from JavaScript, eh? Now let&amp;#8217;s look at another function that doesn&amp;#8217;t close your app. Run your app again and show devtools. In brackets.app there is a function called addMenu(). This adds a menu into the toolbar for you to use. Enter this string into the devtools console:&lt;/p&gt;

&lt;pre class=&#34;wp-code-highlight prettyprint&#34;&gt;brackets.app.addMenu(&amp;#039;Parent&amp;#039;, &amp;#039;parent&amp;#039;, &amp;#039;&amp;#039;, &amp;#039;&amp;#039;, function(){});
&lt;/pre&gt;

&lt;p&gt;The first argument is the string you want displayed for your new parent menu. The second is the ID. You should immediately see a new menu item appear for your app called &amp;#8220;Parent&amp;#8221;. (in OSX it appears at the top, on windows it appears right in the app itself)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://clintberry.com/images/Screen-Shot-2013-07-17-at-11.03.58-PM.png&#34; alt=&#34;New menu item&#34; width=&#34;762&#34; height=&#34;216&#34; class=&#34;alignnone size-full wp-image-1032&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Now let&amp;#8217;s add a menu item into that parent menu called &amp;#8216;My Action&amp;#8217;. Enter in the following code in the console:&lt;/p&gt;

&lt;pre class=&#34;wp-code-highlight prettyprint&#34;&gt;brackets.app.addMenuItem(&amp;#039;parent&amp;#039;, &amp;#039;My Action&amp;#039;, &amp;#039;myaction&amp;#039;, &amp;#039;&amp;#039;, &amp;#039;&amp;#039;, &amp;#039;&amp;#039;, &amp;#039;&amp;#039;, function(){})
&lt;/pre&gt;

&lt;p&gt;The first argument is the ID of the parent menu you want to put this item in, the second argument is the string you want to display for your item, and the third argument is the ID of the menu item. The other blank strings are for positioning, but aren&amp;#8217;t important for this demo.&lt;/p&gt;

&lt;p&gt;You should now see your new menu item when you click on `Parent`. Now all we have to do is assign an action handler to the menu item when it is clicked. To catch events as they come in from the shell, you will need to define another object on the brackets variable called `shellAPI`, and within that object you must define a property called `executeCommand` as a function that accepts a string (commandId). The shell looks to see if that function exists and sends all commands to it so you can handle them in your code. For example, if you clicked on your new menu item with the ID `myaction`, the shell would call brackets.shellAPI.executeCommand(&amp;#8216;myaction&amp;#8217;)&lt;/p&gt;

&lt;p&gt;Instead of doing this in the console, let&amp;#8217;s go ahead and add this script right into our index.html file (along with some jQuery for cheating later):&lt;/p&gt;

&lt;pre class=&#34;wp-code-highlight prettyprint&#34;&gt;&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;title&amp;gt;Awesome&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;

&amp;lt;h2&amp;gt;My Awesome App&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;Brackets-shell allows me to make this amazing native app with HTML. WOW!&amp;lt;/p&amp;gt;
&amp;lt;script src=&#34;http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js&#34; &amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script&amp;gt;
$(function(){
    brackets.app.addMenu(&amp;#039;Parent&amp;#039;, &amp;#039;parent&amp;#039;, &amp;#039;&amp;#039;, &amp;#039;&amp;#039;, function(){});
    brackets.app.addMenuItem(&amp;#039;parent&amp;#039;, &amp;#039;My Action&amp;#039;, &amp;#039;myaction&amp;#039;, &amp;#039;&amp;#039;, &amp;#039;&amp;#039;, &amp;#039;&amp;#039;, &amp;#039;&amp;#039;, function(){})
    brackets.shellAPI = {}
    brackets.shellAPI.executeCommand = function(command) {
        if(command == &amp;#039;myaction&amp;#039;) {
            alert(&amp;#039;You definitely clicked on your new menu item!&amp;#039;);
        }
    }
})

&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Now re-open your index.html file in the brackets-shell (if you have DevTools open, and in focus, hit Command-R on mac, or Ctrl-R on windows and your app will refresh with your updated index.html file) Go ahead and click on your new menu item &amp;#8216;My Action&amp;#8217; and you should see the following alert box pop up:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://clintberry.com/images/Screen-Shot-2013-07-18-at-12.31.31-AM.png&#34; alt=&#34;clicked-alert&#34; width=&#34;437&#34; height=&#34;166&#34; class=&#34;alignnone size-full wp-image-1039&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Awesome!&lt;/p&gt;

&lt;p&gt;Go ahead and play around with the other functions that brackets makes available to you. Especially the file system commands which really allow you to do some cool stuff. If you have trouble, make sure to check out the &lt;a href=&#34;https://github.com/adobe/brackets-shell/blob/master/appshell/appshell_extensions.js&#34; title=&#34;JavaScript functions for shell&#34; target=&#34;_blank&#34;&gt;detailed comments for each function in the source code&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;adding-custom-native-javascript-functions&#34;&gt;Adding Custom Native JavaScript Functions&lt;/h4&gt;

&lt;p&gt;So you want to add your own native functions, eh? If you are brave enough to venture into the dark realms of C++/Objective-C then the world is your oyster with brackets-shell. You can do pretty much anything you want to do. To illustrate, let&amp;#8217;s add a function that minimizes the window (overly simple, but a good starting point).&lt;/p&gt;

&lt;p&gt;There are three files we will need to change to add custom functions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;appshell/appshell_extensions_platform.h&lt;/strong&gt; &amp;#8211; This is where we define our new C++ function&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;appshell/appshell_extensions_win.cpp (or _mac.mm if you are working with OSX)&lt;/strong&gt; &amp;#8211; Where the actual C++ function is written&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;appshell/appshell_extensions.js&lt;/strong&gt; &amp;#8211; This file bridges the C++ function to the JavaScript one&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;First let&amp;#8217;s define our function in appshell_extensions_platform.h&lt;/p&gt;

&lt;pre class=&#34;wp-code-highlight prettyprint&#34;&gt;#if defined(OS_WIN)

void MinimizeWindow(CefRefPtr&amp;lt;CefBrowser&amp;gt; browser);

#endif
&lt;/pre&gt;

&lt;p&gt;First we add the #if statement to make sure this function only get&amp;#8217;s defined on windows. If we were implementing on both systems, we could remove the if statement completely.&lt;/p&gt;

&lt;p&gt;Then we define our function called MinimizeWindow and pass it the main browser object as a parameter.&lt;/p&gt;

&lt;p&gt;Now we implement our new function in the appshell_extensions_win.cpp file:&lt;/p&gt;

&lt;pre class=&#34;wp-code-highlight prettyprint&#34;&gt;void MinimizeWindow(CefRefPtr&amp;lt;CefBrowser&amp;gt; browser, std::string value){
    CefWindowHandle hWnd = browser-&amp;gt;GetHost()-&amp;gt;GetWindowHandle();
    ShowWindow(hWnd, &#34;SW_MINIMIZE&#34;);
}
&lt;/pre&gt;

&lt;p&gt;Obviously you need some Windows programming experience for this function. Thankfully, I have my co-worker, &lt;a href=&#34;http://bigdevblog.com&#34; title=&#34;Jordan C&#39;s Blog&#34; target=&#34;_blank&#34;&gt;Jordan&lt;/a&gt;, who is excellent at figuring out this stuff, and so I &amp;#8220;borrowed&amp;#8221; some of his code. &lt;img src=&#34;http://clintberry.com/wp-includes/images/smilies/simple-smile.png&#34; alt=&#34;:-)&#34; class=&#34;wp-smiley&#34; style=&#34;height: 1em; max-height: 1em;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Lastly, we need to add the function in appshell_extensions.js. We add it right after the DragWindow function (contributed by me and Jordan&amp;#8230; yes, shameless, but I love that I got a C++ pull request accepted)&lt;/p&gt;

&lt;pre class=&#34;wp-code-highlight prettyprint&#34;&gt;/**
     * Minimize the window
     *
     * @return None. This is an asynchronous call that sends all return information to the callback.
     */
    native function MinimizeWindow();
    appshell.app.minimizeWindow = function () {
        MinimizeWindow();
    };
&lt;/pre&gt;

&lt;p&gt;Save your progress and run your build on Windows. Run your new build and open up DevTools and enter `brackets.app.minimizeWindow()` in the console and your window should minimize! With JavaScript!!! Excellent.&lt;/p&gt;

&lt;p&gt;Some other things we have added to brackets-shell at my company are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&amp;#8211; Removing the window frame&lt;/li&gt;
&lt;li&gt;&amp;#8211; Adding transparency and rounded corners&lt;/li&gt;
&lt;li&gt;&amp;#8211; Adding tray icons&lt;/li&gt;
&lt;li&gt;&amp;#8211; Customizing popup windows&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will get these pieces cleaned up and added to a forked repo for all to enjoy soon.&lt;/p&gt;

&lt;p&gt;Good luck with your native app adventures! Hit me up with any questions or comments you might have. There are more posts to come!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Build Desktop Apps With HTML Using Brackets Shell</title>
      <link>http://clintberry.com/2013/html5-desktop-apps-with-brackets-shell/</link>
      <pubDate>Tue, 25 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>http://clintberry.com/2013/html5-desktop-apps-with-brackets-shell/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;http://clintberry.com/images/branding_256.png&#34; alt=&#34;branding_256&#34; width=&#34;256&#34; height=&#34;256&#34; class=&#34;alignleft wp-image-959&#34; /&gt;I recently posted on the &lt;a href=&#34;http://clintberry.com/2013/html5-apps-desktop-2013/&#34; title=&#34;html5 apps on the desktop&#34;&gt;state of native desktop apps in HTML5&lt;/a&gt; and mentioned that at my company we chose to use &lt;a href=&#34;https://github.com/adobe/brackets-shell/&#34; title=&#34;Brackets Shell&#34; target=&#34;_blank&#34;&gt;Brackets-Shell&lt;/a&gt; as our native app solution. I want to go more in-depth into what brackets is and why we chose it as our solution. This will be the first of a series of posts dedicated to brackets-shell and customizing it for your native HTML desktop applications.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;UPDATE:&lt;/strong&gt; I Posted part 2 of the series: &lt;a href=&#34;http://clintberry.com/2013/native-desktop-javascript/&#34; title=&#34;JavaScript and the Brackets Shell Environment&#34;&gt;JavaScript and the Brackets Shell Environment&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;what-is-brackets&#34;&gt;What is Brackets?&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;http://brackets.io/&#34; title=&#34;Brackets&#34; target=&#34;_blank&#34;&gt;Brackets&lt;/a&gt; is an open-source code editor created by Adobe. What makes brackets so cool, though, is that the entire editor is written in HTML and JavaScript. This puts Brackets in a unique opportunity that allows pretty much any developer that would use the editor (HTML and JavaScript guys) to add to and improve the editor with the very languages they use on a regular basis. And while I don&amp;#8217;t use brackets myself just yet (hard to leave Sublime Text) it is definitely on my radar and I may make that switch soon.&lt;/p&gt;

&lt;h4 id=&#34;what-is-brackets-shell&#34;&gt;What is Brackets Shell?&lt;/h4&gt;

&lt;p&gt;Brackets Shell is what allows Brackets to be run as a desktop application. It takes &lt;a href=&#34;https://code.google.com/p/chromiumembedded/&#34; title=&#34;Chromium Embedded Framework&#34; target=&#34;_blank&#34;&gt;Chromium Embedded Framework (CEF)&lt;/a&gt; and adds some extras along with an excellent build tool. The brackets-shell app is so well done, it made it easy for a web-developer like me to get my first ever &lt;a href=&#34;https://github.com/adobe/brackets-shell/commit/5e52d8647444d20838a2b01bfff92f463109f014&#34; title=&#34;My first c++ pull request&#34; target=&#34;_blank&#34;&gt;C++ pull request accepted&lt;/a&gt; (I took credit for that whole pull request, but the windows portion was done by my good friend, &lt;a href=&#34;http://bigdevblog.com&#34; title=&#34;Jordan C&#39;s Blog&#34; target=&#34;_blank&#34;&gt;Jordan&lt;/a&gt;).&lt;/p&gt;

&lt;h4 id=&#34;why-use-brackets-shell-instead-of-other-solutions&#34;&gt;Why Use Brackets Shell Instead of Other Solutions?&lt;/h4&gt;

&lt;p&gt;I&amp;#8217;m glad you asked:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Very active development&lt;/strong&gt; &amp;#8211; Of all the HTML shells for the desktop, this one was the most active in terms of code being committed.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Backed by Adobe&lt;/strong&gt; &amp;#8211; A corporate sponsor doesn&amp;#8217;t guarantee that the project will be around forever, but it is more promising than not having one&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NodeJS Integration&lt;/strong&gt; &amp;#8211; The brackets team recently integrated NodeJS into the brackets shell which allows for some really awesome plugin capabilities without learning C++&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The Build Process&lt;/strong&gt; &amp;#8211; Building cross platform desktop applications can be a pain. Unless someone went through all the pain for you and automated the whole thing, including the creation of the installer. And on top of that, did it in Grunt, which most JavaScript developers are already familiar with. But who would do that for you? The Brackets team did. Amazing.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now on to the good stuff.&lt;/p&gt;

&lt;h4 id=&#34;test-your-application-in-brackets-shell&#34;&gt;Test Your Application in Brackets Shell&lt;/h4&gt;

&lt;p&gt;The first thing you will want to do is test the shell to see if your HTML application runs in it. The quickest route to doing this is to &lt;a href=&#34;http://download.brackets.io/&#34; title=&#34;Download Brackets&#34; target=&#34;_blank&#34;&gt;download the latest Brackets editor&lt;/a&gt; and install it. The installer installs the brackets-shell along with the brackets HTML application. If you remove the HTML app then the when you run the brackets shell it will ask you for the location of your index.html file. If you choose your own index.html file from your own application, brackets shell will open that.&lt;/p&gt;

&lt;p&gt;To remove the brackets HTML app on Windows, browse to the Brackets folder in your Program Files directory. Inside the Brackets folder there is a folder named &amp;#8216;www&amp;#8217;. Rename or delete that folder, then run Brackets. The file dialog will open prompting you to select your own index.html file.&lt;/p&gt;

&lt;p&gt;On OSX, open the terminal and browse to your application directory. Applications in OSX are actually folders, and in terminal you can view their content. CD into the Brackets Sprint [sprint number].app folder and continue to the Contents directory. Inside there you will see the www folder. Delete or rename it and then run brackets. You will see the file dialog prompting you to select your own index.html file.&lt;/p&gt;

&lt;h4 id=&#34;building-brackets-shell&#34;&gt;Building Brackets Shell&lt;/h4&gt;

&lt;p&gt;If your app runs well in brackets-shell your next step is to setup your computer to build brackets-shell. This is where the shell really shines. They have an amazing Grunt setup that allows you to run the build in one command. Brackets provides some great instructions on &lt;a href=&#34;https://github.com/adobe/brackets-shell/wiki/Building-brackets-shell&#34; title=&#34;Brackets shell build instructions&#34; target=&#34;_blank&#34;&gt;setting up your box here&lt;/a&gt;. Once you are setup, run `grunt build` from the command line and it should create a full build of brackets shell for you. So awesome.&lt;/p&gt;

&lt;h4 id=&#34;setup-for-your-app&#34;&gt;Setup for Your App&lt;/h4&gt;

&lt;p&gt;This is where things get fun. Let&amp;#8217;s make the shell be a full-on desktop app for our own software. Make sure you have followed the instructions for getting setup to build brackets-shell and then take these next steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Fork the Repo&lt;/strong&gt; &amp;#8211; I recommend you fork the bracket-shell repo on github so you have a place to persist your own changes. Once you do that, then check out your forked repo.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Make your app folder a sibling of the shell folder&lt;/strong&gt; &amp;#8211; The build scripts from brackets are setup to expect your HTML app source code to be in a sibling folder to the brackets-shell folder&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Use Git for your HTML app&lt;/strong&gt; &amp;#8211; To use the build scripts provided by brackets, you need to be using Git with your source code. If you aren&amp;#8217;t using git for your project, cd into your project folder and type `git init` and commit your project to the repo by doing `git add .` and then `git commit -m &amp;#8220;Initial commit&amp;#8221;`&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Update grunt file&lt;/strong&gt; &amp;#8211; If your html application folder is called my-app, then you need to tell Grunt where it is. Edit Gruntfile.js in the root of the brackets-shell folder and change the config section git-&amp;gt;www-&amp;gt;repo from &amp;#8220;../brackets&amp;#8221; to &amp;#8220;../my-app&amp;#8221;, and also change www-&amp;gt;files-&amp;gt;cwd value by removing &amp;#8216;src&amp;#8217; from the end of the file (assuming your index.html file is in the root of your project) then save the file.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://clintberry.com/images/Screen-Shot-2013-06-21-at-4.59.21-PM.png&#34; alt=&#34;Screen Shot 2013-06-21 at 4.59.21 PM&#34; width=&#34;739&#34; height=&#34;286&#34; class=&#34;alignnone size-full wp-image-967&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://clintberry.com/images/Screen-Shot-2013-06-21-at-6.08.39-PM.png&#34; alt=&#34;Screen Shot 2013-06-21 at 6.08.39 PM&#34; width=&#34;620&#34; height=&#34;194&#34; class=&#34;alignnone size-full wp-image-980&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Now you are all setup. To see what grunt commands you have available type in `grunt &amp;#8211;help` at your terminal&lt;/p&gt;

&lt;pre class=&#34;wp-code-highlight prettyprint&#34;&gt;&amp;gt; grunt --help
Available tasks
          full-build  Alias for &#34;git&#34;, &#34;create-project&#34;, &#34;build&#34;,
                      &#34;build-branch&#34;, &#34;build-num&#34;, &#34;build-sha&#34;, &#34;stage&#34;,
                      &#34;package&#34; tasks.
           installer  Alias for &#34;full-build&#34;, &#34;build-installer&#34; tasks.
               build  Build shell executable. Run &amp;#039;grunt full-build&amp;#039; to update
                      repositories, build the shell and package www files.
           build-mac  Build mac shell
           build-win  Build windows shell
                 git  Pull specified repo branch from origin *
        build-branch  Write www repo branch to config property
                      build.build-branch
           build-num  Compute www repo build number and set config property
                      build.build-number
           build-sha  Write www repo SHA to config property build.build-sha
               stage  Stage release files
           stage-mac  Stage mac executable files
           stage-win  Stage win executable files
             package  Package www files
        write-config  Update version data in www config.json payload
     build-installer  Build installer
 build-installer-mac  Build mac installer
 build-installer-win  Build windows installer
          set-sprint  Update occurrences of sprint number for all native
                      installers and binaries
                 cef  Download and setup CEF
           cef-clean  Removes CEF binaries and linked folders
        cef-download  Download CEF, see curl-dir config in Gruntfile.js
         cef-extract  Extract CEF zip
        cef-symlinks  Create symlinks for CEF
                node  Download Node.js binaries and setup dependencies
            node-win  Setup Node.js for Windows
            node-mac  Setup Node.js for Mac OSX and extract
          node-clean  Removes Node.js binaries
      create-project  Create Xcode/VisualStudio project
               setup  Alias for &#34;cef&#34;, &#34;node&#34;, &#34;create-project&#34; tasks.
              jshint  Validate files with JSHint. *
                copy  Copy files. *
               clean  Clean files and folders. *
                curl  Download files from the internet via grunt. *
            curl-dir  Download collections of files from the internet via
                      grunt. *
             default  Alias for &#34;setup&#34;, &#34;build&#34; tasks.
&lt;/pre&gt;

&lt;p&gt;Look at all that goodness! So many Grunt commands at your disposal all ready to go.&lt;/p&gt;

&lt;p&gt;The first thing you need to do is run the cef command, which will download Chromium Embedded Framework and prep it for your build. Type `grunt cef` in your terminal and you should see something like this:&lt;/p&gt;

&lt;pre class=&#34;wp-code-highlight prettyprint&#34;&gt;$ grunt cef
Running &#34;cef&#34; task

Running &#34;cef-download&#34; task
Downloading http://dev.brackets.io/cef/cef_binary_3.1453.1255_macosx.zip. This may take a while...

Running &#34;curl-dir:cef-mac&#34; (curl-dir) task
Files &#34;downloads/cef_binary_3.1453.1255_macosx.zip&#34; created.

Running &#34;cef-clean&#34; task

Running &#34;cef-extract&#34; task

Running &#34;cef-symlinks&#34; task

Done, without errors.

&lt;/pre&gt;

&lt;p&gt;Now do the same thing for node.js by typeing `grunt node` in the terminal:&lt;/p&gt;

&lt;pre class=&#34;wp-code-highlight prettyprint&#34;&gt;$ grunt node
Running &#34;node&#34; task
Downloading node-v0.8.20-darwin-x86.tar.gz. This may take a while...

Running &#34;curl-dir:node-mac&#34; (curl-dir) task
Files &#34;downloads/node-v0.8.20-darwin-x86.tar.gz&#34; created.

Running &#34;node-clean&#34; task

Running &#34;node-mac&#34; task

Done, without errors.
&lt;/pre&gt;

&lt;p&gt;Now you are ready to do a full-build. To do that (yup, you guessed it) type `grunt full-build`. It will take a bit of time, and will end with a warning:&lt;/p&gt;

&lt;pre class=&#34;wp-code-highlight prettyprint&#34;&gt;Warning: Unable to read &#34;installer/mac/staging/Brackets.app/Contents/www/config.json&#34; file (Error code: ENOENT). Use --force to continue.
&lt;/pre&gt;

&lt;p&gt;Don&amp;#8217;t worry about the warning, if you made it that far you made a full build! You can check out your newly-built app in the brackets-shell/installer/(mac or win, depending on your OS)/staging folder. Run it and make sure it loads your index.html file by default now. (it shouldn&amp;#8217;t prompt you to locate an index.html file, it should just open and run the one from your html application)&lt;/p&gt;

&lt;h4 id=&#34;let-8217-s-customize&#34;&gt;Let&amp;#8217;s customize!&lt;/h4&gt;

&lt;p&gt;You probably noticed your new application&amp;#8217;s name was &amp;#8220;brackets&amp;#8221; and that your icon for the app was the brackets logo. You don&amp;#8217;t want that, so let&amp;#8217;s change the name of your app to &amp;#8220;Awesome&amp;#8221;.&lt;/p&gt;

&lt;p&gt;There are a couple of places you will need to change to get your app name changed:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Gruntfile.js &amp;#8211; change the build name&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;http://clintberry.com/images/Screen-Shot-2013-06-24-at-3.07.07-PM.png&#34; alt=&#34;Screen Shot 2013-06-24 at 3.07.07 PM&#34; width=&#34;452&#34; height=&#34;100&#34; class=&#34;alignnone size-full wp-image-996&#34; /&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;appshell/config.h &amp;#8211; Change the app-name for windows and osx&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;http://clintberry.com/images/Screen-Shot-2013-06-24-at-3.06.13-PM.png&#34; alt=&#34;Screen Shot 2013-06-24 at 3.06.13 PM&#34; width=&#34;486&#34; height=&#34;324&#34; class=&#34;alignnone size-full wp-image-995&#34; /&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;appshell_config.gypi &amp;#8211; Change the app-name as well&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;http://clintberry.com/images/Screen-Shot-2013-08-01-at-12.46.32-PM.png&#34; alt=&#34;Screen Shot 2013-08-01 at 12.46.32 PM&#34; width=&#34;354&#34; height=&#34;107&#34; class=&#34;alignnone size-full wp-image-1076&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Now just type `grunt full-build` at the terminal and it will create a build with your app and name the app &amp;#8220;awesome&amp;#8221;&lt;/p&gt;

&lt;h4 id=&#34;what-8217-s-next&#34;&gt;What&amp;#8217;s Next?&lt;/h4&gt;

&lt;p&gt;For basic HTML apps that you just need a shell for, this might be all you need. But this is only the beginning of what you can do with brackets-shell. Over the next few weeks I will be posting new tutorials showing how you can:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use built-in JavaScript functions that map to window functions (Drag, Quit, Create popups)&lt;/li&gt;
&lt;li&gt;Map custom JavaScript functions to C++ functions that alter the window in other ways&lt;/li&gt;
&lt;li&gt;Add features like Tray icons in windows, and stay on top of all other windows all the time&lt;/li&gt;
&lt;li&gt;Use node for advanced tasks and call those tasks from JavaScript in the browser window&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As always, let me know if you have any comments or questions!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>HTML5 Apps on the Desktop in 2013</title>
      <link>http://clintberry.com/2013/html5-apps-desktop-2013/</link>
      <pubDate>Sat, 11 May 2013 00:00:00 +0000</pubDate>
      
      <guid>http://clintberry.com/2013/html5-apps-desktop-2013/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://clintberry.com/images/html-apps-on-desktop.jpg&#34;&gt;&lt;img src=&#34;http://clintberry.com/images/html-apps-on-desktop.jpg&#34; alt=&#34;html-apps-on-desktop&#34; width=&#34;379&#34; height=&#34;286&#34; class=&#34;alignleft size-full wp-image-923&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;No doubt we are in the middle of the mobile revolution. The mobile-first mentality is prevalent. I feel like I see these types of posts every day lately:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://clintberry.com/images/Screen-Shot-2013-04-22-at-10.34.21-PM.png&#34; alt=&#34;Screen Shot 2013-04-22 at 10.34.21 PM&#34; title=&#34;Screen Shot 2013-04-22 at 10.34.21 PM&#34; width=&#34;520&#34; height=&#34;91&#34; class=&#34;alignnone size-full wp-image-793&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://clintberry.com/images/Screen-Shot-2013-04-22-at-10.35.34-PM.png&#34; alt=&#34;Screen Shot 2013-04-22 at 10.35.34 PM&#34; title=&#34;Screen Shot 2013-04-22 at 10.35.34 PM&#34; width=&#34;521&#34; height=&#34;84&#34; class=&#34;alignnone size-full wp-image-795&#34; /&gt;&lt;/p&gt;

&lt;p&gt;While there is an obvious trent towards mobile in the consumer world, there is one place desktop is king: &lt;strong&gt;Business.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We are a long way off from getting our work done on mobile devices. Accountants, day traders, developers, and a whole litany of other careers require desktop computing of some sort. I know I sure don&amp;#8217;t want to develop apps on my 4&amp;#8243; phone screen. On an ipad maybe if I was traveling, but desktop size increases my productivity and I don&amp;#8217;t see many developers dumping their desktops/laptops for ipad only development.&lt;/p&gt;

&lt;p&gt;At my current company we develop &lt;a href=&#34;http://getweave.com&#34; title=&#34;Dental Phone Systems&#34; target=&#34;_blank&#34;&gt;phone systems for dental offices&lt;/a&gt;. I can tell you that desktop computers will be in the dental industry for years to come.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But why run HTML apps on the desktop?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Control the browser&lt;/strong&gt; &amp;#8211; Bundling your app into an executable allows you to dictate what rendering engine (webkit) will be used for your app.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cross Platform&lt;/strong&gt; &amp;#8211; HTML runs on all operating systems, so it can be much easier to create a cross platform desktop application.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Build once, run everywhere&amp;#8230;&lt;/strong&gt; &amp;#8211; I am a huge fan of the build-once-run-everywhere methodology. While it won&amp;#8217;t work for some projects, many applications can see a huge benefit to sharing code between the desktop, web, and mobile space.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Window sizing and control&lt;/strong&gt; &amp;#8211; If you want your app to run at a certain size, or do some more advanced things with popups, you get that control on the desktop. Most solutions also provide a way to access the file system and allow other more advanced controls you wouldn&amp;#8217;t get with a regular web app.&lt;/p&gt;

&lt;p&gt;Here are all the different options I have researched for creating HTML/JS applications on the desktop, with their pros and cons. Please leave comments if you know of other solutions I should look at.&lt;/p&gt;

&lt;h3 id=&#34;tidesdk&#34;&gt;TideSDK&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://www.tidesdk.org/&#34; title=&#34;TideSDK&#34; target=&#34;_blank&#34;&gt;TideSDK&lt;/a&gt; has so much potential. They have a great looking website and a good set of tools. Of all the solutions I looked at, TideSDK has the easiest method for packaging your app. You open up the TideSDK builder and choose your HTML files, and click the package button. It runs basic web applications with ease. But then I tried running my first AngularJS app and&amp;#8230; FAIL. So I checked the web inspector and saw a litany of errors that I knew didn&amp;#8217;t exist when I ran my app in chrome. Turns out the webkit version used in TideSDK is over 3 years old and Angular doesn&amp;#8217;t like it. They haven&amp;#8217;t had a solid update for a while as well and are &lt;a href=&#34;http://www.tidesdk.org/blog/2013/04/11/tidesdk-in-numbers/&#34; title=&#34;TideSDK needs money&#34; target=&#34;_blank&#34;&gt;pleading for money&lt;/a&gt; from the community.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Good&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Great Packaging Tools&lt;/li&gt;
&lt;li&gt;Run PHP, Python, or Ruby code on the &amp;#8220;backend&amp;#8221; of your app (Awesome!)&lt;/li&gt;
&lt;li&gt;Documentation is thorough with good getting started guides&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;The Bad&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;No version bumps in a long time&lt;/li&gt;
&lt;li&gt;The webkit version is OLD&lt;/li&gt;
&lt;li&gt;They need more money to keep going
&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;appjs&#34;&gt;AppJS&lt;/h3&gt;

&lt;p&gt;If you are a nodeJS fan, &lt;a href=&#34;http://appjs.com/&#34; title=&#34;Desktop Apps with HTML&#34; target=&#34;_blank&#34;&gt;AppJS&lt;/a&gt; is the start of something awesome. It runs allows you to interact with desktop windows via JavaScript in a nodeJS application. Great idea, but it has some bugs and debugging issues can be a pain. Also, the issue list keeps piling up in github and it seems no progress is being made.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Good&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;NodeJS-based makes this pretty simple to get going&lt;/li&gt;
&lt;li&gt;Thousands of cool NodeJS libraries now available to run on the desktop&lt;/li&gt;
&lt;li&gt;Cool features like transparent windows, window dragging, and popups all built in&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;The Bad&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;No recent updates and appears abandoned&lt;/li&gt;
&lt;li&gt;Enough bugs to make this not production worthy&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;node-webkit&#34;&gt;Node-webkit&lt;/h3&gt;

&lt;p&gt;Along the same lines as appjs, &lt;a href=&#34;https://github.com/rogerwang/node-webkit&#34; title=&#34;html apps on the desktop with node-webkit&#34; target=&#34;_blank&#34;&gt;node-webkit&lt;/a&gt; is a desktop runtime that combines chromium with NodeJS. This project is also backed by Intel and has regular updates. Packaging apps into Exes is not trivial, however and we had some problems running our more advanced apps on windows (popup windows in particular).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Good&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;NodeJS based is awesome&lt;/li&gt;
&lt;li&gt;Backed by Intel, with regular updates&lt;/li&gt;
&lt;li&gt;Webkit and Node run in the same memory space which allows for some cool tricks&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;The Bad&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Packaging apps isn&amp;#8217;t simple&lt;/li&gt;
&lt;li&gt;Had trouble with popup windows on Windows

&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;sencha-desktop&#34;&gt;Sencha Desktop&lt;/h3&gt;

&lt;p&gt;Sencha&amp;#8217;s solution is not free at almsot $700. It&amp;#8217;s webkit version is outdated and it has a very limited feature set for controlling the windows (no transparency, no removing the chrome frame, etc).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;No breakdown. This baby isn&amp;#8217;t worth the price, hands down.

&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;brackets-shell&#34;&gt;Brackets Shell&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&#34;https://github.com/adobe/brackets-shell&#34; title=&#34;Brackets Shell&#34; target=&#34;_blank&#34;&gt;Brackets Shell&lt;/a&gt; is a customized version of Chromium Embedded Framework (CEF) that was created to run the &lt;a href=&#34;http://brackets.io/&#34; title=&#34;HTML JavaScript Editor&#34; target=&#34;_blank&#34;&gt;Brackets IDE&lt;/a&gt; on the desktop. But this shell has some great features and is general enough to allow you to modify it and use it for your own project. Brackets Shell is backed by Adobe and is updated regularly, and they &lt;a href=&#34;https://github.com/adobe/brackets-shell/pull/231&#34; title=&#34;Pull Request for Drag capabilities&#34; target=&#34;_blank&#34;&gt;accept pull requests&lt;/a&gt; for features that the Brackets IDE might not even use. Building the shell is easy thanks to the bundled Grunt file, and it is using CEF3 so the webkit version is up to date. We went with this solution at my current company and have been loving it. I intend to write a whole post on customizing and using the brackets shell soon.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;UPDATE:&lt;/strong&gt; I wrote a full post on &lt;a href=&#34;http://clintberry.com/2013/html5-desktop-apps-with-brackets-shell/&#34; title=&#34;Native desktop apps in HTML with Brackets Shell&#34;&gt;getting started with brackets-shell&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Good&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Backed by Adobe, with regular updates and an updated webkit version&lt;/li&gt;
&lt;li&gt;NodeJS was recently integrated into the shell for some awesome new capabilities&lt;/li&gt;
&lt;li&gt;Building and packaging apps is amazingly easy using GruntJS and runs on Windows and Mac&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;The Bad&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Lacking some features for customizing the main window, like transparency&lt;/li&gt;
&lt;li&gt;No linux support (yet)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/adobe/brackets/issues/2389 &#34; title=&#34;no html5 audio in brackets shell&#34; target=&#34;_blank&#34;&gt;No HTML5 audio? (sad)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;other-solutions&#34;&gt;Other Solutions&lt;/h3&gt;

&lt;p&gt;Other solutions I haven&amp;#8217;t looked into are Windows 8 which runs &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/windows/apps/br211385.aspx&#34; title=&#34;Windows 8 web apps&#34; target=&#34;_blank&#34;&gt;HTML apps as first class citizens&lt;/a&gt; directly on the desktop. Ubuntu desktop has a similar solution with &lt;a href=&#34;http://developer.ubuntu.com/resources/technologies/webapps/&#34; title=&#34;Ubuntu Web Apps&#34; target=&#34;_blank&#34;&gt;Ubuntu Web Apps&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As I see Windows and Ubuntu embracing HTML on the desktop, I can&amp;#8217;t help but think the future is bright for desktop apps, even in a mobile first economy.&lt;/p&gt;

&lt;p&gt;As always, let me know if you have any comments, corrections, or criticisms.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>